<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\regexp\RegexpMatcher.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Interface describing a regular expression matcher.
 *
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>RegexpMatcher</name> <block>{

    <comment type="javadoc">/***
     * Default Mask (case insensitive, neither multiline nor
     * singleline specified).
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>MATCH_DEFAULT</name>          =<init> <expr>0x00000000</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/***
     * Perform a case insensitive match
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>MATCH_CASE_INSENSITIVE</name> =<init> <expr>0x00000100</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/***
     * Treat the input as a multiline input
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>MATCH_MULTILINE</name>        =<init> <expr>0x00001000</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/***
     * Treat the input as singleline input ('.' matches newline)
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>MATCH_SINGLELINE</name>       =<init> <expr>0x00010000</expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Set the regexp pattern from the String description.
     * @param pattern the pattern to match
     * @throws BuildException on error
     */</comment>
    <function_decl><type><name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Get a String representation of the regexp pattern
     * @return the pattern
     * @throws BuildException on error
     */</comment>
    <function_decl><type><name>String</name></type> <name>getPattern</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Does the given argument match the pattern?
     * @param argument the string to match against
     * @return true if the pattern matches
     * @throws BuildException on error
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>matches</name><parameter_list>(<param><decl><type><name>String</name></type> <name>argument</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Returns a Vector of matched groups found in the argument
     * using default options.
     *
     * &lt;p&gt;Group 0 will be the full match, the rest are the
     * parenthesized subexpressions&lt;/p&gt;.
     *
     * @param argument the string to match against
     * @return the vector of groups
     * @throws BuildException on error
     */</comment>
    <function_decl><type><name>Vector</name></type> <name>getGroups</name><parameter_list>(<param><decl><type><name>String</name></type> <name>argument</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/***
     * Does this regular expression match the input, given
     * certain options
     * @param input The string to check for a match
     * @param options The list of options for the match. See the
     *                MATCH_ constants above.
     * @return true if the pattern matches
     * @throws BuildException on error
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>matches</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>options</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/***
     * Get the match groups from this regular expression.  The return
     * type of the elements is always String.
     * @param input The string to check for a match
     * @param options The list of options for the match. See the
     *                MATCH_ constants above.
     * @return the vector of groups
     * @throws BuildException on error
     */</comment>
    <function_decl><type><name>Vector</name></type> <name>getGroups</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>options</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws>;</function_decl>

}</block></class>
</unit>
