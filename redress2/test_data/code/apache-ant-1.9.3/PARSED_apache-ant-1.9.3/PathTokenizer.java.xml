<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\PathTokenizer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>

<comment type="javadoc">/**
 * A Path tokenizer takes a path and returns the components that make up
 * that path.
 *
 * The path can use path separators of either ':' or ';' and file separators
 * of either '/' or '\'.
 *
 */</comment>
<class><specifier>public</specifier> class <name>PathTokenizer</name> <block>{
    <comment type="javadoc">/**
     * A tokenizer to break the string up based on the ':' or ';' separators.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StringTokenizer</name></type> <name>tokenizer</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A String which stores any path components which have been read ahead
     * due to DOS filesystem compensation.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>lookahead</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A boolean that determines if we are running on Novell NetWare, which
     * exhibits slightly different path name characteristics (multi-character
     * volume / drive names)
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>onNetWare</name> =<init> <expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Flag to indicate whether or not we are running on a platform with a
     * DOS style filesystem
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>dosStyleFilesystem</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a path tokenizer for the specified path.
     *
     * @param path The path to tokenize. Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>PathTokenizer</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>onNetWare</name></expr>)</condition><then> <block>{
            <comment type="line">// For NetWare, use the boolean=true mode, so we can use delimiter</comment>
            <comment type="line">// information to make a better decision later.</comment>
            <expr_stmt><expr><name>tokenizer</name> = new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>":;"</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// on Windows and Unix, we can ignore delimiters and still have</comment>
            <comment type="line">// enough information to tokenize correctly.</comment>
            <expr_stmt><expr><name>tokenizer</name> = new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>":;"</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>dosStyleFilesystem</name> = <name><name>File</name>.<name>pathSeparatorChar</name></name> == ';'</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Tests if there are more path elements available from this tokenizer's
     * path. If this method returns &lt;code&gt;true&lt;/code&gt;, then a subsequent call
     * to nextToken will successfully return a token.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if and only if there is at least one token
     * in the string after the current position; &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasMoreTokens</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>lookahead</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <return>return <expr><call><name><name>tokenizer</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the next path element from this tokenizer.
     *
     * @return the next path element from this tokenizer.
     *
     * @exception NoSuchElementException if there are no more elements in this
     *            tokenizer's path.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>nextToken</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchElementException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>token</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>lookahead</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>token</name> = <name>lookahead</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lookahead</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>token</name> = <call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr>!<name>onNetWare</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>token</name>.<name>length</name></name><argument_list>()</argument_list></call> == 1 &amp;&amp; <call><name><name>Character</name>.<name>isLetter</name></name><argument_list>(<argument><expr><call><name><name>token</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                    &amp;&amp; <name>dosStyleFilesystem</name>
                                    &amp;&amp; <call><name><name>tokenizer</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// we are on a dos style system so this path could be a drive</comment>
                <comment type="line">// spec. We look at the next token</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>nextToken</name> =<init> <expr><call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>nextToken</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"\\"</expr></argument>)</argument_list></call> || <call><name><name>nextToken</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// we know we are on a DOS style platform and the next path</comment>
                    <comment type="line">// starts with a slash or backslash, so we know this is a</comment>
                    <comment type="line">// drive spec</comment>
                    <expr_stmt><expr><name>token</name> += ":" + <name>nextToken</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// store the token just read for next time</comment>
                    <expr_stmt><expr><name>lookahead</name> = <name>nextToken</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <comment type="line">// we are on NetWare, tokenizing is handled a little differently,</comment>
            <comment type="line">// due to the fact that NetWare has multiple-character volume names.</comment>
            <if>if <condition>(<expr><call><name><name>token</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>pathSeparator</name></name></expr></argument>)</argument_list></call> || <call><name><name>token</name>.<name>equals</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// ignore ";" and get the next token</comment>
                <expr_stmt><expr><name>token</name> = <call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>tokenizer</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// this path could be a drive spec, so look at the next token</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>nextToken</name> =<init> <expr><call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// make sure we aren't going to get the path separator next</comment>
                <if>if <condition>(<expr>!<call><name><name>nextToken</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>pathSeparator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>nextToken</name>.<name>equals</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr>!<call><name><name>token</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>token</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"\\"</expr></argument>)</argument_list></call>
                            &amp;&amp; !<call><name><name>token</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call>
                            &amp;&amp; !<call><name><name>token</name>.<name>startsWith</name></name><argument_list>(<argument><expr>".."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <comment type="line">// it indeed is a drive spec, get the next bit</comment>
                            <decl_stmt><decl><type><name>String</name></type> <name>oneMore</name> =<init> <expr><call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr>!<call><name><name>oneMore</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>pathSeparator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>token</name> += ":" + <name>oneMore</name></expr>;</expr_stmt>
                            }</block></then> <else>else <block>{
                                <expr_stmt><expr><name>token</name> += ":"</expr>;</expr_stmt>
                                <expr_stmt><expr><name>lookahead</name> = <name>oneMore</name></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then></if>
                        <comment type="line">// implicit else: ignore the ':' since we have either a</comment>
                        <comment type="line">// UNIX or a relative path</comment>
                    }</block></then> <else>else <block>{
                        <comment type="line">// store the token just read for next time</comment>
                        <expr_stmt><expr><name>lookahead</name> = <name>nextToken</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><name>token</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
