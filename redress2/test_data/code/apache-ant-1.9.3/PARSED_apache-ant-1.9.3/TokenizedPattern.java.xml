<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\selectors\TokenizedPattern.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<comment type="javadoc">/**
 * Provides reusable path pattern matching.  PathPattern is preferable
 * to equivalent SelectorUtils methods if you need to execute multiple
 * matching with the same pattern because here the pattern itself will
 * be parsed only once.
 * @see SelectorUtils#matchPath(String, String)
 * @see SelectorUtils#matchPath(String, String, boolean)
 * @since 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>TokenizedPattern</name> <block>{

    <comment type="javadoc">/**
     * Instance that holds no tokens at all.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TokenizedPattern</name></type> <name>EMPTY_PATTERN</name> =<init>
        <expr>new <call><name>TokenizedPattern</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>pattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>tokenizedPattern</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
    * Initialize the PathPattern by parsing it.
    * @param pattern The pattern to match against. Must not be
    *                &lt;code&gt;null&lt;/code&gt;.
    */</comment>
    <constructor><specifier>public</specifier> <name>TokenizedPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><call><name><name>SelectorUtils</name>.<name>tokenizePathAsArray</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>TokenizedPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>tokens</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pattern</name></name> = <name>pattern</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tokenizedPattern</name></name> = <name>tokens</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Tests whether or not a given path matches a given pattern.
     *
     * @param path    The path to match, as a String. Must not be
     *                &lt;code&gt;null&lt;/code&gt;.
     * @param isCaseSensitive Whether or not matching should be performed
     *                        case sensitively.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the pattern matches against the string,
     *         or &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>matchPath</name><parameter_list>(<param><decl><type><name>TokenizedPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isCaseSensitive</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>SelectorUtils</name>.<name>matchPath</name></name><argument_list>(<argument><expr><name>tokenizedPattern</name></expr></argument>, <argument><expr><call><name><name>path</name>.<name>getTokens</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><name>isCaseSensitive</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests whether or not this pattern matches the start of
     * a path.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>matchStartOf</name><parameter_list>(<param><decl><type><name>TokenizedPath</name></type> <name>path</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>caseSensitive</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>SelectorUtils</name>.<name>matchPatternStart</name></name><argument_list>(<argument><expr><name>tokenizedPattern</name></expr></argument>,
                                               <argument><expr><call><name><name>path</name>.<name>getTokens</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>caseSensitive</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return The pattern String
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>pattern</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPattern</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>pattern</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * true if the original patterns are equal.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>o</name> <name>instanceof</name> <name>TokenizedPattern</name>
            &amp;&amp; <call><name><name>pattern</name>.<name>equals</name></name><argument_list>(<argument><expr>((<name>TokenizedPattern</name>) <name>o</name>).<name>pattern</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>pattern</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The depth (or length) of a pattern.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>depth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>tokenizedPattern</name>.<name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Does the tokenized pattern contain the given string?
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pat</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>tokenizedPattern</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>tokenizedPattern</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a new TokenizedPath where all tokens of this pattern to
     * the right containing wildcards have been removed
     * @return the leftmost part of the pattern without wildcards
     */</comment>
    <function><type><specifier>public</specifier> <name>TokenizedPath</name></type> <name>rtrimWildcardTokens</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>newLen</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init>;</init> <condition><expr><name>newLen</name> &lt; <name><name>tokenizedPattern</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>newLen</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>SelectorUtils</name>.<name>hasWildcards</name></name><argument_list>(<argument><expr><name><name>tokenizedPattern</name><index>[<expr><name>newLen</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <if>if <condition>(<expr><name>newLen</name> &gt; 0
                &amp;&amp; <call><name><name>sb</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>sb</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call> != <name><name>File</name>.<name>separatorChar</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>tokenizedPattern</name><index>[<expr><name>newLen</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>newLen</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name><name>TokenizedPath</name>.<name>EMPTY_PATH</name></name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>newPats</name> =<init> <expr>new <name><name>String</name><index>[<expr><name>newLen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>tokenizedPattern</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newPats</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>TokenizedPath</name><argument_list>(<argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newPats</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * true if the last token equals the given string.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>endsWith</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>tokenizedPattern</name>.<name>length</name></name> &gt; 0
            &amp;&amp; <name><name>tokenizedPattern</name><index>[<expr><name><name>tokenizedPattern</name>.<name>length</name></name> - 1</expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a new pattern without the last token of this pattern.
     */</comment>
    <function><type><specifier>public</specifier> <name>TokenizedPattern</name></type> <name>withoutLastToken</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>tokenizedPattern</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"cant strip a token from nothing"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>tokenizedPattern</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
            <return>return <expr><name>EMPTY_PATTERN</name></expr>;</return>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>toStrip</name> =<init> <expr><name><name>tokenizedPattern</name><index>[<expr><name><name>tokenizedPattern</name>.<name>length</name></name> - 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>pattern</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr><name>toStrip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>tokens</name> =<init> <expr>new <name><name>String</name><index>[<expr><name><name>tokenizedPattern</name>.<name>length</name></name> - 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>tokenizedPattern</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><name><name>tokenizedPattern</name>.<name>length</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>new <call><name>TokenizedPattern</name><argument_list>(<argument><expr><call><name><name>pattern</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if></else></if>
    }</block></function>

}</block></class>
</unit>
