<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\junit\JUnitTestRunnerTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>junit</name>.<name>framework</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Small testcase for the runner, tests are very very very basics.
 * They must be enhanced with time.
 *
 */</comment>
<class><specifier>public</specifier> class <name>JUnitTestRunnerTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <comment type="line">// mandatory constructor</comment>
    <constructor><specifier>public</specifier> <name>JUnitTestRunnerTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// check that a valid method name generates no errors</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValidMethod</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>TestRunner</name></type> <name>runner</name> =<init> <expr><call><name>createRunnerForTestMethod</name><argument_list>(<argument><expr><name><name>ValidMethodTestCase</name>.<name><name/></name></name>class</expr></argument>,<argument><expr>"testA"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>runner</name>.<name>getFormatter</name></name><argument_list>()</argument_list></call>.<call><name>getError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>JUnitTestRunner</name>.<name>SUCCESS</name></name></expr></argument>, <argument><expr><call><name><name>runner</name>.<name>getRetCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// check that having an invalid method name generates an error</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInvalidMethod</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>TestRunner</name></type> <name>runner</name> =<init> <expr><call><name>createRunnerForTestMethod</name><argument_list>(<argument><expr><name><name>InvalidMethodTestCase</name>.<name><name/></name></name>class</expr></argument>,<argument><expr>"testInvalid"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>error</name> =<init> <expr><call><name><name>runner</name>.<name>getFormatter</name></name><argument_list>()</argument_list></call>.<call><name>getError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// might be FAILURES or ERRORS depending on JUnit version?</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name><name>runner</name>.<name>getRetCode</name></name><argument_list>()</argument_list></call> != <name><name>JUnitTestRunner</name>.<name>SUCCESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>    
    
    <comment type="line">// check that having no suite generates no errors</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoSuite</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>TestRunner</name></type> <name>runner</name> =<init> <expr><call><name>createRunner</name><argument_list>(<argument><expr><name><name>NoSuiteTestCase</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>runner</name>.<name>getFormatter</name></name><argument_list>()</argument_list></call>.<call><name>getError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>JUnitTestRunner</name>.<name>SUCCESS</name></name></expr></argument>, <argument><expr><call><name><name>runner</name>.<name>getRetCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// check that a suite generates no errors</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSuite</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>TestRunner</name></type> <name>runner</name> =<init> <expr><call><name>createRunner</name><argument_list>(<argument><expr><name><name>SuiteTestCase</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>runner</name>.<name>getFormatter</name></name><argument_list>()</argument_list></call>.<call><name>getError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>JUnitTestRunner</name>.<name>SUCCESS</name></name></expr></argument>, <argument><expr><call><name><name>runner</name>.<name>getRetCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// check that an invalid suite generates an error.</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInvalidSuite</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>TestRunner</name></type> <name>runner</name> =<init> <expr><call><name>createRunner</name><argument_list>(<argument><expr><name><name>InvalidSuiteTestCase</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>error</name> =<init> <expr><call><name><name>runner</name>.<name>getFormatter</name></name><argument_list>()</argument_list></call>.<call><name>getError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name><name>JUnitTestRunner</name>.<name>ERRORS</name></name></expr></argument>, <argument><expr><call><name><name>runner</name>.<name>getRetCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name><name>error</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"thrown on purpose"</expr></argument>)</argument_list></call> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// check that something which is not a testcase generates no errors</comment>
    <comment type="line">// at first even though this is incorrect.</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoTestCase</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>TestRunner</name></type> <name>runner</name> =<init> <expr><call><name>createRunner</name><argument_list>(<argument><expr><name><name>NoTestCase</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// On junit3 this is a FAILURE, on junit4 this is an ERROR</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> =<init> <expr><call><name><name>runner</name>.<name>getRetCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name>ret</name> != <name><name>JUnitTestRunner</name>.<name>FAILURES</name></name> &amp;&amp; <name>ret</name> != <name><name>JUnitTestRunner</name>.<name>ERRORS</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Unexpected result " + <name>ret</name> + " from junit runner"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// JUnit3 test</comment>
        <comment type="line">//assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());</comment>
    }</block></function>

    <comment type="line">// check that an exception in the constructor is noticed</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInvalidTestCase</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>TestRunner</name></type> <name>runner</name> =<init> <expr><call><name>createRunner</name><argument_list>(<argument><expr><name><name>InvalidTestCase</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// On junit3 this is a FAILURE, on junit4 this is an ERROR</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> =<init> <expr><call><name><name>runner</name>.<name>getRetCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ret</name> != <name><name>JUnitTestRunner</name>.<name>FAILURES</name></name> &amp;&amp; <name>ret</name> != <name><name>JUnitTestRunner</name>.<name>ERRORS</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Unexpected result " + <name>ret</name> + " from junit runner"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// JUNIT3 test</comment>
        <comment type="line">//assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());</comment>
        <comment type="line">//@fixme as of now does not report the original stacktrace.</comment>
        <comment type="line">//assertTrue(error, error.indexOf("thrown on purpose") != -1);</comment>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>TestRunner</name></type> <name>createRunner</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>clazz</name></decl></param>)</parameter_list><block>{
        <return>return <expr>new <call><name>TestRunner</name><argument_list>(<argument><expr>new <call><name>JUnitTest</name><argument_list>(<argument><expr><call><name><name>clazz</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
                                            <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>TestRunner</name></type> <name>createRunnerForTestMethod</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>clazz</name></decl></param>, <param><decl><type><name>String</name></type> <name>method</name></decl></param>)</parameter_list><block>{
        <return>return <expr>new <call><name>TestRunner</name><argument_list>(<argument><expr>new <call><name>JUnitTest</name><argument_list>(<argument><expr><call><name><name>clazz</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>method</name></expr>}</block></expr></argument>,
                                            <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>    
    
    <comment type="line">// the test runner that wrap the dummy formatter that interests us</comment>
    <class><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>TestRunner</name> <super><extends>extends <name>JUnitTestRunner</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>ResultFormatter</name></type> <name>formatter</name> =<init> <expr>new <call><name>ResultFormatter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <constructor><name>TestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>methods</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltonerror</name></decl></param>,
                   <param><decl><type><name>boolean</name></type> <name>filtertrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltonfailure</name></decl></param>)</parameter_list><block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>haltonerror</name></expr></argument>, <argument><expr><name>filtertrace</name></expr></argument>,  <argument><expr><name>haltonfailure</name></expr></argument>, 
                  <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name><name>TestRunner</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// use the classloader that loaded this class otherwise</comment>
            <comment type="line">// it will not be able to run inner classes if this test</comment>
            <comment type="line">// is ran in non-forked mode.</comment>
            <expr_stmt><expr><call><name>addFormatter</name><argument_list>(<argument><expr><name>formatter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><name>ResultFormatter</name></type> <name>getFormatter</name><parameter_list>()</parameter_list><block>{
            <return>return <expr><name>formatter</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="line">// dummy formatter just to catch the error</comment>
    <class><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>ResultFormatter</name> <super><implements>implements <name>JUnitResultFormatter</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Throwable</name></type> <name>error</name></decl>;</decl_stmt>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list><block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemError</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list><block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>startTestSuite</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>suite</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws><block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>endTestSuite</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>suite</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws><block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name><name>java</name>.<name>io</name>.<name>OutputStream</name></name></type> <name>out</name></decl></param>)</parameter_list><block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>startTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>t</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>endTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{ }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>AssertionFailedError</name></type> <name>t</name></decl></param>)</parameter_list> <block>{ }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addError</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>error</name> = <name>t</name></expr>;</expr_stmt>
        }</block></function>
        <function><type><name>String</name></type> <name>getError</name><parameter_list>()</parameter_list><block>{
            <if>if <condition>(<expr><name>error</name> == <name>null</name></expr>)</condition><then><block>{
                <return>return <expr>""</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>error</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr>new <call><name>PrintWriter</name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NoTestCase</name> <block>{
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>InvalidMethodTestCase</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>InvalidMethodTestCase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{ <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>testA</name><parameter_list>()</parameter_list><block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"thrown on purpose"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ValidMethodTestCase</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>ValidMethodTestCase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{ <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>testA</name><parameter_list>()</parameter_list><block>{
            <comment type="line">// expected to be executed</comment>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>testB</name><parameter_list>()</parameter_list><block>{
            <comment type="line">// should not be executed</comment>
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"thrown on purpose"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>    
    
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>InvalidTestCase</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>InvalidTestCase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"thrown on purpose"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></constructor>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NoSuiteTestCase</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>NoSuiteTestCase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{ <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>testA</name><parameter_list>()</parameter_list><block>{}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SuiteTestCase</name> <super><extends>extends <name>NoSuiteTestCase</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>SuiteTestCase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{ <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Test</name></type> <name>suite</name><parameter_list>()</parameter_list><block>{
            <return>return <expr>new <call><name>TestSuite</name><argument_list>(<argument><expr><name><name>SuiteTestCase</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>InvalidSuiteTestCase</name> <super><extends>extends <name>NoSuiteTestCase</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>InvalidSuiteTestCase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{ <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Test</name></type> <name>suite</name><parameter_list>()</parameter_list><block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"thrown on purpose"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>junit</name>.<name>textui</name>.<name>TestRunner</name>.<name>run</name></name><argument_list>(<argument><expr><name><name>JUnitTestRunnerTest</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

</unit>
