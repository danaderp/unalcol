<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Property.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name>.<name>ResolvePropertyMap</name></name>;</import>

<comment type="javadoc">/**
 * Sets a property by name, or set of properties (from file or
 * resource) in the project.  &lt;/p&gt;
 * Properties are immutable: whoever sets a property first freezes it for the
 * rest of the build; they are most definitely not variable.
 * &lt;p&gt;There are seven ways to set properties:&lt;/p&gt;
 * &lt;ul&gt;
 *   &lt;li&gt;By supplying both the &lt;i&gt;name&lt;/i&gt; and &lt;i&gt;value&lt;/i&gt; attribute.&lt;/li&gt;
 *   &lt;li&gt;By supplying the &lt;i&gt;name&lt;/i&gt; and nested text.&lt;/li&gt;
 *   &lt;li&gt;By supplying both the &lt;i&gt;name&lt;/i&gt; and &lt;i&gt;refid&lt;/i&gt; attribute.&lt;/li&gt;
 *   &lt;li&gt;By setting the &lt;i&gt;file&lt;/i&gt; attribute with the filename of the property
 *     file to load. This property file has the format as defined by the file used
 *     in the class java.util.Properties.&lt;/li&gt;
 *   &lt;li&gt;By setting the &lt;i&gt;url&lt;/i&gt; attribute with the url from which to load the
 *     properties. This url must be directed to a file that has the format as defined
 *     by the file used in the class java.util.Properties.&lt;/li&gt;
 *   &lt;li&gt;By setting the &lt;i&gt;resource&lt;/i&gt; attribute with the resource name of the
 *     property file to load. This property file has the format as defined by the
 *     file used in the class java.util.Properties.&lt;/li&gt;
 *   &lt;li&gt;By setting the &lt;i&gt;environment&lt;/i&gt; attribute with a prefix to use.
 *     Properties will be defined for every environment variable by
 *     prefixing the supplied name and a period to the name of the variable.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;Although combinations of these ways are possible, only one should be used
 * at a time. Problems might occur with the order in which properties are set, for
 * instance.&lt;/p&gt;
 * &lt;p&gt;The value part of the properties being set, might contain references to other
 * properties. These references are resolved at the time these properties are set.
 * This also holds for properties loaded from a property file.&lt;/p&gt;
 * Properties are case sensitive.
 *
 * @since Ant 1.1
 *
 * @ant.attribute.group name="name" description="One of these, when using the name attribute"
 * @ant.attribute.group name="noname" description="One of these, when not using the name attribute"
 * @ant.task category="property"
 */</comment>
<class><specifier>public</specifier> class <name>Property</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>URL</name></type> <name>url</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Path</name></type> <name>classpath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Reference</name></type> <name>ref</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>prefix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>fallback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>untypedValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>valueAttributeUsed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>relative</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>basedir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>prefixValues</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>userProperty</name></decl>;</decl_stmt> <comment type="line">// set read-only properties</comment>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Constructor for Property.
     */</comment>
    <constructor><specifier>public</specifier> <name>Property</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for Property.
     * @param userProperty if true this is a user property
     * @since Ant 1.5
     */</comment>
    <constructor><specifier>protected</specifier> <name>Property</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>userProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>userProperty</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for Property.
     * @param userProperty if true this is a user property
     * @param fallback a project to use to look for references if the reference is
     *                 not in the current project
     * @since Ant 1.5
     */</comment>
    <constructor><specifier>protected</specifier> <name>Property</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>userProperty</name></decl></param>, <param><decl><type><name>Project</name></type> <name>fallback</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>userProperty</name></name> = <name>userProperty</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fallback</name></name> = <name>fallback</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets 'relative' attribute.
     * @param relative new value
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRelative</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>relative</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>relative</name></name> = <name>relative</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets 'basedir' attribute.
     * @param basedir new value
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBasedir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>basedir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>basedir</name></name> = <name>basedir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The name of the property to set.
     * @param name property name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the property name.
     * @return the property name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the property to the absolute filename of the
     * given file. If the value of this attribute is an absolute path, it
     * is left unchanged (with / and \ characters converted to the
     * current platforms conventions). Otherwise it is taken as a path
     * relative to the project's basedir and expanded.
     * @param location path to set
     *
     * @ant.attribute group="name"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLocation</name><parameter_list>(<param><decl><type><name>File</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>relative</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>internalSetValue</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>location</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block">/* the following method is first in source so IH will pick it up first:
     * Hopefully we'll never get any classes compiled by wise-guy compilers that behave otherwise...
     */</comment>

    <comment type="javadoc">/**
     * Set the value of the property.
     * @param value the value to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>valueAttributeUsed</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>internalSetValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>internalSetValue</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>untypedValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <comment type="line">//preserve protected string value for subclasses :(</comment>
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name> == <name>null</name> ? <name>null</name> : <call><name><name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the value of the property as a String.
     * @param value value to assign
     *
     * @ant.attribute group="name"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr>(<name>Object</name>) <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a (multiline) property as nested text.
     * @param msg the text to append to the output text
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>valueAttributeUsed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>msg</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>currentValue</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>currentValue</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>msg</name> = <name>currentValue</name> + <name>msg</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>internalSetValue</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>msg</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"can't combine nested text with value"
                                     + " attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the property value.
     * @return the property value
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Filename of a property file to load.
     * @param file filename
     *
     * @ant.attribute group="noname"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the file attribute.
     * @return the file attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>file</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The url from which to load properties.
     * @param url url string
     *
     * @ant.attribute group="noname"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUrl</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>url</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the url attribute.
     * @return the url attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>URL</name></type> <name>getUrl</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>url</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Prefix to apply to properties loaded using &lt;code&gt;file&lt;/code&gt;
     * or &lt;code&gt;resource&lt;/code&gt;.
     * A "." is appended to the prefix if not specified.
     * @param prefix prefix string
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrefix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>prefix</name></name> = <name>prefix</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>prefix</name> != <name>null</name> &amp;&amp; !<call><name><name>prefix</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>prefix</name></name> += "."</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the prefix attribute.
     * @return the prefix attribute
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPrefix</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>prefix</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to apply the prefix when expanding properties on the
     * right hand side of a properties file as well.
     *
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrefixValues</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>prefixValues</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to apply the prefix when expanding properties on the
     * right hand side of a properties file as well.
     *
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPrefixValues</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>prefixValues</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a reference to an Ant datatype
     * declared elsewhere.
     * Only yields reasonable results for references
     * PATH like structures or properties.
     * @param ref reference
     *
     * @ant.attribute group="name"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>ref</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ref</name></name> = <name>ref</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the refid attribute.
     * @return the refid attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>Reference</name></type> <name>getRefid</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ref</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The resource name of a property file to load
     * @param resource resource on classpath
     *
     * @ant.attribute group="noname"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>resource</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>resource</name></name> = <name>resource</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the resource attribute.
     * @return the resource attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getResource</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>resource</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Prefix to use when retrieving environment variables.
     * Thus if you specify environment=&amp;quot;myenv&amp;quot;
     * you will be able to access OS-specific
     * environment variables via property names &amp;quot;myenv.PATH&amp;quot; or
     * &amp;quot;myenv.TERM&amp;quot;.
     * &lt;p&gt;
     * Note that if you supply a property name with a final
     * &amp;quot;.&amp;quot; it will not be doubled. ie environment=&amp;quot;myenv.&amp;quot; will still
     * allow access of environment variables through &amp;quot;myenv.PATH&amp;quot; and
     * &amp;quot;myenv.TERM&amp;quot;. This functionality is currently only implemented
     * on select platforms. Feel free to send patches to increase the number of platforms
     * this functionality is supported on ;).&lt;br&gt;
     * Note also that properties are case sensitive, even if the
     * environment variables on your operating system are not, e.g. it
     * will be ${env.Path} not ${env.PATH} on Windows 2000.
     * @param env prefix
     *
     * @ant.attribute group="noname"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEnvironment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>env</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>env</name></name> = <name>env</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the environment attribute.
     * @return the environment attribute
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getEnvironment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>env</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The classpath to use when looking up a resource.
     * @param classpath to add to any existing classpath
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>classpath</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>classpath</name></name> = <name>classpath</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>classpath</name>.<name>append</name></name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * The classpath to use when looking up a resource.
     * @return a path to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>classpath</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>classpath</name></name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>classpath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * the classpath to use when looking up a resource,
     * given as reference to a &amp;lt;path&amp;gt; defined elsewhere
     * @param r a reference to a classpath
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the classpath used when looking up a resource.
     * @return the classpath
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>getClasspath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>classpath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @param userProperty ignored
     * @deprecated since 1.5.x.
     *             This was never a supported feature and has been
     *             deprecated without replacement.
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUserProperty</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>userProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"DEPRECATED: Ignoring request to set user property in Property"
            + " task."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get the value of this property
     * @return the current value or the empty string
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>value</name> == <name>null</name> ? "" : <name>value</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * set the property in the project to the value.
     * if the task was give a file, resource or env attribute
     * here is where it is loaded
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"project has not been set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>name</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>untypedValue</name> == <name>null</name> &amp;&amp; <name>ref</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must specify value, location or "
                                         + "refid with the name attribute"</expr></argument>,
                                         <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>url</name> == <name>null</name> &amp;&amp; <name>file</name> == <name>null</name> &amp;&amp; <name>resource</name> == <name>null</name> &amp;&amp; <name>env</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must specify url, file, resource or "
                                         + "environment when not using the "
                                         + "name attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></else></if>

        <if>if <condition>(<expr><name>url</name> == <name>null</name> &amp;&amp; <name>file</name> == <name>null</name> &amp;&amp; <name>resource</name> == <name>null</name> &amp;&amp; <name>prefix</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Prefix is only valid when loading from "
                                     + "a url, file or resource"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>name</name> != <name>null</name> &amp;&amp; <name>untypedValue</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>relative</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>from</name> =<init> <expr><name>untypedValue</name> <name>instanceof</name> <name>File</name> ? (<name>File</name>)<name>untypedValue</name> : new <call><name>File</name><argument_list>(<argument><expr><call><name><name>untypedValue</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>File</name></type> <name>to</name> =<init> <expr><name>basedir</name> != <name>null</name> ? <name>basedir</name> : <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>relPath</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getRelativePath</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>relPath</name> = <call><name><name>relPath</name>.<name>replace</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>relPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>addProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>untypedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>loadFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>url</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>loadUrl</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>resource</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>loadResource</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>env</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>loadEnvironment</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>name</name> != <name>null</name>) &amp;&amp; (<name>ref</name> != <name>null</name>)</expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name>addProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                            <argument><expr><call><name><name>ref</name>.<name>getReferencedObject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
                <if>if <condition>(<expr><name>fallback</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>addProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                                <argument><expr><call><name><name>ref</name>.<name>getReferencedObject</name></name><argument_list>(<argument><expr><name>fallback</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <throw>throw <expr><name>be</name></expr>;</throw>
                }</block></else></if>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * load properties from a url
     * @param url url to load from
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>loadUrl</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>url</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Loading " + <name>url</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><call><name><name>url</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name>loadProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><call><name><name>url</name>.<name>getFile</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>is</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>
            <expr_stmt><expr><call><name>addProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Loads the properties defined in the InputStream into the given
     * property. On Java5+ it supports reading from XML based property
     * definition.
     * @param props The property object to load into
     * @param is    The input stream from where to load
     * @param isXml &lt;tt&gt;true&lt;/tt&gt; if we should try to load from xml
     * @throws IOException if something goes wrong
     * @since 1.8.0
     * @see http://java.sun.com/dtd/properties.dtd
     * @see java.util.Properties#loadFromXML(InputStream)
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadProperties</name><parameter_list>(
                                <param><decl><type><name>Properties</name></type> <name>props</name></decl></param>, <param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isXml</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>isXml</name></expr>)</condition><then> <block>{
            <comment type="line">// load the xml based property definition</comment>
            <expr_stmt><expr><call><name><name>props</name>.<name>loadFromXML</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// load ".properties" format</comment>
            <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * load properties from a file
     * @param file file to load
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>loadFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Loading " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>FileInputStream</name></type>  <name>fis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>fis</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>loadProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>fis</name></expr></argument>, <argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
                <expr_stmt><expr><call><name>addProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Unable to find property file: " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * load properties from a resource in the current classpath
     * @param name name of resource to load
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>loadResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Resource Loading " + <name>name</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>cL</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>cleanup</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><name>classpath</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cleanup</name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><name>cL</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>cL</name> = <call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>cL</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>is</name> = <call><name><name>ClassLoader</name>.<name>getSystemResourceAsStream</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>is</name> = <call><name><name>cL</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>loadProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><call><name><name>name</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Unable to find resource " + <name>name</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>is</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>cleanup</name> &amp;&amp; <name>cL</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>AntClassLoader</name>) <name>cL</name>).<call><name>cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * load the environment values
     * @param prefix prefix to place before them
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>loadEnvironment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>prefix</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>prefix</name> += "."</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Loading Environment " + <name>prefix</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Map</name></type> <name>osEnv</name> =<init> <expr><call><name><name>Execute</name>.<name>getEnvironmentVariables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>e</name> =<init> <expr><call><name><name>osEnv</name>.<name>entrySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>) <block>{
            <decl_stmt><decl><type><name><name>Map</name>.<name>Entry</name></name></type> <name>entry</name> =<init> <expr>(<name><name>Map</name>.<name>Entry</name></name>) <call><name><name>e</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr><name>prefix</name> + <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>addProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * iterate through a set of properties,
     * resolve them then assign them
     * @param props the properties to iterate over
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addProperties</name><parameter_list>(<param><decl><type><name>Properties</name></type> <name>props</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>HashMap</name></type> <name>m</name> =<init> <expr>new <call><name>HashMap</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>resolveAllProperties</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>it</name> =<init> <expr><call><name><name>m</name>.<name>keySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>k</name> =<init> <expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>propertyName</name> =<init> <expr>(<name>String</name>) <name>k</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>prefix</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>propertyName</name> = <name>prefix</name> + <name>propertyName</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name>addProperty</name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>, <argument><expr><call><name><name>m</name>.<name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * add a name value pair to the project property set
     * @param n name of property
     * @param v value to set
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>n</name></decl></param>, <param><decl><type><name>String</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addProperty</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr>(<name>Object</name>) <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a name value pair to the project property set
     * @param n name of property
     * @param v value to set
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>n</name></decl></param>, <param><decl><type><name>Object</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PropertyHelper</name></type> <name>ph</name> =<init> <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>userProperty</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>ph</name>.<name>getUserProperty</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ph</name>.<name>setInheritedProperty</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Override ignored for " + <name>n</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>ph</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * resolve properties inside a properties hashtable
     * @param props properties object to resolve
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>resolveAllProperties</name><parameter_list>(<param><decl><type><name>Map</name></type> <name>props</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>PropertyHelper</name></type> <name>propertyHelper</name>
            =<init> <expr>(<name>PropertyHelper</name>) <call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>new <call><name>ResolvePropertyMap</name><argument_list>(
                               <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><name>propertyHelper</name></expr></argument>,
                               <argument><expr><call><name><name>propertyHelper</name>.<name>getExpanders</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            .<call><name>resolveAllProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><call><name>getPrefix</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getPrefixValues</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
