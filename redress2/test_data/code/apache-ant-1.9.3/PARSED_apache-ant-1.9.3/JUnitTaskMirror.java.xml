<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\JUnitTaskMirror.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Permissions</name></name>;</import>

<comment type="javadoc">/**
 * Handles the portions of {@link JUnitTask} which need to directly access
 * actual JUnit classes, so that junit.jar need not be on Ant's startup classpath.
 * Neither JUnitTask.java nor JUnitTaskMirror.java nor their transitive static
 * deps may import any junit.** classes!
 * Specifically, need to not refer to
 * - JUnitResultFormatter or its subclasses
 * - JUnitVersionHelper
 * - JUnitTestRunner
 * Cf.  JUnitTask.SplitLoader#isSplit(String)
 * Public only to permit access from classes in this package; do not use directly.
 *
 * @since 1.7
 * @see "bug #38799"
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>JUnitTaskMirror</name> <block>{

    <comment type="javadoc">/**
     * Add the formatter to be called when the jvm exits before
     * the test suite finishes.
     * @param test the test.
     * @param formatter the formatter to use.
     * @param out the output stream to use.
     * @param message the message to write out.
     * @param testCase the name of the test.
     */</comment>
    <function_decl><type><name>void</name></type> <name>addVmExit</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name>JUnitResultFormatterMirror</name></type> <name>formatter</name></decl></param>,
            <param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>testCase</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Create a new test runner for a test.
     * @param test the test to run.
     * @param methods names of the test methods to be run.
     * @param haltOnError if true halt the tests if an error occurs.
     * @param filterTrace if true filter the stack traces.
     * @param haltOnFailure if true halt the test if a failure occurs.
     * @param showOutput    if true show output.
     * @param logTestListenerEvents if true log test listener events.
     * @param classLoader      the classloader to use to create the runner.
     * @return the test runner.
     */</comment>
    <function_decl><type><name>JUnitTestRunnerMirror</name></type> <name>newJUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>methods</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>,
            <param><decl><type><name>boolean</name></type> <name>filterTrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>showOutput</name></decl></param>,
            <param><decl><type><name>boolean</name></type> <name>logTestListenerEvents</name></decl></param>, <param><decl><type><name>AntClassLoader</name></type> <name>classLoader</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Create a summary result formatter.
     * @return the created formatter.
     */</comment>
    <function_decl><type><name>SummaryJUnitResultFormatterMirror</name></type> <name>newSummaryJUnitResultFormatter</name><parameter_list>()</parameter_list>;</function_decl>


    <comment type="javadoc">/** The interface that JUnitResultFormatter extends. */</comment>
    <class type="interface"><specifier>public</specifier> interface <name>JUnitResultFormatterMirror</name> <block>{
        <comment type="javadoc">/**
         * Set the output stream.
         * @param outputStream the stream to use.
         */</comment>
        <function_decl><type><name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>outputStream</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>

    <comment type="javadoc">/** The interface that SummaryJUnitResultFormatter extends. */</comment>
    <class type="interface"><specifier>public</specifier> interface <name>SummaryJUnitResultFormatterMirror</name>
        <super><extends>extends <name>JUnitResultFormatterMirror</name></extends></super> <block>{

        <comment type="javadoc">/**
         * Set where standard out and standard error should be included.
         * @param value if true include the outputs in the summary.
         */</comment>
        <function_decl><type><name>void</name></type> <name>setWithOutAndErr</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>

    <comment type="javadoc">/** Interface that test runners implement. */</comment>
    <class type="interface"><specifier>public</specifier> interface <name>JUnitTestRunnerMirror</name> <block>{

        <comment type="javadoc">/**
         * Used in formatter arguments as a placeholder for the basename
         * of the output file (which gets replaced by a test specific
         * output file name later).
         *
         * @since Ant 1.6.3
         */</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>IGNORED_FILE_NAME</name> =<init> <expr>"IGNORETHIS"</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * No problems with this test.
         */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>SUCCESS</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Some tests failed.
         */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>FAILURES</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * An error occurred.
         */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ERRORS</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Permissions for the test run.
         * @param perm the permissions to use.
         */</comment>
        <function_decl><type><name>void</name></type> <name>setPermissions</name><parameter_list>(<param><decl><type><name>Permissions</name></type> <name>perm</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="javadoc">/** Run the test. */</comment>
        <function_decl><type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * Add a formatter to the test.
         * @param formatter the formatter to use.
         */</comment>
        <function_decl><type><name>void</name></type> <name>addFormatter</name><parameter_list>(<param><decl><type><name>JUnitResultFormatterMirror</name></type> <name>formatter</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * Returns what System.exit() would return in the standalone version.
         *
         * @return 2 if errors occurred, 1 if tests failed else 0.
         */</comment>
        <function_decl><type><name>int</name></type> <name>getRetCode</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * Handle output sent to System.err.
         *
         * @param output coming from System.err
         */</comment>
        <function_decl><type><name>void</name></type> <name>handleErrorFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * Handle output sent to System.err.
         *
         * @param output output for System.err
         */</comment>
        <function_decl><type><name>void</name></type> <name>handleErrorOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * Handle output sent to System.out.
         *
         * @param output output for System.out.
         */</comment>
        <function_decl><type><name>void</name></type> <name>handleOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * Handle an input request.
         *
         * @param buffer the buffer into which data is to be read.
         * @param offset the offset into the buffer at which data is stored.
         * @param length the amount of data to read.
         *
         * @return the number of bytes read.
         *
         * @exception IOException if the data cannot be read.
         */</comment>
        <function_decl><type><name>int</name></type> <name>handleInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

        <comment type="javadoc">/**
         * Handle output sent to System.out.
         *
         * @param output output for System.out.
         */</comment>
       <function_decl><type><name>void</name></type> <name>handleFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list>;</function_decl>

    }</block></class>
}</block></class>
</unit>
