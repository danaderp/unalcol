<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ImportTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Location</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>ImportTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>ImportTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimpleImport</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/import/import.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"Before importIn imported topAfter import"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnnamedNesting</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/import/unnamedImport.xml"</expr></argument>,
                         <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Warnings logged when not expected: " + <name>log</name></expr></argument>,
                    <argument><expr><call><name><name>log</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSerial</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/import/subdir/serial.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"Unnamed2.xmlUnnamed1.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fullLog</name> =<init> <expr><call><name>getFullLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>substring</name> =<init> <expr>"Skipped already imported file"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expecting full log to contain \"" + <name>substring</name>
            + "\" full log was \"" + <name>fullLog</name> + "\""</expr></argument>,
            <argument><expr><call><name><name>fullLog</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>substring</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// allow this as imported in targets are only tested when a target is run</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testImportInTargetNoEffect</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/import/subdir/importintarget.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"no-import"</expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>null</name> == <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"baz"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// deactivate this test as imports within targets are not allowed</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>notTestImportInTargetWithEffect</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/import/subdir/importintarget.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"do-import"</expr></argument>, <argument><expr>"foo"</expr></argument>, <argument><expr>"bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"baz"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testImportInTargetNotAllowed</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(
            <argument><expr>"src/etc/testcases/taskdefs/import/subdir/importintarget.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(
            <argument><expr>"do-import"</expr></argument>, <argument><expr>"not a top level task"</expr></argument>,
            <argument><expr>"import only allowed as a top-level task"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testImportInSequential</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(
            <argument><expr>"src/etc/testcases/taskdefs/import/subdir/importinsequential.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"within-imported"</expr></argument>, <argument><expr>"foo"</expr></argument>, <argument><expr>"bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"baz"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testImportSameTargets</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>configureProject</name><argument_list>(
                <argument><expr>"src/etc/testcases/taskdefs/import/same_target.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>message</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"Duplicate target"</expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Did not see 'Duplicate target' in '" + <name>message</name> +"'"</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return;</return>
        }</block></catch></try>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
            <argument><expr>"Did not see build exception"</expr></argument>,
            <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testImportError</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>configureProject</name><argument_list>(
                <argument><expr>"src/etc/testcases/taskdefs/import/import_bad_import.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>Location</name></type> <name>lo</name> =<init> <expr><call><name><name>ex</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
                <argument><expr>"expected location of build exception to be set"</expr></argument>,
                <argument><expr>(<name>lo</name> != <name>null</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
                <argument><expr>"expected location to contain calling file"</expr></argument>,
                <argument><expr><call><name><name>lo</name>.<name>getFileName</name></name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"import_bad_import.xml"</expr></argument>)</argument_list></call> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
                <argument><expr>"expected message of ex to contain called file"</expr></argument>,
                <argument><expr><call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"bad.xml"</expr></argument>)</argument_list></call> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></catch></try>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
            <argument><expr>"Did not see build exception"</expr></argument>,
            <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSymlinkedImports</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>ln</name> =<init> <expr>"/usr/bin/ln"</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!new <call><name>File</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ln</name> = "/bin/ln"</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!new <call><name>File</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Running on Windows or something, so skip it.</comment>
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>symlink</name> =<init> <expr>"src/etc/testcases/taskdefs/import/symlinks/d3b"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>symlinkFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>symlink</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>exec</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name></expr></argument></argument_list></call></expr></condition><then> <block>{<expr_stmt><expr><name>ln</name></expr>, <expr>"-s"</expr>, <expr>"d3a"</expr>, <expr><call><name><name>symlinkFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></expr_stmt>}</block></then></if>)</block>.waitFor<parameter_list>()</parameter_list> != 0</function>)</block> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"'" + <name>ln</name> + " -s d3a " + <name>symlink</name> + "' failed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></class>
        <try>try <block>{
            <expr_stmt><expr><call><name>configureProject</name><argument_list>(
                <argument><expr>"src/etc/testcases/taskdefs/import/symlinks/d1/p1.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(
                <argument><expr>"ant.file.p2"</expr></argument>,
                <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/import/symlinks/d2/p2.xml"</expr></argument>)</argument_list></call>
                .<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(
                <argument><expr>"ant.file.p3"</expr></argument>,
                <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/import/symlinks/d3b/p3.xml"</expr></argument>)</argument_list></call>
                .<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>symlinkFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }

    public <function><type><name>void</name></type> <name>testTargetFirst</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/import/importtargetfirst.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"Importing targetfirstAfter target firstAfter importing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTargetName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/import/c.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}
</unit>
