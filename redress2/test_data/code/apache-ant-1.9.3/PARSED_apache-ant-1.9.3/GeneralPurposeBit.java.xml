<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\zip\GeneralPurposeBit.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<comment type="javadoc">/**
 * Parser/encoder for the "general purpose bit" field in ZIP's local
 * file and central directory headers.
 *
 * @since Ant 1.9.0
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>GeneralPurposeBit</name> <block>{
    <comment type="javadoc">/**
     * Indicates that the file is encrypted.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ENCRYPTION_FLAG</name> =<init> <expr>1 &lt;&lt; 0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Indicates that a data descriptor stored after the file contents
     * will hold CRC and size information.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DATA_DESCRIPTOR_FLAG</name> =<init> <expr>1 &lt;&lt; 3</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Indicates strong encryption.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STRONG_ENCRYPTION_FLAG</name> =<init> <expr>1 &lt;&lt; 6</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Indicates that filenames are written in utf-8.
     *
     * &lt;p&gt;The only reason this is public is that {@link
     * ZipOutputStream#EFS_FLAG} was public in several versions of
     * Apache Ant and we needed a substitute for it.&lt;/p&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UFT8_NAMES_FLAG</name> =<init> <expr>1 &lt;&lt; 11</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>languageEncodingFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>dataDescriptorFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>encryptionFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>strongEncryptionFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>GeneralPurposeBit</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * whether the current entry uses UTF8 for file name and comment.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>usesUTF8ForNames</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>languageEncodingFlag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * whether the current entry will use UTF8 for file name and comment.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>useUTF8ForNames</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>languageEncodingFlag</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * whether the current entry uses the data descriptor to store CRC
     * and size information
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>usesDataDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>dataDescriptorFlag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * whether the current entry will use the data descriptor to store
     * CRC and size information
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>useDataDescriptor</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>dataDescriptorFlag</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * whether the current entry is encrypted
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>usesEncryption</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>encryptionFlag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * whether the current entry will be encrypted
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>useEncryption</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>encryptionFlag</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * whether the current entry is encrypted using strong encryption
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>usesStrongEncryption</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>encryptionFlag</name> &amp;&amp; <name>strongEncryptionFlag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * whether the current entry will be encrypted  using strong encryption
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>useStrongEncryption</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>strongEncryptionFlag</name> = <name>b</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>useEncryption</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes the set bits in a form suitable for ZIP archives.
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>encode</name><parameter_list>()</parameter_list> <block>{
        <return>return 
            <expr><call><name><name>ZipShort</name>.<name>getBytes</name></name><argument_list>(<argument><expr>(<name>dataDescriptorFlag</name> ? <name>DATA_DESCRIPTOR_FLAG</name> : 0)
                              |
                              (<name>languageEncodingFlag</name> ? <name>UFT8_NAMES_FLAG</name> : 0)
                              |
                              (<name>encryptionFlag</name> ? <name>ENCRYPTION_FLAG</name> : 0)
                              |
                              (<name>strongEncryptionFlag</name> ? <name>STRONG_ENCRYPTION_FLAG</name> : 0)</expr></argument>
                              )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Parses the supported flags from the given archive data.
     * @param data local file header or a central directory entry.
     * @param offset offset at which the general purpose bit starts
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>GeneralPurposeBit</name></type> <name>parse</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>generalPurposeFlag</name> =<init> <expr><call><name><name>ZipShort</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GeneralPurposeBit</name></type> <name>b</name> =<init> <expr>new <call><name>GeneralPurposeBit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>b</name>.<name>useDataDescriptor</name></name><argument_list>(<argument><expr>(<name>generalPurposeFlag</name> &amp; <name>DATA_DESCRIPTOR_FLAG</name>) != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>b</name>.<name>useUTF8ForNames</name></name><argument_list>(<argument><expr>(<name>generalPurposeFlag</name> &amp; <name>UFT8_NAMES_FLAG</name>) != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>b</name>.<name>useStrongEncryption</name></name><argument_list>(<argument><expr>(<name>generalPurposeFlag</name> &amp; <name>STRONG_ENCRYPTION_FLAG</name>)
                              != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>b</name>.<name>useEncryption</name></name><argument_list>(<argument><expr>(<name>generalPurposeFlag</name> &amp; <name>ENCRYPTION_FLAG</name>) != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>3 * (7 * (13 * (17 * (<name>encryptionFlag</name> ? 1 : 0)
                               + (<name>strongEncryptionFlag</name> ? 1 : 0))
                         + (<name>languageEncodingFlag</name> ? 1 : 0))
                    + (<name>dataDescriptorFlag</name> ? 1 : 0))</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!(<name>o</name> <name>instanceof</name> <name>GeneralPurposeBit</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>GeneralPurposeBit</name></type> <name>g</name> =<init> <expr>(<name>GeneralPurposeBit</name>) <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>g</name>.<name>encryptionFlag</name></name> == <name>encryptionFlag</name>
            &amp;&amp; <name><name>g</name>.<name>strongEncryptionFlag</name></name> == <name>strongEncryptionFlag</name>
            &amp;&amp; <name><name>g</name>.<name>languageEncodingFlag</name></name> == <name>languageEncodingFlag</name>
            &amp;&amp; <name><name>g</name>.<name>dataDescriptorFlag</name></name> == <name>dataDescriptorFlag</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
