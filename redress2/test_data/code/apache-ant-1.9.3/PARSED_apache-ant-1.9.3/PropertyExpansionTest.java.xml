<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\PropertyExpansionTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>


<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<comment type="javadoc">/**
 * class to look at how we expand properties
 */</comment>
<class><specifier>public</specifier> class <name>PropertyExpansionTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{


    <constructor><specifier>public</specifier> <name>PropertyExpansionTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * we bind to an existing test file because we are too lazy to write our
     * own, and we don't really care what it is
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/core/immutable.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * run through the test cases of expansion
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPropertyExpansion</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>""</expr></argument>,<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$"</expr></argument>,<argument><expr>"$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$$-"</expr></argument>,<argument><expr>"$-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$$"</expr></argument>,<argument><expr>"$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"expanded"</expr></argument>,<argument><expr>"EXPANDED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"a${expanded}b"</expr></argument>,<argument><expr>"aEXPANDEDb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"${expanded}${expanded}"</expr></argument>,<argument><expr>"EXPANDEDEXPANDED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$$$"</expr></argument>,<argument><expr>"$$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$$$$-"</expr></argument>,<argument><expr>"$$-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>""</expr></argument>,<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"Class$$subclass"</expr></argument>,<argument><expr>"Class$subclass"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * new things we want
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDollarPassthru</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$-"</expr></argument>,<argument><expr>"$-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"Class$subclass"</expr></argument>,<argument><expr>"Class$subclass"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$$$-"</expr></argument>,<argument><expr>"$$-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$$$$$"</expr></argument>,<argument><expr>"$$$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"${unassigned.property}"</expr></argument>,<argument><expr>"${unassigned.property}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"a$b"</expr></argument>,<argument><expr>"a$b"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$}}"</expr></argument>,<argument><expr>"$}}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * old things we dont want; not a test no more
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>oldtestQuirkyLegacyBehavior</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"Class$subclass"</expr></argument>,<argument><expr>"Classsubclass"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$$$-"</expr></argument>,<argument><expr>"$-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"a$b"</expr></argument>,<argument><expr>"ab"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpandsTo</name><argument_list>(<argument><expr>"$}}"</expr></argument>,<argument><expr>"}}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * little helper method to validate stuff
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertExpandsTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>,<param><decl><type><name>String</name></type> <name>expected</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>actual</name>=<init><expr><call><name><name>project</name>.<name>replaceProperties</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>source</name></expr></argument>,<argument><expr><name>expected</name></expr></argument>,<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

<comment type="line">//end class</comment>
}</block></class>
</unit>
