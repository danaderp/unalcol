<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\launcher\CommandLauncher.java"><package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>launcher</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name>.<name>ANT_SHELL_LAUNCHER_REF_ID</name></name>;</import>
<import>import static <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name>.<name>ANT_VM_LAUNCHER_REF_ID</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * A command launcher for a particular JVM/OS platform. This class is
 * a general purpose command launcher which can only launch commands
 * in the current working directory.
 */</comment>
<class><specifier>public</specifier> class <name>CommandLauncher</name> <block>{

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>CommandLauncher</name></type> <name>vmLauncher</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>CommandLauncher</name></type> <name>shellLauncher</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    static <block>{
        <if>if<condition>(<expr>!<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"os/2"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>vmLauncher</name> = new <call><name>Java13CommandLauncher</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"mac"</expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"unix"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Mac</comment>
            <expr_stmt><expr><name>shellLauncher</name> = new <call><name>MacCommandLauncher</name><argument_list>(<argument><expr>new <call><name>CommandLauncher</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"os/2"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// OS/2</comment>
            <expr_stmt><expr><name>shellLauncher</name> = new <call><name>OS2CommandLauncher</name><argument_list>(<argument><expr>new <call><name>CommandLauncher</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"windows"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>CommandLauncher</name></type> <name>baseLauncher</name> =<init> <expr>new <call><name>CommandLauncher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr>!<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"win9x"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// Windows XP/2000/NT</comment>
                <expr_stmt><expr><name>shellLauncher</name> = new <call><name>WinNTCommandLauncher</name><argument_list>(<argument><expr><name>baseLauncher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// Windows 98/95 - need to use an auxiliary script</comment>
                <expr_stmt><expr><name>shellLauncher</name> =
                    new <call><name>ScriptCommandLauncher</name><argument_list>(<argument><expr>"bin/antRun.bat"</expr></argument>, <argument><expr><name>baseLauncher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>CommandLauncher</name></type> <name>baseLauncher</name> =<init> <expr>new <call><name>CommandLauncher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>shellLauncher</name> =
                new <call><name>PerlScriptCommandLauncher</name><argument_list>(<argument><expr>"bin/antRun.pl"</expr></argument>, <argument><expr><name>baseLauncher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"openvms"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// OpenVMS</comment>
            <expr_stmt><expr><name>shellLauncher</name> = new <call><name>VmsCommandLauncher</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// Generic</comment>
            <expr_stmt><expr><name>shellLauncher</name> = new <call><name>ScriptCommandLauncher</name><argument_list>(<argument><expr>"bin/antRun"</expr></argument>,
                <argument><expr>new <call><name>CommandLauncher</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if></else></if>
    }</block>

    <comment type="javadoc">/**
     * Launches the given command in a new process.
     * 
     * @param project
     *        The project that the command is part of.
     * @param cmd
     *        The command to execute.
     * @param env
     *        The environment for the new process. If null, the
     *        environment of the current process is used.
     * @return the created Process.
     * @throws IOException
     *         if attempting to run a command in a specific directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>Process</name></type> <name>exec</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>cmd</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>env</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if<condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"Execute:CommandLauncher: "
                + <call><name><name>Commandline</name>.<name>describeCommand</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Launches the given command in a new process, in the given
     * working directory.
     * 
     * @param project
     *        The project that the command is part of.
     * @param cmd
     *        The command to execute.
     * @param env
     *        The environment for the new process. If null, the
     *        environment of the current process is used.
     * @param workingDir
     *        The directory to start the command in. If null, the
     *        current directory is used.
     * @return the created Process.
     * @throws IOException
     *         if trying to change directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>Process</name></type> <name>exec</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>cmd</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>env</name></decl></param>,
                        <param><decl><type><name>File</name></type> <name>workingDir</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>workingDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Cannot execute a process in different "
            + "directory under this JVM"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains the shell launcher configured for the given project or
     * the default shell launcher.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CommandLauncher</name></type> <name>getShellLauncher</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CommandLauncher</name></type> <name>launcher</name> =<init> <expr><call><name>extractLauncher</name><argument_list>(<argument><expr><name>ANT_SHELL_LAUNCHER_REF_ID</name></expr></argument>,
                                                   <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>launcher</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>launcher</name> = <name>shellLauncher</name></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>launcher</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains the VM launcher configured for the given project or
     * the default VM launcher.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CommandLauncher</name></type> <name>getVMLauncher</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CommandLauncher</name></type> <name>launcher</name> =<init> <expr><call><name>extractLauncher</name><argument_list>(<argument><expr><name>ANT_VM_LAUNCHER_REF_ID</name></expr></argument>,
                                                   <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>launcher</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>launcher</name> = <name>vmLauncher</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>launcher</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>CommandLauncher</name></type> <name>extractLauncher</name><parameter_list>(<param><decl><type><name>String</name></type> <name>referenceName</name></decl></param>,
                                                   <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CommandLauncher</name></type> <name>launcher</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>launcher</name> = (<name>CommandLauncher</name>) <call><name><name>project</name>.<name>getReference</name></name><argument_list>(<argument><expr><name>referenceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>launcher</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>launcher</name> = <call><name>getSystemLauncher</name><argument_list>(<argument><expr><name>referenceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>launcher</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>CommandLauncher</name></type> <name>getSystemLauncher</name><parameter_list>(<param><decl><type><name>String</name></type> <name>launcherRefId</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CommandLauncher</name></type> <name>launcher</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>launcherClass</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>launcherRefId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>launcherClass</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>launcher</name> = (<name>CommandLauncher</name>) <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>launcherClass</name></expr></argument>)</argument_list></call>
                    .<call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch(<param><decl><type><name>InstantiationException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Could not instantiate launcher class "
                                   + <name>launcherClass</name> + ": " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
            <catch>catch(<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Could not instantiate launcher class "
                                   + <name>launcherClass</name> + ": " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
            <catch>catch(<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Could not instantiate launcher class "
                                   + <name>launcherClass</name> + ": " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>

        <return>return <expr><name>launcher</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the VM launcher to use for the given project.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setVMLauncher</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>,
                                     <param><decl><type><name>CommandLauncher</name></type> <name>launcher</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr><name>ANT_VM_LAUNCHER_REF_ID</name></expr></argument>, <argument><expr><name>launcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the shell launcher to use for the given project.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setShellLauncher</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>,
                                        <param><decl><type><name>CommandLauncher</name></type> <name>launcher</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr><name>ANT_SHELL_LAUNCHER_REF_ID</name></expr></argument>, <argument><expr><name>launcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
