<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\StringUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>StringWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * A set of helper methods related to string manipulation.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>StringUtils</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>KILOBYTE</name> =<init> <expr>1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MEGABYTE</name> =<init> <expr><name>KILOBYTE</name> * 1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>GIGABYTE</name> =<init> <expr><name>MEGABYTE</name> * 1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>TERABYTE</name> =<init> <expr><name>GIGABYTE</name> * 1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>PETABYTE</name> =<init> <expr><name>TERABYTE</name> * 1024</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * constructor to stop anyone instantiating the class
     */</comment>
    <constructor><specifier>private</specifier> <name>StringUtils</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/** the line separator for this OS */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LINE_SEP</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Splits up a string into a list of lines. It is equivalent
     * to &lt;tt&gt;split(data, '\n')&lt;/tt&gt;.
     * @param data the string to split up into lines.
     * @return the list of lines available in the string.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lineSplit</name><parameter_list>(<param><decl><type><name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>split</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Splits up a string where elements are separated by a specific
     * character and return all elements.
     * @param data the string to split up.
     * @param ch the separator character.
     * @return the list of elements.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>split</name><parameter_list>(<param><decl><type><name>String</name></type> <name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>elems</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>(<name>pos</name> = <call><name><name>data</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>) != -1</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>elem</name> =<init> <expr><call><name><name>data</name>.<name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>elems</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> = <name>pos</name> + 1</expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>elems</name>.<name>addElement</name></name><argument_list>(<argument><expr><call><name><name>data</name>.<name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>elems</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Replace occurrences into a string.
     * @param data the string to replace occurrences into
     * @param from the occurrence to replace.
     * @param to the occurrence to be used as a replacement.
     * @return the new string with replaced occurrences.
     * @deprecated Use {@link String#replace(CharSequence, CharSequence)} now.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>replace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>data</name></decl></param>, <param><decl><type><name>String</name></type> <name>from</name></decl></param>, <param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>data</name>.<name>replace</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenient method to retrieve the full stacktrace from a given exception.
     * @param t the exception to get the stacktrace from.
     * @return the stacktrace from the given exception.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getStackTrace</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>pw</name> =<init> <expr>new <call><name>PrintWriter</name><argument_list>(<argument><expr><name>sw</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pw</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pw</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks that a string buffer ends up with a given string. It may sound
     * trivial with the existing
     * JDK API but the various implementation among JDKs can make those
     * methods extremely resource intensive
     * and perform poorly due to massive memory allocation and copying. See
     * @param buffer the buffer to perform the check on
     * @param suffix the suffix
     * @return  &lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
     *          argument is a suffix of the character sequence represented by
     *          the StringBuffer object; &lt;code&gt;false&lt;/code&gt; otherwise. Note that the
     *          result will be &lt;code&gt;true&lt;/code&gt; if the argument is the
     *          empty string.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>endsWith</name><parameter_list>(<param><decl><type><name>StringBuffer</name></type> <name>buffer</name></decl></param>, <param><decl><type><name>String</name></type> <name>suffix</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>suffix</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>buffer</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">// this loop is done on purpose to avoid memory allocation performance</comment>
        <comment type="line">// problems on various JDKs</comment>
        <comment type="line">// StringBuffer.lastIndexOf() was introduced in jdk 1.4 and</comment>
        <comment type="line">// implementation is ok though does allocation/copying</comment>
        <comment type="line">// StringBuffer.toString().endsWith() does massive memory</comment>
        <comment type="line">// allocation/copying on JDK 1.5</comment>
        <comment type="line">// See http://issues.apache.org/bugzilla/show_bug.cgi?id=37169</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> =<init> <expr><call><name><name>suffix</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bufferIndex</name> =<init> <expr><call><name><name>buffer</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>endIndex</name> &gt;= 0</expr>)</condition> <block>{
            <if>if <condition>(<expr><call><name><name>buffer</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>bufferIndex</name></expr></argument>)</argument_list></call> != <call><name><name>suffix</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>bufferIndex</name>--</expr>;</expr_stmt>
            <expr_stmt><expr><name>endIndex</name>--</expr>;</expr_stmt>
        }</block></while>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * xml does not do "c" like interpretation of strings.
     * i.e. \n\r\t etc.
     * this method processes \n, \r, \t, \f, \\
     * also subs \s -&gt; " \n\r\t\f"
     * a trailing '\' will be ignored
     *
     * @param input raw string with possible embedded '\'s
     * @return converted string
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>resolveBackSlash</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>b</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>backSlashSeen</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>input</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>input</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>backSlashSeen</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>c</name> == '\\'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>backSlashSeen</name> = true</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
                    <case>case <expr>'\\'</expr>:
                        <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>) '\\'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr>'n'</expr>:
                        <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>) '\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr>'r'</expr>:
                        <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>) '\r'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr>'t'</expr>:
                        <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>) '\t'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr>'f'</expr>:
                        <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>) '\f'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr>'s'</expr>:
                        <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>" \t\n\r\f"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><default>default:
                        <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </default>}</block></switch>
                <expr_stmt><expr><name>backSlashSeen</name> = false</expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><call><name><name>b</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Takes a human readable size representation eg 10K
     * a long value. Doesn't support 1.1K or other rational values.
     * @param humanSize the amount as a human readable string.
     * @return a long value representation
     * @throws Exception if there is a problem.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>parseHumanSizes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>humanSize</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>factor</name> =<init> <expr>1L</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>s</name> =<init> <expr><call><name><name>humanSize</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>s</name></expr>)</condition> <block>{
            <case>case <expr>'+'</expr>:
                <expr_stmt><expr><name>humanSize</name> = <call><name><name>humanSize</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'-'</expr>:
                <expr_stmt><expr><name>factor</name> = -1L</expr>;</expr_stmt>
                <expr_stmt><expr><name>humanSize</name> = <call><name><name>humanSize</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <break>break;</break>
        </default>}</block></switch>
        <comment type="line">//last character isn't a digit</comment>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>humanSize</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>humanSize</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>Character</name>.<name>isDigit</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>trim</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
                <case>case <expr>'K'</expr>:
                    <expr_stmt><expr><name>factor</name> *= <name>KILOBYTE</name></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr>'M'</expr>:
                    <expr_stmt><expr><name>factor</name> *= <name>MEGABYTE</name></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr>'G'</expr>:
                    <expr_stmt><expr><name>factor</name> *= <name>GIGABYTE</name></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr>'T'</expr>:
                    <expr_stmt><expr><name>factor</name> *= <name>TERABYTE</name></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr>'P'</expr>:
                    <expr_stmt><expr><name>factor</name> *= <name>PETABYTE</name></expr>;</expr_stmt>
                    <break>break;</break>
                </case><default>default:
                    <expr_stmt><expr><name>trim</name> = 0</expr>;</expr_stmt>
            </default>}</block></switch>
            <expr_stmt><expr><name>humanSize</name> = <call><name><name>humanSize</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>humanSize</name>.<name>length</name></name><argument_list>()</argument_list></call> - <name>trim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <try>try <block>{
            <return>return <expr><name>factor</name> * <call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><name>humanSize</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to parse \"" + <name>humanSize</name> + "\""</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Removes the suffix from a given string, if the string contains
     * that suffix.
     * @param string String for check
     * @param suffix Suffix to remove
     * @return the &lt;i&gt;string&lt;/i&gt; with the &lt;i&gt;suffix&lt;/i&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>removeSuffix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>, <param><decl><type><name>String</name></type> <name>suffix</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>string</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>string</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>string</name>.<name>length</name></name><argument_list>()</argument_list></call> - <call><name><name>suffix</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>string</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Removes the prefix from a given string, if the string contains
     * that prefix.
     * @param string String for check
     * @param prefix Prefix to remove
     * @return the &lt;i&gt;string&lt;/i&gt; with the &lt;i&gt;prefix&lt;/i&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>removePrefix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>, <param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>string</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>string</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>prefix</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>string</name></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
