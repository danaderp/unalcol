<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\optional\ScriptMapper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>

<comment type="javadoc">/**
 * Script support at map time.
 * @since Ant1.7
 */</comment>
<class><specifier>public</specifier> class <name>ScriptMapper</name> <super><extends>extends <name>AbstractScriptComponent</name></extends> <implements>implements <name>FileNameMapper</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>files</name></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Sets the from part of the transformation rule.
     *
     * @param from a string.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>from</name></decl></param>)</parameter_list> <block>{

    }</block></function>

    <comment type="javadoc">/**
     * Sets the to part of the transformation rule.
     *
     * @param to a string.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{

    }</block></function>

    <comment type="javadoc">/**
     * Reset the list of files
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>files</name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a mapped name
     * @param mapping the value to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMappedName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>mapping</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>files</name>.<name>add</name></name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an array containing the target filename(s) for the given source
     * file.
     * &lt;p/&gt;
     * &lt;p&gt;if the given rule doesn't apply to the source file, implementation
     * must return null. SourceFileScanner will then omit the source file in
     * question.&lt;/p&gt;
     *
     * @param sourceFileName the name of the source file relative to some given
     *                       basedirectory.
     * @return an array of strings if the rule applies to the source file, or
     *         null if it does not.
     */</comment>

    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>mapFileName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sourceFileName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>initScriptRunner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getRunner</name><argument_list>()</argument_list></call>.<call><name>addBean</name><argument_list>(<argument><expr>"source"</expr></argument>, <argument><expr><name>sourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeScript</name><argument_list>(<argument><expr>"ant_mapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>files</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
