<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\zip\ZipEightByteInteger.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>java</name>.<name>math</name>.<name>BigInteger</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipConstants</name>.<name>BYTE_MASK</name></name>;</import>

<comment type="javadoc">/**
 * Utility class that represents an eight byte integer with conversion
 * rules for the big endian byte order of ZIP files.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ZipEightByteInteger</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_1</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_1_MASK</name> =<init> <expr>0xFF00</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_1_SHIFT</name> =<init> <expr>8</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_2</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_2_MASK</name> =<init> <expr>0xFF0000</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_2_SHIFT</name> =<init> <expr>16</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_3</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>BYTE_3_MASK</name> =<init> <expr>0xFF000000L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_3_SHIFT</name> =<init> <expr>24</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_4</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>BYTE_4_MASK</name> =<init> <expr>0xFF00000000L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_4_SHIFT</name> =<init> <expr>32</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_5</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>BYTE_5_MASK</name> =<init> <expr>0xFF0000000000L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_5_SHIFT</name> =<init> <expr>40</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_6</name> =<init> <expr>6</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>BYTE_6_MASK</name> =<init> <expr>0xFF000000000000L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_6_SHIFT</name> =<init> <expr>48</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_7</name> =<init> <expr>7</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>BYTE_7_MASK</name> =<init> <expr>0x7F00000000000000L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_7_SHIFT</name> =<init> <expr>56</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LEFTMOST_BIT_SHIFT</name> =<init> <expr>63</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>LEFTMOST_BIT</name> =<init> <expr>(<name>byte</name>) 0x80</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BigInteger</name></type> <name>value</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ZipEightByteInteger</name></type> <name>ZERO</name> =<init> <expr>new <call><name>ZipEightByteInteger</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create instance from a number.
     * @param value the long to store as a ZipEightByteInteger
     */</comment>
    <constructor><specifier>public</specifier> <name>ZipEightByteInteger</name><parameter_list>(<param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>BigInteger</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create instance from a number.
     * @param value the BigInteger to store as a ZipEightByteInteger
     */</comment>
    <constructor><specifier>public</specifier> <name>ZipEightByteInteger</name><parameter_list>(<param><decl><type><name>BigInteger</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create instance from bytes.
     * @param bytes the bytes to store as a ZipEightByteInteger
     */</comment>
    <constructor><specifier>public</specifier> <name>ZipEightByteInteger</name> <parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create instance from the eight bytes starting at offset.
     * @param bytes the bytes to store as a ZipEightByteInteger
     * @param offset the offset to start
     */</comment>
    <constructor><specifier>public</specifier> <name>ZipEightByteInteger</name> <parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>value</name> = <call><name><name>ZipEightByteInteger</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get value as eight bytes in big endian byte order.
     * @return value as eight bytes in big endian order
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getBytes</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>ZipEightByteInteger</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get value as Java long.
     * @return value as a long
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLongValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>value</name>.<name>longValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get value as Java long.
     * @return value as a long
     */</comment>
    <function><type><specifier>public</specifier> <name>BigInteger</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get value as eight bytes in big endian byte order.
     * @param value the value to convert
     * @return value as eight bytes in big endian byte order
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>getBytes</name><parameter_list>(<param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getBytes</name><argument_list>(<argument><expr><call><name><name>BigInteger</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get value as eight bytes in big endian byte order.
     * @param value the value to convert
     * @return value as eight bytes in big endian byte order
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>getBytes</name><parameter_list>(<param><decl><type><name>BigInteger</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>byte</name><index>[<expr>8</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>val</name> =<init> <expr><call><name><name>value</name>.<name>longValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>val</name> &amp; <name>BYTE_MASK</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>BYTE_1</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>val</name> &amp; <name>BYTE_1_MASK</name>) &gt;&gt; <name>BYTE_1_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>BYTE_2</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>val</name> &amp; <name>BYTE_2_MASK</name>) &gt;&gt; <name>BYTE_2_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>BYTE_3</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>val</name> &amp; <name>BYTE_3_MASK</name>) &gt;&gt; <name>BYTE_3_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>BYTE_4</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>val</name> &amp; <name>BYTE_4_MASK</name>) &gt;&gt; <name>BYTE_4_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>BYTE_5</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>val</name> &amp; <name>BYTE_5_MASK</name>) &gt;&gt; <name>BYTE_5_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>BYTE_6</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>val</name> &amp; <name>BYTE_6_MASK</name>) &gt;&gt; <name>BYTE_6_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>BYTE_7</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>val</name> &amp; <name>BYTE_7_MASK</name>) &gt;&gt; <name>BYTE_7_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>value</name>.<name>testBit</name></name><argument_list>(<argument><expr><name>LEFTMOST_BIT_SHIFT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>BYTE_7</name></expr>]</index></name> |= <name>LEFTMOST_BIT</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to get the value as a Java long from eight bytes
     * starting at given array offset
     * @param bytes the array of bytes
     * @param offset the offset to start
     * @return the corresponding Java long value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getLongValue</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call>.<call><name>longValue</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to get the value as a Java BigInteger from eight
     * bytes starting at given array offset
     * @param bytes the array of bytes
     * @param offset the offset to start
     * @return the corresponding Java BigInteger value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BigInteger</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>value</name> =<init> <expr>((<name>long</name>) <name><name>bytes</name><index>[<expr><name>offset</name> + <name>BYTE_7</name></expr>]</index></name> &lt;&lt; <name>BYTE_7_SHIFT</name>) &amp; <name>BYTE_7_MASK</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>value</name> += ((<name>long</name>) <name><name>bytes</name><index>[<expr><name>offset</name> + <name>BYTE_6</name></expr>]</index></name> &lt;&lt; <name>BYTE_6_SHIFT</name>) &amp; <name>BYTE_6_MASK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> += ((<name>long</name>) <name><name>bytes</name><index>[<expr><name>offset</name> + <name>BYTE_5</name></expr>]</index></name> &lt;&lt; <name>BYTE_5_SHIFT</name>) &amp; <name>BYTE_5_MASK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> += ((<name>long</name>) <name><name>bytes</name><index>[<expr><name>offset</name> + <name>BYTE_4</name></expr>]</index></name> &lt;&lt; <name>BYTE_4_SHIFT</name>) &amp; <name>BYTE_4_MASK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> += ((<name>long</name>) <name><name>bytes</name><index>[<expr><name>offset</name> + <name>BYTE_3</name></expr>]</index></name> &lt;&lt; <name>BYTE_3_SHIFT</name>) &amp; <name>BYTE_3_MASK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> += ((<name>long</name>) <name><name>bytes</name><index>[<expr><name>offset</name> + <name>BYTE_2</name></expr>]</index></name> &lt;&lt; <name>BYTE_2_SHIFT</name>) &amp; <name>BYTE_2_MASK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> += ((<name>long</name>) <name><name>bytes</name><index>[<expr><name>offset</name> + <name>BYTE_1</name></expr>]</index></name> &lt;&lt; <name>BYTE_1_SHIFT</name>) &amp; <name>BYTE_1_MASK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> += ((<name>long</name>) <name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name> &amp; <name>BYTE_MASK</name>)</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>val</name> =<init> <expr><call><name><name>BigInteger</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name><name>bytes</name><index>[<expr><name>offset</name> + <name>BYTE_7</name></expr>]</index></name> &amp; <name>LEFTMOST_BIT</name>) == <name>LEFTMOST_BIT</name>
            ? <call><name><name>val</name>.<name>setBit</name></name><argument_list>(<argument><expr><name>LEFTMOST_BIT_SHIFT</name></expr></argument>)</argument_list></call> : <name>val</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to get the value as a Java long from an eight-byte array
     * @param bytes the array of bytes
     * @return the corresponding Java long value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getLongValue</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getLongValue</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to get the value as a Java long from an eight-byte array
     * @param bytes the array of bytes
     * @return the corresponding Java BigInteger value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BigInteger</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Override to make two instances with same value equal.
     * @param o an object to compare
     * @return true if the objects are equal
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>o</name> == <name>null</name> || !(<name>o</name> <name>instanceof</name> <name>ZipEightByteInteger</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>value</name>.<name>equals</name></name><argument_list>(<argument><expr>((<name>ZipEightByteInteger</name>) <name>o</name>).<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Override to make two instances with same value equal.
     * @return the hashCode of the value stored in the ZipEightByteInteger
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>value</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"ZipEightByteInteger value: " + <name>value</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
