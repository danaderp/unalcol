<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\javah\JavahAdapterFactory.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>javah</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>

<comment type="javadoc">/**
 * Creates the JavahAdapter based on the user choice and
 * potentially the VM vendor.
 *
 * @since Ant 1.6.3
 */</comment>
<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF (bc)</comment>
<class><specifier>public</specifier> class <name>JavahAdapterFactory</name> <block>{

    <comment type="javadoc">/**
     * Determines the default choice of adapter based on the VM
     * vendor.
     *
     * @return the default choice of adapter based on the VM
     * vendor
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>JavaEnvUtils</name>.<name>isKaffe</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Kaffeh</name>.<name>IMPLEMENTATION_NAME</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>JavaEnvUtils</name>.<name>isGij</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Gcjh</name>.<name>IMPLEMENTATION_NAME</name></name></expr>;</return>
        }</block></then></if></else></if>
        <return>return <expr><name><name>SunJavah</name>.<name>IMPLEMENTATION_NAME</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the JavahAdapter based on the user choice and
     * potentially the VM vendor.
     *
     * @param choice the user choice (if any).
     * @param log a ProjectComponent instance used to access Ant's
     * logging system.
     * @return The adapter to use.
     * @throws BuildException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>JavahAdapter</name></type> <name>getAdapter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>choice</name></decl></param>,
                                          <param><decl><type><name>ProjectComponent</name></type> <name>log</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>getAdapter</name><argument_list>(<argument><expr><name>choice</name></expr></argument>, <argument><expr><name>log</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the JavahAdapter based on the user choice and
     * potentially the VM vendor.
     *
     * @param choice the user choice (if any).
     * @param log a ProjectComponent instance used to access Ant's
     * logging system.
     * @param classpath the classpath to use when looking up an
     * adapter class
     * @return The adapter to use.
     * @throws BuildException if there is an error.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>JavahAdapter</name></type> <name>getAdapter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>choice</name></decl></param>,
                                          <param><decl><type><name>ProjectComponent</name></type> <name>log</name></decl></param>,
                                          <param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>(<call><name><name>JavaEnvUtils</name>.<name>isKaffe</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>choice</name> == <name>null</name>)
            || <call><name><name>Kaffeh</name>.<name>IMPLEMENTATION_NAME</name>.<name>equals</name></name><argument_list>(<argument><expr><name>choice</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Kaffeh</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr>(<call><name><name>JavaEnvUtils</name>.<name>isGij</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>choice</name> == <name>null</name>)
            || <call><name><name>Gcjh</name>.<name>IMPLEMENTATION_NAME</name>.<name>equals</name></name><argument_list>(<argument><expr><name>choice</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Gcjh</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>SunJavah</name>.<name>IMPLEMENTATION_NAME</name>.<name>equals</name></name><argument_list>(<argument><expr><name>choice</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>SunJavah</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>choice</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>resolveClassName</name><argument_list>(<argument><expr><name>choice</name></expr></argument>,
                                    <comment type="line">// Memory leak in line below</comment>
                                    <argument><expr><call><name><name>log</name>.<name>getProject</name></name><argument_list>()</argument_list></call>
                                    .<call><name>createClassLoader</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></else></if></else></if></else></if>

        <comment type="line">// This default has been good enough until Ant 1.6.3, so stick</comment>
        <comment type="line">// with it</comment>
        <return>return <expr>new <call><name>SunJavah</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tries to resolve the given classname into a javah adapter.
     * Throws a fit if it can't.
     *
     * @param className The fully qualified classname to be created.
     * @param loader the classloader to use
     * @throws BuildException This is the fit that is thrown if className
     * isn't an instance of JavahAdapter.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>JavahAdapter</name></type> <name>resolveClassName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>,
                                                 <param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr>(<name>JavahAdapter</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>,
                <argument><expr><name>loader</name> != <name>null</name> ? <name>loader</name> :
                <name><name>JavahAdapterFactory</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>JavahAdapter</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
