<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\PropertyHelperTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * This task is designed to allow the user to install a different
 * PropertyHelper on the current Project. This task also allows the
 * installation of PropertyHelper delegates on either the newly installed
 * or existing PropertyHelper.
 * @since Ant 1.8
 */</comment>
<class><specifier>public</specifier> class <name>PropertyHelperTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <comment type="javadoc">/**
     * Nested delegate for refid usage.
     */</comment>
    <class><specifier>public</specifier> <specifier>final</specifier> class <name>DelegateElement</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>refid</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>DelegateElement</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>

        <comment type="javadoc">/**
         * Get the refid.
         * @return String
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getRefid</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>refid</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the refid.
         * @param refid the String to set
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>String</name></type> <name>refid</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>refid</name></name> = <name>refid</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name><name>PropertyHelper</name>.<name>Delegate</name></name></type> <name>resolve</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>refid</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"refid required for generic delegate"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr>(<name><name>PropertyHelper</name>.<name>Delegate</name></name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr><name>refid</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name>PropertyHelper</name></type> <name>propertyHelper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>delegates</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Add a new PropertyHelper to be set on the Project.
     * @param propertyHelper the PropertyHelper to set.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addConfigured</name><parameter_list>(<param><decl><type><name>PropertyHelper</name></type> <name>propertyHelper</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>propertyHelper</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one PropertyHelper can be installed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>propertyHelper</name></name> = <name>propertyHelper</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a PropertyHelper delegate to the existing or new PropertyHelper.
     * @param delegate the delegate to add.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addConfigured</name><parameter_list>(<param><decl><type><name><name>PropertyHelper</name>.<name>Delegate</name></name></type> <name>delegate</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getAddDelegateList</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>delegate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a nested &amp;lt;delegate refid="foo" /&amp;gt; element.
     * @return DelegateElement
     */</comment>
    <function><type><specifier>public</specifier> <name>DelegateElement</name></type> <name>createDelegate</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DelegateElement</name></type> <name>result</name> =<init> <expr>new <call><name>DelegateElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getAddDelegateList</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the task.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Project instance not set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>propertyHelper</name> == <name>null</name> &amp;&amp; <name>delegates</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Either a new PropertyHelper"
                    + " or one or more PropertyHelper delegates are required"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>PropertyHelper</name></type> <name>ph</name> =<init> <expr><name>propertyHelper</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ph</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ph</name> = <call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ph</name> = <name>propertyHelper</name></expr>;</expr_stmt>
        }</block></else></if>
        <synchronized>synchronized (<expr><name>ph</name></expr>) <block>{
            <if>if <condition>(<expr><name>delegates</name> != <name>null</name></expr>)</condition><then> <block>{
                <for>for (<init><decl><type><name>Iterator</name></type> <name>iter</name> =<init> <expr><call><name><name>delegates</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>PropertyHelper</name>.<name>Delegate</name></name></type> <name>delegate</name> =<init> <expr><name>o</name> <name>instanceof</name> <name>DelegateElement</name>
                            ? ((<name>DelegateElement</name>) <name>o</name>).<call><name>resolve</name><argument_list>()</argument_list></call> : (<name><name>PropertyHelper</name>.<name>Delegate</name></name>) <name>o</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Adding PropertyHelper delegate " + <name>delegate</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ph</name>.<name>add</name></name><argument_list>(<argument><expr><name>delegate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></synchronized>
        <if>if <condition>(<expr><name>propertyHelper</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Installing PropertyHelper " + <name>propertyHelper</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// TODO copy existing properties to new PH?</comment>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addReference</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>REFID_PROPERTY_HELPER</name></name></expr></argument>, <argument><expr><name>propertyHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>List</name></type> <name>getAddDelegateList</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>delegates</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>delegates</name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>delegates</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
