<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\DirectoryScannerTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>TokenizedPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>SymbolicLinkUtils</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TreeSet</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.ant.DirectoryScanner
 *
 */</comment>
<class><specifier>public</specifier> class <name>DirectoryScannerTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>DirectoryScannerTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></constructor>

    <comment type="line">// keep track of what operating systems are supported here.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>supportsSymlinks</name> =<init> <expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"unix"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/core/directoryscanner.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument> ,<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>""</expr>, <expr>"alpha"</expr>, <expr>"alpha/beta"</expr>,
                                   <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullPathMatchesCaseSensitive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/GAMMA.XML"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullPathMatchesCaseInsensitive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/GAMMA.XML"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2ButCaseInsensitive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"ALPHA/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAllowSymlinks</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"symlink-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testProhibitSymlinks</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"symlink-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// father and child pattern test</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrderOfIncludePatternsIrrelevant</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name> <index>[]</index></type> <name>expectedFiles</name> =<init> <expr><block>{<expr>"alpha/beta/beta.xml"</expr>,
                                   <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <index>[]</index></type> <name>expectedDirectories</name> =<init> <expr><block>{<expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/be?a/**"</expr>, <expr>"alpha/beta/gamma/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>expectedFiles</name></expr></argument>, <argument><expr><name>expectedDirectories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// redo the test, but the 2 include patterns are inverted</comment>
        <expr_stmt><expr><name>ds</name> = new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/"</expr>, <expr>"alpha/be?a/**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>expectedFiles</name></expr></argument>, <argument><expr><name>expectedDirectories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPatternsDifferInCaseScanningSensitive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>, <expr>"ALPHA/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPatternsDifferInCaseScanningInsensitive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>, <expr>"ALPHA/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullpathDiffersInCaseScanningSensitive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/gamma/gamma.xml"</expr>,
            <expr>"alpha/beta/gamma/GAMMA.XML"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullpathDiffersInCaseScanningInsensitive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/gamma/gamma.xml"</expr>,
            <expr>"alpha/beta/gamma/GAMMA.XML"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParentDiffersInCaseScanningSensitive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>, <expr>"ALPHA/beta/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParentDiffersInCaseScanningInsensitive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>, <expr>"ALPHA/beta/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test case for setFollowLinks() and associated functionality.
     * Only supports test on Linux at the moment because Java has
     * no real notion of symlinks built in, so an os-specfic call
     * to Runtime.exec() must be made to create a link to test against.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSetFollowLinks</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>linkFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/main/org/apache/tools/ThisIsALink"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"link exists pre-test? " + <call><name><name>linkFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <try>try <block>{
                <comment type="line">// add conditions and more commands as soon as the need arises</comment>
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>command</name> =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{
                    <expr>"ln"</expr>, <expr>"-s"</expr>, <expr>"ant"</expr>, <expr><call><name><name>linkFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>exec</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// give ourselves some time for the system call</comment>
                    <comment type="line">// to execute... tweak if you have a really over</comment>
                    <comment type="line">// loaded system.</comment>
                    <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"IOException making link "+<name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{
                }</block></catch></try>

                <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/main/org/apache/tools"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"link exists after exec? " + <call><name><name>linkFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Ant knows it is a link? " + <call><name><name>SymbolicLinkUtils</name>.<name>getSymbolicLinkUtils</name></name><argument_list>()</argument_list></call>.<call><name>isSymbolicLink</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr>"ThisIsALink"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// followLinks should be true by default, but if this ever</comment>
                <comment type="line">// changes we will need this line.</comment>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"ant/**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>boolean</name></type> <name>haveZipPackage</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>haveTaskdefsPackage</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>included</name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>included</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>included</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"zip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>haveZipPackage</name> = true</expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr><name><name>included</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"ThisIsALink"
                                                  + <name><name>File</name>.<name>separator</name></name>
                                                  + "taskdefs"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>haveTaskdefsPackage</name> = true</expr>;</expr_stmt>
                    }</block></then></if></else></if>
                }</block></for>

                <comment type="line">// if we followed the symlink we just made we should</comment>
                <comment type="line">// bypass the excludes.</comment>

                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"(1) zip package included"</expr></argument>, <argument><expr><name>haveZipPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"(1) taskdefs package included"</expr></argument>,
                           <argument><expr><name>haveTaskdefsPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <expr_stmt><expr><name>ds</name> = new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"ant/**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>haveZipPackage</name> = false</expr>;</expr_stmt>
                <expr_stmt><expr><name>haveTaskdefsPackage</name> = false</expr>;</expr_stmt>
                <expr_stmt><expr><name>included</name> = <call><name><name>ds</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>included</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>included</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"zip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>haveZipPackage</name> = true</expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr><name><name>included</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"ThisIsALink"
                                                  + <name><name>File</name>.<name>separator</name></name>
                                                  + "taskdefs"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>haveTaskdefsPackage</name> = true</expr>;</expr_stmt>
                    }</block></then></if></else></if>
                }</block></for>
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"(2) zip package included"</expr></argument>, <argument><expr><name>haveZipPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"(2) taskdefs package not included"</expr></argument>,
                           <argument><expr>!<name>haveTaskdefsPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"link exists pre-delete? " + <call><name><name>linkFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name><name>linkFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Failed to delete " + <name>linkFile</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"link exists post-delete? " + <call><name><name>linkFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExcludeOneFile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"**/*.xml"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/b*xml"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExcludeHasPrecedence</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAlternateIncludeExclude</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/**"</expr>,
            <expr>"alpha/beta/gamma/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAlternateExcludeInclude</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/**"</expr>,
            <expr>"alpha/beta/gamma/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Test inspired by Bug#1415.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testChildrenOfExcludedDirectory</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"children-of-excluded-dir-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"delta/delta.xml"</expr>}</block></expr></argument>,
                    <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>""</expr>, <expr>"delta"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ds</name> = new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>,
                                        <expr>"delta/delta.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>""</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>, <expr>"delta"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsExcludedDirectoryScanned</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>shareclassloader</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"tests.and.ant.share.classloader"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// when the test is started by the build.xml of ant</comment>
        <comment type="line">// if the property tests.and.ant.share.classloader is not set in the build.xml</comment>
        <comment type="line">// a sysproperty with name tests.and.ant.share.classloader and value</comment>
        <comment type="line">// ${tests.and.ant.share.classloader} will be set</comment>
        <comment type="line">// we are trying to catch this here.</comment>
        <if>if <condition>(<expr><name>shareclassloader</name> == <name>null</name>
                || (<name>shareclassloader</name> != <name>null</name> &amp;&amp; <call><name><name>shareclassloader</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"${"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"cannot execute testIsExcludedDirectoryScanned when tests are forked, " +
                    "package private method called"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"children-of-excluded-dir-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"**/gamma/**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Set</name></type> <name>set</name> =<init> <expr><call><name><name>ds</name>.<name>getScannedDirs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"empty set"</expr></argument>, <argument><expr><call><name><name>set</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr>"alpha/beta/gamma/".<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"scanned " + <name>s</name></expr></argument>, <argument><expr><call><name><name>set</name>.<name>contains</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAbsolute1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"extended-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tmpdir</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(
            <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + "/tmp"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>tmpdir</name> + "/**/*"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>tmpdir</name> + "/alpha/beta/beta.xml"</expr>,
                                       <expr><name>tmpdir</name> + "/alpha/beta/gamma/gamma.xml"</expr>,
                                       <expr><name>tmpdir</name> + "/delta/delta.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>tmpdir</name> + "/alpha"</expr>,
                                   <expr><name>tmpdir</name> + "/alpha/beta"</expr>,
                                   <expr><name>tmpdir</name> + "/alpha/beta/gamma"</expr>,
                                   <expr><name>tmpdir</name> + "/delta"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAbsolute2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/**"</expr>, <expr>"alpha/beta/gamma/**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>mt</name> =<init> <expr>new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>mt</name></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAbsolute3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"extended-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tmpdir</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(
            <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + "/tmp"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>tmpdir</name> + "/**/*"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"**/alpha"</expr>,
                                     <expr>"**/delta/*"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>tmpdir</name> + "/alpha/beta/beta.xml"</expr>,
                                       <expr><name>tmpdir</name> + "/alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>tmpdir</name> + "/alpha/beta"</expr>,
                                   <expr><name>tmpdir</name> + "/alpha/beta/gamma"</expr>,
                                   <expr><name>tmpdir</name> + "/delta"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAbsolute4</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"extended-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tmpdir</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(
            <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + "/tmp"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>tmpdir</name> + "/alpha/beta/**/*"</expr>,
                                     <expr><name>tmpdir</name> + "/delta/*"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"**/beta.xml"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>tmpdir</name> + "/alpha/beta/gamma/gamma.xml"</expr>,
                                       <expr><name>tmpdir</name> + "/delta/delta.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>tmpdir</name> + "/alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAbsolute5</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//testing drive letter search from root:</comment>
        <if>if <condition>(<expr>!(<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>pattern</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call> + "*"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>pattern</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//if this is our context we assume there must be something here:</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have at least one resident file"</expr></argument>,
            <argument><expr><call><name><name>ds</name>.<name>getIncludedFilesCount</name></name><argument_list>()</argument_list></call> + <call><name><name>ds</name>.<name>getIncludedDirsCount</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>compareFiles</name><parameter_list>(<param><decl><type><name>DirectoryScanner</name></type> <name>ds</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>expectedFiles</name></decl></param>,
                              <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>expectedDirectories</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name><name>includedFiles</name><index>[]</index></name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name><name>includedDirectories</name><index>[]</index></name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file present: "</expr></argument>, <argument><expr><name><name>expectedFiles</name>.<name>length</name></name></expr></argument>,
                     <argument><expr><name><name>includedFiles</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"directories present: "</expr></argument>, <argument><expr><name><name>expectedDirectories</name>.<name>length</name></name></expr></argument>,
                     <argument><expr><name><name>includedDirectories</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TreeSet</name></type> <name>files</name> =<init> <expr>new <call><name>TreeSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>includedFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>files</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>includedFiles</name><index>[<expr><name>counter</name></expr>]</index></name>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>TreeSet</name></type> <name>directories</name> =<init> <expr>new <call><name>TreeSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>includedDirectories</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>directories</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>includedDirectories</name><index>[<expr><name>counter</name></expr>]</index></name>
                            .<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>String</name></type> <name>currentfile</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>files</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>counter</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>currentfile</name> = (<name>String</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expectedFiles</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><name>currentfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>counter</name>++</expr>;</expr_stmt>
        }</block></while>
        <decl_stmt><decl><type><name>String</name></type> <name>currentdirectory</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>dirit</name> =<init> <expr><call><name><name>directories</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>counter</name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>dirit</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>currentdirectory</name> = (<name>String</name>) <call><name><name>dirit</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expectedDirectories</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><name>currentdirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>counter</name>++</expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecursiveExcludes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"**/beta/**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>dirs</name> =<init> <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><call><name><name>ds</name>.<name>getExcludedDirectories</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name><name>dirs</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"beta is excluded"</expr></argument>,
                   <argument><expr><call><name><name>dirs</name>.<name>contains</name></name><argument_list>(<argument><expr>"alpha/beta".<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"gamma is excluded"</expr></argument>,
                   <argument><expr><call><name><name>dirs</name>.<name>contains</name></name><argument_list>(<argument><expr>"alpha/beta/gamma".<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>,
                                                            <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>files</name> =<init> <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><call><name><name>ds</name>.<name>getExcludedFiles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"beta.xml is excluded"</expr></argument>,
                   <argument><expr><call><name><name>files</name>.<name>contains</name></name><argument_list>(<argument><expr>"alpha/beta/beta.xml"
                                  .<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"gamma.xml is excluded"</expr></argument>,
                   <argument><expr><call><name><name>files</name>.<name>contains</name></name><argument_list>(<argument><expr>"alpha/beta/gamma/gamma.xml"
                                  .<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContentsExcluded</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>addDefaultExcludes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>ensureNonPatternSetsReady</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>".svn"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TokenizedPath</name></type> <name>p</name> =<init> <expr>new <call><name>TokenizedPath</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ds</name>.<name>contentsExcluded</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
