<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\email\Mailer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>email</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DateUtils</name></name>;</import>

<comment type="javadoc">/**
 * Base class for the various emailing implementations.
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Mailer</name> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>host</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>port</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>user</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>password</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:MemberNameCheck OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>SSL</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:MemberNameCheck ON</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Message</name></type> <name>message</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>EmailAddress</name></type> <name>from</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>EmailAddress</name></argument>&gt;</argument_list></name></type> <name>replyToList</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>EmailAddress</name></argument>&gt;</argument_list></name></type> <name>toList</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>EmailAddress</name></argument>&gt;</argument_list></name></type> <name>ccList</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>EmailAddress</name></argument>&gt;</argument_list></name></type> <name>bccList</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>subject</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Task</name></type> <name>task</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>includeFileNames</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Header</name></argument>&gt;</argument_list></name></type> <name>headers</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreInvalidRecipients</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>starttls</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>portExplicitlySpecified</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the mail server.
     *
     * @param host the mail server name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHost</name><parameter_list>(<param><decl><type><name>String</name></type> <name>host</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>host</name></name> = <name>host</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the smtp port.
     *
     * @param port the SMTP port.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPort</name><parameter_list>(<param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether the port has been explicitly specified by the user.
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPortExplicitlySpecified</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>explicit</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>portExplicitlySpecified</name> = <name>explicit</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether the port has been explicitly specified by the user.
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isPortExplicitlySpecified</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>portExplicitlySpecified</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the user for smtp auth.
     *
     * @param user the username.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUser</name><parameter_list>(<param><decl><type><name>String</name></type> <name>user</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>user</name></name> = <name>user</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the password for smtp auth.
     *
     * @param password the authentication password.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to send the mail through SSL.
     *
     * @param ssl if true use SSL transport.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSSL</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ssl</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>SSL</name></name> = <name>ssl</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to allow authentication to switch to a TLS
     * connection via STARTTLS.
     * @param b boolean; if true STARTTLS will be supported.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEnableStartTLS</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>starttls</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isStartTLSEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>starttls</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the message.
     *
     * @param m the message content.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessage</name><parameter_list>(<param><decl><type><name>Message</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>message</name></name> = <name>m</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the address to send from.
     *
     * @param from the sender.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrom</name><parameter_list>(<param><decl><type><name>EmailAddress</name></type> <name>from</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>from</name></name> = <name>from</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the replyto addresses.
     *
     * @param list a vector of reployTo addresses.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReplyToList</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>EmailAddress</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>replyToList</name></name> = <name>list</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the to addresses.
     *
     * @param list a vector of recipient addresses.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToList</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>EmailAddress</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>toList</name></name> = <name>list</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the cc addresses.
     *
     * @param list a vector of cc addresses.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCcList</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>EmailAddress</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ccList</name></name> = <name>list</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the bcc addresses.
     *
     * @param list a vector of the bcc addresses.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBccList</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>EmailAddress</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>bccList</name></name> = <name>list</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the files to attach.
     *
     * @param files list of files to attach to the email.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFiles</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>files</name></name> = <name>files</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the subject.
     *
     * @param subject the subject line.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubject</name><parameter_list>(<param><decl><type><name>String</name></type> <name>subject</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>subject</name></name> = <name>subject</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the owning task.
     *
     * @param task the owning task instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicate whether filenames should be listed in the body.
     *
     * @param b if true list attached file names in the body content.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludeFileNames</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>includeFileNames</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the generic headers to add to the email.
     * @param v a Vector presumed to contain Header objects.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHeaders</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Header</name></argument>&gt;</argument_list></name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>headers</name></name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Send the email.
     *
     * @throws BuildException if the email can't be sent.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>send</name><parameter_list>()</parameter_list>
         <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Whether invalid recipients should be ignored (but a warning
     * will be logged) instead of making the task fail.
     *
     * &lt;p&gt;Even with this property set to true the task will still fail
     * if the mail couldn't be sent to any recipient at all.&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreInvalidRecipients</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>ignoreInvalidRecipients</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether invalid recipients should be ignored.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>shouldIgnoreInvalidRecipients</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ignoreInvalidRecipients</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the current Date in a format suitable for a SMTP date
     * header.
     *
     * @return the current date in SMTP suitable format.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>getDate</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>DateUtils</name>.<name>getDateForHeader</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

</unit>
