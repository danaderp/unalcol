<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resolver\ApacheCatalog.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resolver</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>xml</name>.<name>resolver</name>.<name>Catalog</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>xml</name>.<name>resolver</name>.<name>CatalogEntry</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>xml</name>.<name>resolver</name>.<name>helpers</name>.<name>PublicId</name></name>;</import>

<comment type="javadoc">/**
 * This class extends the Catalog class provided by Norman Walsh's
 * resolver library in xml-commons in order to add classpath entity
 * and URI resolution.  Since XMLCatalog already does classpath
 * resolution, we simply add all CatalogEntry instances back to the
 * controlling XMLCatalog instance.  This is done via a callback
 * mechanism.  ApacheCatalog is &lt;em&gt;only&lt;/em&gt; used for external
 * catalog files.  Inline entries (currently &lt;code&gt;&amp;lt;dtd&amp;gt;&lt;/code&gt;
 * and &lt;code&gt;&amp;lt;entity&amp;gt;&lt;/code&gt;) are not added to ApacheCatalog.
 * See XMLCatalog.java for the details of the entity and URI
 * resolution algorithms.
 *
 * @see org.apache.tools.ant.types.XMLCatalog.CatalogResolver
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>ApacheCatalog</name> <super><extends>extends <name>Catalog</name></extends></super> <block>{

    <comment type="javadoc">/** The resolver object to callback. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ApacheCatalogResolver</name></type> <name>resolver</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * &lt;p&gt;Create a new ApacheCatalog instance.&lt;/p&gt;
     *
     * &lt;p&gt;This method overrides the superclass method of the same name
     *  in order to set the resolver object for callbacks.  The reason
     *  we have to do this is that internally Catalog creates a new
     *  instance of itself for each external catalog file processed.
     *  That is, if two external catalog files are processed, there
     *  will be a total of two ApacheCatalog instances, and so on.&lt;/p&gt;
     * @return the catalog.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Catalog</name></type> <name>newCatalog</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ApacheCatalog</name></type> <name>cat</name> =<init> <expr>(<name>ApacheCatalog</name>) <call><name><name>super</name>.<name>newCatalog</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cat</name>.<name>setResolver</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cat</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the resolver object to callback.
     * @param resolver the apache catalog resolver.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResolver</name><parameter_list>(<param><decl><type><name>ApacheCatalogResolver</name></type> <name>resolver</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>resolver</name></name> = <name>resolver</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * &lt;p&gt;This method overrides the superclass method of the same name
     * in order to add catalog entries back to the controlling
     * XMLCatalog instance.  In this way, we can add classpath lookup
     * for these entries.&lt;/p&gt;
     *
     * &lt;p&gt;When we add an external catalog file, the entries inside it
     * get parsed by this method.  Therefore, we override it to add
     * each of them back to the controlling XMLCatalog instance.  This
     * is done by performing a callback to the ApacheCatalogResolver,
     * which in turn calls the XMLCatalog.&lt;/p&gt;
     *
     * &lt;p&gt;XMLCatalog currently only understands &lt;code&gt;PUBLIC&lt;/code&gt;
     * and &lt;code&gt;URI&lt;/code&gt; entry types, so we ignore the other types.&lt;/p&gt;
     *
     * @param entry The CatalogEntry to process.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addEntry</name><parameter_list>(<param><decl><type><name>CatalogEntry</name></type> <name>entry</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>type</name> =<init> <expr><call><name><name>entry</name>.<name>getEntryType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>type</name> == <name>PUBLIC</name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>String</name></type> <name>publicid</name> =<init> <expr><call><name><name>PublicId</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getEntryArg</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>systemid</name> =<init> <expr><call><name>normalizeURI</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getEntryArg</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>resolver</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>catalogManager</name>.<name>debug</name>
                    .<name>message</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>"Internal Error: null ApacheCatalogResolver"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>resolver</name>.<name>addPublicEntry</name></name><argument_list>(<argument><expr><name>publicid</name></expr></argument>, <argument><expr><name>systemid</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

        }</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name>URI</name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>String</name></type> <name>uri</name> =<init> <expr><call><name>normalizeURI</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getEntryArg</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>altURI</name> =<init> <expr><call><name>normalizeURI</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getEntryArg</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>resolver</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>catalogManager</name>.<name>debug</name>
                    .<name>message</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>"Internal Error: null ApacheCatalogResolver"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>resolver</name>.<name>addURIEntry</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>altURI</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

        }</block></then></if></else></if>

        <expr_stmt><expr><call><name><name>super</name>.<name>addEntry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class> <comment type="line">//- ApacheCatalog</comment>
</unit>
