<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\Archives.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Stack</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ArchiveFileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>DataType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>TarFileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ZipFileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>CollectionUtils</name></name>;</import>

<comment type="javadoc">/**
 * A resource collection that treats all nested resources as archives
 * and returns the contents of the archives as its content.
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>Archives</name> <super><extends>extends <name>DataType</name></extends>
    <implements>implements <name>ResourceCollection</name>, <name>Cloneable</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Union</name></type> <name>zips</name> =<init> <expr>new <call><name>Union</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Union</name></type> <name>tars</name> =<init> <expr>new <call><name>Union</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Wrapper to identify nested resource collections as ZIP
     * archives.
     */</comment>
    <function><type><specifier>public</specifier> <name>Union</name></type> <name>createZips</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>zips</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Wrapper to identify nested resource collections as ZIP
     * archives.
     */</comment>
    <function><type><specifier>public</specifier> <name>Union</name></type> <name>createTars</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tars</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sums the sizes of nested archives.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Archives</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>total</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>ArchiveFileSet</name></argument>&gt;</argument_list></name></type> <name>i</name> =<init> <expr><call><name>grabArchives</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>) <block>{
            <expr_stmt><expr><name>total</name> += <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>total</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Merges the nested collections.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Archives</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>l</name> =<init> <expr>new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>ArchiveFileSet</name></argument>&gt;</argument_list></name></type> <name>i</name> =<init> <expr><call><name>grabArchives</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>) <block>{
            <expr_stmt><expr><call><name><name>l</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name><name>CollectionUtils</name>
                     .<name>asCollection</name></name><argument_list>(<argument><expr><call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>l</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return false
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFilesystemOnly</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Archives</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>isFilesystemOnly</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Overrides the base version.
     * @param r the Reference to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>zips</name>.<name>getResourceCollections</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &gt; 0
            || <call><name><name>tars</name>.<name>getResourceCollections</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Implement clone.  The nested resource collections are cloned as
     * well.
     * @return a cloned instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Archives</name></type> <name>a</name> =<init> <expr>(<name>Archives</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>a</name>.<name>zips</name></name> = (<name>Union</name>) <call><name><name>zips</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name>.<name>tars</name></name> = (<name>Union</name>) <call><name><name>tars</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>a</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="line">// TODO this is a pretty expensive operation and so the result</comment>
    <comment type="line">// should be cached.</comment>
    <comment type="javadoc">/**
     * Turns all nested resources into corresponding ArchiveFileSets
     * and returns an iterator over the collected archives.
     */</comment>
    <function><type><specifier>protected</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>ArchiveFileSet</name></argument>&gt;</argument_list></name></type> <name>grabArchives</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ArchiveFileSet</name></argument>&gt;</argument_list></name></type> <name>l</name> =<init> <expr>new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>ArchiveFileSet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>zips</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>configureArchive</name><argument_list>(<argument><expr>new <call><name>ZipFileSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>tars</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>configureArchive</name><argument_list>(<argument><expr>new <call><name>TarFileSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>l</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Configures the archivefileset based on this type's settings,
     * set the source.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ArchiveFileSet</name></type> <name>configureArchive</name><parameter_list>(<param><decl><type><name>ArchiveFileSet</name></type> <name>afs</name></decl></param>,
                                              <param><decl><type><name>Resource</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>afs</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>afs</name>.<name>setSrcResource</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>afs</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Overrides the version of DataType to recurse on all DataType
     * child elements that may have been added.
     * @param stk the stack of data types to use (recursively).
     * @param p   the project to use to dereference the references.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>dieOnCircularReference</name><parameter_list>(<param><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>stk</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isChecked</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>dieOnCircularReference</name></name><argument_list>(<argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>pushAndInvokeCircularReferenceCheck</name><argument_list>(<argument><expr><name>zips</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pushAndInvokeCircularReferenceCheck</name><argument_list>(<argument><expr><name>tars</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

}</block></class>
</unit>
