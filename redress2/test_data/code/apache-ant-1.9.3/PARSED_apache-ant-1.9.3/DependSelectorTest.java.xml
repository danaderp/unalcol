<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\selectors\DependSelectorTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>


<comment type="javadoc">/**
 * Tests Depend Selectors
 *
 */</comment>
<class><specifier>public</specifier> class <name>DependSelectorTest</name> <super><extends>extends <name>BaseSelectorTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>DependSelectorTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Factory method from base class. This is overriden in child
     * classes to return a specific Selector class.
     */</comment>
    <function><type><specifier>public</specifier> <name>BaseSelector</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>DependSelector</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Test the code that validates the selector.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValidate</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DependSelector</name></type> <name>s</name> =<init> <expr>(<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>createMapper</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>createMapper</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DependSelector allowed more than one nested mapper."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be1</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Cannot define more than one mapper"</expr></argument>,
                    <argument><expr><call><name><name>be1</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DependSelector did not check for required fields"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be2</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"The targetdir attribute is required."</expr></argument>,
                    <argument><expr><call><name><name>be2</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function>

    <comment type="javadoc">/**
     * Tests to make sure that the selector is selecting files correctly.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSelectionBehaviour</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DependSelector</name></type> <name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>results</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>subdir</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Mapper</name></type> <name>m</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Mapper</name>.<name>MapperType</name></name></type> <name>identity</name> =<init> <expr>new <call><name><name>Mapper</name>.<name>MapperType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>identity</name>.<name>setValue</name></name><argument_list>(<argument><expr>"identity"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Mapper</name>.<name>MapperType</name></name></type> <name>glob</name> =<init> <expr>new <call><name><name>Mapper</name>.<name>MapperType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>glob</name>.<name>setValue</name></name><argument_list>(<argument><expr>"glob"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Mapper</name>.<name>MapperType</name></name></type> <name>merge</name> =<init> <expr>new <call><name><name>Mapper</name>.<name>MapperType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>merge</name>.<name>setValue</name></name><argument_list>(<argument><expr>"merge"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name>makeBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setTargetdir</name></name><argument_list>(<argument><expr><name>beddir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FFFFFFFFFFFF"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setTargetdir</name></name><argument_list>(<argument><expr><name>beddir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name> = <call><name><name>s</name>.<name>createMapper</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setType</name></name><argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FFFFFFFFFFFF"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setTargetdir</name></name><argument_list>(<argument><expr><name>beddir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name> = <call><name><name>s</name>.<name>createMapper</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setType</name></name><argument_list>(<argument><expr><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setTo</name></name><argument_list>(<argument><expr>"asf-logo.gif.gz"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFFFFTTTFFF"</expr></argument>, <argument><expr><call><name><name>results</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>,<argument><expr>11</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setTargetdir</name></name><argument_list>(<argument><expr><name>beddir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name> = <call><name><name>s</name>.<name>createMapper</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setType</name></name><argument_list>(<argument><expr><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setTo</name></name><argument_list>(<argument><expr>"asf-logo.gif.bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TTFTTTTTTTTT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Test for path relative to project base directory</comment>
            <expr_stmt><expr><name>s</name> = (<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>subdir</name> = new <call><name>File</name><argument_list>(<argument><expr>"selectortest/tar/bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setTargetdir</name></name><argument_list>(<argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name> = <call><name><name>s</name>.<name>createMapper</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setType</name></name><argument_list>(<argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"*.bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setTo</name></name><argument_list>(<argument><expr>"*.tar.bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FFTFFFFFFTTF"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>subdir</name> = new <call><name>File</name><argument_list>(<argument><expr><name>beddir</name></expr></argument>,<argument><expr>"tar/bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setTargetdir</name></name><argument_list>(<argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name> = <call><name><name>s</name>.<name>createMapper</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setType</name></name><argument_list>(<argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"*.bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setTo</name></name><argument_list>(<argument><expr>"*.tar.bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FFFFFFFFFTTF"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try>try <block>{
                <expr_stmt><expr><call><name>makeMirror</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>s</name> = (<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>testdir</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"selectortest2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>setTargetdir</name></name><argument_list>(<argument><expr><name>testdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FFFTTFFFFFFF"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>s</name> = (<name>DependSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>testdir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"selectortest2/tar/bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>setTargetdir</name></name><argument_list>(<argument><expr><name>testdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>m</name> = <call><name><name>s</name>.<name>createMapper</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>m</name>.<name>setType</name></name><argument_list>(<argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>m</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"*.bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>m</name>.<name>setTo</name></name><argument_list>(<argument><expr>"*.tar.bz2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>results</name> = <call><name>mirrorSelectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FFFFFFFFFTTF"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FFFFFFFFFTTF"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally>finally <block>{
                <expr_stmt><expr><call><name>cleanupMirror</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>

        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name>cleanupBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

    }</block></function>

}</block></class>
</unit>
