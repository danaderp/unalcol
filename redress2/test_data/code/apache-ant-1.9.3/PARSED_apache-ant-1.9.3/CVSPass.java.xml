<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\CVSPass.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * Adds an new entry to a CVS password file.
 *
 *
 * @since Ant 1.4
 *
 * @ant.task category="scm"
 */</comment>
<class><specifier>public</specifier> class <name>CVSPass</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <comment type="javadoc">/** CVS Root */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>cvsRoot</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Password file to add password to */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>passFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Password to add to file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>password</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Array contain char conversion data */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>shifts</name> =<init> <expr><block>{
          <expr>0</expr>,   <expr>1</expr>,   <expr>2</expr>,   <expr>3</expr>,   <expr>4</expr>,   <expr>5</expr>,   <expr>6</expr>,   <expr>7</expr>,   <expr>8</expr>,   <expr>9</expr>,  <expr>10</expr>,  <expr>11</expr>,  <expr>12</expr>,  <expr>13</expr>,  <expr>14</expr>,  <expr>15</expr>,
         <expr>16</expr>,  <expr>17</expr>,  <expr>18</expr>,  <expr>19</expr>,  <expr>20</expr>,  <expr>21</expr>,  <expr>22</expr>,  <expr>23</expr>,  <expr>24</expr>,  <expr>25</expr>,  <expr>26</expr>,  <expr>27</expr>,  <expr>28</expr>,  <expr>29</expr>,  <expr>30</expr>,  <expr>31</expr>,
        <expr>114</expr>, <expr>120</expr>,  <expr>53</expr>,  <expr>79</expr>,  <expr>96</expr>, <expr>109</expr>,  <expr>72</expr>, <expr>108</expr>,  <expr>70</expr>,  <expr>64</expr>,  <expr>76</expr>,  <expr>67</expr>, <expr>116</expr>,  <expr>74</expr>,  <expr>68</expr>,  <expr>87</expr>,
        <expr>111</expr>,  <expr>52</expr>,  <expr>75</expr>, <expr>119</expr>,  <expr>49</expr>,  <expr>34</expr>,  <expr>82</expr>,  <expr>81</expr>,  <expr>95</expr>,  <expr>65</expr>, <expr>112</expr>,  <expr>86</expr>, <expr>118</expr>, <expr>110</expr>, <expr>122</expr>, <expr>105</expr>,
         <expr>41</expr>,  <expr>57</expr>,  <expr>83</expr>,  <expr>43</expr>,  <expr>46</expr>, <expr>102</expr>,  <expr>40</expr>,  <expr>89</expr>,  <expr>38</expr>, <expr>103</expr>,  <expr>45</expr>,  <expr>50</expr>,  <expr>42</expr>, <expr>123</expr>,  <expr>91</expr>,  <expr>35</expr>,
        <expr>125</expr>,  <expr>55</expr>,  <expr>54</expr>,  <expr>66</expr>, <expr>124</expr>, <expr>126</expr>,  <expr>59</expr>,  <expr>47</expr>,  <expr>92</expr>,  <expr>71</expr>, <expr>115</expr>,  <expr>78</expr>,  <expr>88</expr>, <expr>107</expr>, <expr>106</expr>,  <expr>56</expr>,
         <expr>36</expr>, <expr>121</expr>, <expr>117</expr>, <expr>104</expr>, <expr>101</expr>, <expr>100</expr>,  <expr>69</expr>,  <expr>73</expr>,  <expr>99</expr>,  <expr>63</expr>,  <expr>94</expr>,  <expr>93</expr>,  <expr>39</expr>,  <expr>37</expr>,  <expr>61</expr>,  <expr>48</expr>,
         <expr>58</expr>, <expr>113</expr>,  <expr>32</expr>,  <expr>90</expr>,  <expr>44</expr>,  <expr>98</expr>,  <expr>60</expr>,  <expr>51</expr>,  <expr>33</expr>,  <expr>97</expr>,  <expr>62</expr>,  <expr>77</expr>,  <expr>84</expr>,  <expr>80</expr>,  <expr>85</expr>, <expr>223</expr>,
        <expr>225</expr>, <expr>216</expr>, <expr>187</expr>, <expr>166</expr>, <expr>229</expr>, <expr>189</expr>, <expr>222</expr>, <expr>188</expr>, <expr>141</expr>, <expr>249</expr>, <expr>148</expr>, <expr>200</expr>, <expr>184</expr>, <expr>136</expr>, <expr>248</expr>, <expr>190</expr>,
        <expr>199</expr>, <expr>170</expr>, <expr>181</expr>, <expr>204</expr>, <expr>138</expr>, <expr>232</expr>, <expr>218</expr>, <expr>183</expr>, <expr>255</expr>, <expr>234</expr>, <expr>220</expr>, <expr>247</expr>, <expr>213</expr>, <expr>203</expr>, <expr>226</expr>, <expr>193</expr>,
        <expr>174</expr>, <expr>172</expr>, <expr>228</expr>, <expr>252</expr>, <expr>217</expr>, <expr>201</expr>, <expr>131</expr>, <expr>230</expr>, <expr>197</expr>, <expr>211</expr>, <expr>145</expr>, <expr>238</expr>, <expr>161</expr>, <expr>179</expr>, <expr>160</expr>, <expr>212</expr>,
        <expr>207</expr>, <expr>221</expr>, <expr>254</expr>, <expr>173</expr>, <expr>202</expr>, <expr>146</expr>, <expr>224</expr>, <expr>151</expr>, <expr>140</expr>, <expr>196</expr>, <expr>205</expr>, <expr>130</expr>, <expr>135</expr>, <expr>133</expr>, <expr>143</expr>, <expr>246</expr>,
        <expr>192</expr>, <expr>159</expr>, <expr>244</expr>, <expr>239</expr>, <expr>185</expr>, <expr>168</expr>, <expr>215</expr>, <expr>144</expr>, <expr>139</expr>, <expr>165</expr>, <expr>180</expr>, <expr>157</expr>, <expr>147</expr>, <expr>186</expr>, <expr>214</expr>, <expr>176</expr>,
        <expr>227</expr>, <expr>231</expr>, <expr>219</expr>, <expr>169</expr>, <expr>175</expr>, <expr>156</expr>, <expr>206</expr>, <expr>198</expr>, <expr>129</expr>, <expr>164</expr>, <expr>150</expr>, <expr>210</expr>, <expr>154</expr>, <expr>177</expr>, <expr>134</expr>, <expr>127</expr>,
        <expr>182</expr>, <expr>128</expr>, <expr>158</expr>, <expr>208</expr>, <expr>162</expr>, <expr>132</expr>, <expr>167</expr>, <expr>209</expr>, <expr>149</expr>, <expr>241</expr>, <expr>153</expr>, <expr>251</expr>, <expr>237</expr>, <expr>236</expr>, <expr>171</expr>, <expr>195</expr>,
        <expr>243</expr>, <expr>233</expr>, <expr>253</expr>, <expr>240</expr>, <expr>194</expr>, <expr>250</expr>, <expr>191</expr>, <expr>155</expr>, <expr>142</expr>, <expr>137</expr>, <expr>245</expr>, <expr>235</expr>, <expr>163</expr>, <expr>242</expr>, <expr>178</expr>, <expr>152</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create a CVS task using the default cvspass file location.
     */</comment>
    <constructor><specifier>public</specifier> <name>CVSPass</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>passFile</name> = new <call><name>File</name><argument_list>(
            <argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cygwin.user.home"</expr></argument>,
                <argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.home"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            + <name><name>File</name>.<name>separatorChar</name></name> + ".cvspass"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Does the work.
     *
     * @exception BuildException if something goes wrong with the build
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>cvsRoot</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"cvsroot is required"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>password</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"password is required"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"cvsRoot: " + <name>cvsRoot</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"password: " + <name>password</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"passFile: " + <name>passFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>reader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>writer</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>passFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>reader</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>FileReader</name><argument_list>(<argument><expr><name>passFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

                <while>while <condition>(<expr>(<name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
                    <if>if <condition>(<expr>!<call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>cvsRoot</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></while>
            }</block></then></if>

            <decl_stmt><decl><type><name>String</name></type> <name>pwdfile</name> =<init> <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call> + <name>cvsRoot</name> + " A"
                + <call><name>mangle</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Writing -&gt; " + <name>pwdfile</name></expr></argument> , <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>writer</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr>new <call><name>FileWriter</name><argument_list>(<argument><expr><name>passFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>writer</name>.<name>write</name></name><argument_list>(<argument><expr><name>pwdfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>reader</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>reader</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>mangle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>password</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>shifts</name><index>[<expr><call><name><name>password</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The CVS repository to add an entry for.
     *
     * @param cvsRoot the CVS repository
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCvsroot</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cvsRoot</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cvsRoot</name></name> = <name>cvsRoot</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Password file to add the entry to.
     *
     * @param passFile the password file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>passFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>passFile</name></name> = <name>passFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Password to be added to the password file.
     *
     * @param password the password.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
