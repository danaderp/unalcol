<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\WorkerAnt.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * A worker ant executes a single task in a background thread.
 * After the run, any exception thrown is turned into a buildexception, which can be
 * rethrown, the finished attribute is set, then notifyAll() is called,
 * so that anyone waiting on the same notify object gets woken up.
 * &lt;/p&gt;
 * This class is effectively a superset of
 * {@link org.apache.tools.ant.taskdefs.Parallel.TaskRunnable}
 *
 * @since Ant 1.8
 */</comment>

<class><specifier>public</specifier> class <name>WorkerAnt</name> <super><extends>extends <name>Thread</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Task</name></type> <name>task</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>notify</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>volatile</name> <name>boolean</name></type> <name>finished</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>volatile</name> <name>BuildException</name></type> <name>buildException</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>volatile</name> <name>Throwable</name></type> <name>exception</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Error message if invoked with no task
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_NO_TASK</name> =<init> <expr>"No task defined"</expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Create the worker.
     * &lt;p/&gt;
     * This does not start the thread, merely configures it.
     * @param task the task
     * @param notify what to notify
     */</comment>
    <constructor><specifier>public</specifier> <name>WorkerAnt</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>, <param><decl><type><name>Object</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>notify</name></name> = <name>notify</name> != <name>null</name> ? <name>notify</name> : <name>this</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create the worker, using the worker as the notification point.
     * &lt;p/&gt;
     * This does not start the thread, merely configures it.
     * @param task the task
     */</comment>
    <constructor><specifier>public</specifier> <name>WorkerAnt</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get any build exception.
     * This would seem to be oversynchronised, but know that Java pre-1.5 can
     * reorder volatile access.
     * The synchronized attribute is to force an ordering.
     *
     * @return the exception or null
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>BuildException</name></type> <name>getBuildException</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>buildException</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get whatever was thrown, which may or may not be a buildException.
     * Assertion: getException() instanceof BuildException &lt;=&gt; getBuildException()==getException()
     * @return the exception.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>Throwable</name></type> <name>getException</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>exception</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Get the task
     * @return the task
     */</comment>
    <function><type><specifier>public</specifier> <name>Task</name></type> <name>getTask</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>task</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Query the task/thread for being finished.
     * This would seem to be oversynchronised, but know that Java pre-1.5 can
     * reorder volatile access.
     * The synchronized attribute is to force an ordering.
     * @return true if the task is finished.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>isFinished</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>finished</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Block on the notify object and so wait until the thread is finished.
     * @param timeout timeout in milliseconds
     * @throws InterruptedException if the execution was interrupted
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>waitUntilFinished</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeout</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{
        <synchronized>synchronized (<expr><name>notify</name></expr>) <block>{
            <if>if <condition>(<expr>!<name>finished</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>notify</name>.<name>wait</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></synchronized>
    }</block></function>

    <comment type="javadoc">/**
     * Raise an exception if one was caught
     *
     * @throws BuildException if one has been picked up
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rethrowAnyBuildException</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildException</name></type> <name>ex</name> =<init> <expr><call><name>getBuildException</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ex</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Handle a caught exception, by recording it and possibly wrapping it
     * in a BuildException for later rethrowing.
     * @param thrown what was caught earlier
     */</comment>
    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>caught</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>thrown</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>exception</name> = <name>thrown</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buildException</name> = (<name>thrown</name> <name>instanceof</name> <name>BuildException</name>)
            ? (<name>BuildException</name>) <name>thrown</name>
            : new <call><name>BuildException</name><argument_list>(<argument><expr><name>thrown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Run the task, which is skipped if null.
     * When invoked again, the task is re-run.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <if>if <condition>(<expr><name>task</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>task</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>thrown</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>caught</name><argument_list>(<argument><expr><name>thrown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <synchronized>synchronized (<expr><name>notify</name></expr>) <block>{
                <expr_stmt><expr><name>finished</name> = true</expr>;</expr_stmt>
                <comment type="line">//reset the task.</comment>
                <comment type="line">//wake up our owner, if it is waiting</comment>
                <expr_stmt><expr><call><name><name>notify</name>.<name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
