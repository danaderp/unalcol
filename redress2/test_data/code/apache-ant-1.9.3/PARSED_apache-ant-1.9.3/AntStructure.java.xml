<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\AntStructure.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>IntrospectionHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>TaskContainer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>

<comment type="javadoc">/**
 * Creates a partial DTD for Ant from the currently known tasks.
 *
 *
 * @since Ant 1.1
 *
 * @ant.task category="xml"
 */</comment>
<class><specifier>public</specifier> class <name>AntStructure</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LINE_SEP</name>
        =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>output</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StructurePrinter</name></type> <name>printer</name> =<init> <expr>new <call><name>DTDPrinter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The output file.
     * @param output the output file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>File</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The StructurePrinter to use.
     * @param p the printer to use.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>StructurePrinter</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>printer</name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Build the antstructure DTD.
     *
     * @exception BuildException if the DTD cannot be written.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>output</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"output attribute is required"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <try>try <block>{
                <expr_stmt><expr><name>out</name> = new <call><name>PrintWriter</name><argument_list>(<argument><expr>new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"UTF8"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>UnsupportedEncodingException</name></type> <name>ue</name></decl></param>) <block>{
                <comment type="block">/*
                 * Plain impossible with UTF8, see
                 * http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html
                 *
                 * fallback to platform specific anyway.
                 */</comment>
                <expr_stmt><expr><name>out</name> = new <call><name>PrintWriter</name><argument_list>(<argument><expr>new <call><name>FileWriter</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <expr_stmt><expr><call><name><name>printer</name>.<name>printHead</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>,
                              <argument><expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getTaskDefinitions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getDataTypeDefinitions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>printer</name>.<name>printTargetDecl</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name>String</name></type> <name>typeName</name> :<range> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getCopyOfDataTypeDefinitions</name><argument_list>()</argument_list></call>
                .<call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name><name>printer</name>.<name>printElementDecl</name></name><argument_list>(
                                     <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>typeName</name></expr></argument>,
                                     <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getDataTypeDefinitions</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <for>for (<init><decl><type><name>String</name></type> <name>tName</name> :<range> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getCopyOfTaskDefinitions</name><argument_list>()</argument_list></call>.<call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name><name>printer</name>.<name>printElementDecl</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tName</name></expr></argument>,
                                         <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getTaskDefinitions</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>tName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name><name>printer</name>.<name>printTail</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>out</name>.<name>checkError</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Encountered an error writing Ant"
                                      + " structure"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error writing "
                                     + <call><name><name>output</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>out</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Writes the actual structure information.
     *
     * &lt;p&gt;{@link #printHead}, {@link #printTargetDecl} and {@link #printTail}
     * are called exactly once, {@link #printElementDecl} once for
     * each declared task and type.&lt;/p&gt;
     */</comment>
    <class type="interface"><specifier>public</specifier> <specifier>static</specifier> interface <name>StructurePrinter</name> <block>{
        <comment type="javadoc">/**
         * Prints the header of the generated output.
         *
         * @param out PrintWriter to write to.
         * @param p Project instance for the current task
         * @param tasks map (name to implementing class)
         * @param types map (name to implementing class)
         * data types.
         */</comment>
        <function_decl><type><name>void</name></type> <name>printHead</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>, <param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>tasks</name></decl></param>,
                       <param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>types</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * Prints the definition for the target element.
         * @param out PrintWriter to write to.
         */</comment>
        <function_decl><type><name>void</name></type> <name>printTargetDecl</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * Print the definition for a given element.
         *
         * @param out PrintWriter to write to.
         * @param p Project instance for the current task
         * @param name element name.
         * @param element class of the defined element.
         */</comment>
        <function_decl><type><name>void</name></type> <name>printElementDecl</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>,
                              <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>element</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * Prints the trailer.
         * @param out PrintWriter to write to.
         */</comment>
        <function_decl><type><name>void</name></type> <name>printTail</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>DTDPrinter</name> <super><implements>implements <name>StructurePrinter</name></implements></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BOOLEAN</name> =<init> <expr>"%boolean;"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TASKS</name> =<init> <expr>"%tasks;"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TYPES</name> =<init> <expr>"%types;"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>visited</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>printTail</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>visited</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>printHead</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>, <param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>tasks</name></decl></param>,
                <param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>types</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>printHead</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name><name>tasks</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>types</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <comment type="javadoc">/**
         * Prints the header of the generated output.
         *
         * &lt;p&gt;Basically this prints the XML declaration, defines some
         * entities and the project element.&lt;/p&gt;
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>printHead</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>, <param><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tasks</name></decl></param>,
                               <param><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>types</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"&lt;!ENTITY % boolean \"(true|false|on|off|yes|no)\"&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"&lt;!ENTITY % tasks \""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tasks</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tName</name> =<init> <expr><call><name><name>tasks</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>first</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>" | "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>first</name> = false</expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>tName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"\"&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"&lt;!ENTITY % types \""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>first</name> = true</expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>types</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>typeName</name> =<init> <expr><call><name><name>types</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>first</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>" | "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>first</name> = false</expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"\"&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"&lt;!ELEMENT project (target | extension-point | "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>TASKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>" | "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>")*&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"&lt;!ATTLIST project"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          name    CDATA #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          default CDATA #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          basedir CDATA #IMPLIED&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Prints the definition for the target element.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>printTargetDecl</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"&lt;!ELEMENT target ("</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>TASKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>" | "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>")*&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printTargetAttrs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"&lt;!ELEMENT extension-point EMPTY&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printTargetAttrs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"extension-point"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Prints the definition for the target element.
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>printTargetAttrs</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>, <param><decl><type><name>String</name></type> <name>tag</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"&lt;!ATTLIST "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          id                      ID    #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          name                    CDATA #REQUIRED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          if                      CDATA #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          unless                  CDATA #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          depends                 CDATA #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          extensionOf             CDATA #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          onMissingExtensionPoint CDATA #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"          description             CDATA #IMPLIED&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Print the definition for a given element.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>printElementDecl</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>out</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>,
                                     <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>element</name></decl></param>)</parameter_list> <block>{

            <if>if <condition>(<expr><call><name><name>visited</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>visited</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>IntrospectionHelper</name></type> <name>ih</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>ih</name> = <call><name><name>IntrospectionHelper</name>.<name>getHelper</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
                <comment type="block">/*
                 * TODO - failed to load the class properly.
                 *
                 * should we print a warning here?
                 */</comment>
                <return>return;</return>
            }</block></catch></try>

            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"&lt;!ELEMENT "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name>.<name><name/></name></name>class.<call><name>equals</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"EMPTY&gt;"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>LINE_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"&lt;!ATTLIST "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>LINE_SEP</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"          id ID #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>LINE_SEP</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"          refid IDREF #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>LINE_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>ih</name>.<name>supportsCharacters</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>v</name>.<name>addElement</name></name><argument_list>(<argument><expr>"#PCDATA"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>TaskContainer</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>v</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>TASKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>ih</name>.<name>getNestedElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>v</name>.<name>addElement</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <if>if <condition>(<expr><call><name><name>v</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"EMPTY"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"("</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> =<init> <expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr><name>i</name> != 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" | "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>count</name> &gt; 1 || !<call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"#PCDATA"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>sb</name> = new <call><name>StringBuffer</name><argument_list>(<argument><expr>"&lt;!ATTLIST "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>LINE_SEP</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"          id ID #IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>e</name> = <call><name><name>ih</name>.<name>getAttributes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>attrName</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>"id".<call><name>equals</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>LINE_SEP</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"          "</expr></argument>)</argument_list></call>
                    .<call><name>append</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> =<init> <expr><call><name><name>ih</name>.<name>getAttributeType</name></name><argument_list>(<argument><expr><name>attrName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>type</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>java</name>.<name>lang</name>.<name>Boolean</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>
                    || <call><name><name>type</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>java</name>.<name>lang</name>.<name>Boolean</name>.<name>TYPE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>BOOLEAN</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name><name>Reference</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"IDREF "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name><name>EnumeratedAttribute</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <decl_stmt><decl><type><name>EnumeratedAttribute</name></type> <name>ea</name> =<init>
                            <expr>(<name>EnumeratedAttribute</name>) <call><name><name>type</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>values</name> =<init> <expr><call><name><name>ea</name>.<name>getValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>values</name> == <name>null</name>
                            || <name><name>values</name>.<name>length</name></name> == 0
                            || !<call><name>areNmtokens</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"CDATA "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"("</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>values</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <if>if <condition>(<expr><name>i</name> != 0</expr>)</condition><then> <block>{
                                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" | "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></for>
                            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>") "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block> <catch>catch (<param><decl><type><name>InstantiationException</name></type> <name>ie</name></decl></param>) <block>{
                        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"CDATA "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>ie</name></decl></param>) <block>{
                        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"CDATA "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>type</name>.<name>getSuperclass</name></name><argument_list>()</argument_list></call> != <name>null</name>
                           &amp;&amp; <call><name><name>type</name>.<name>getSuperclass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"java.lang.Enum"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>values</name> =<init> <expr>(<name><name>Object</name><index>[]</index></name>) <call><name><name>type</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"values"</expr></argument>, <argument><expr>(<name><name>Class</name><index>[]</index></name>)  <name>null</name></expr></argument>)</argument_list></call>
                            .<call><name>invoke</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>values</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"CDATA "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>'('</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>values</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <if>if <condition>(<expr><name>i</name> != 0</expr>)</condition><then> <block>{
                                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" | "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>type</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr>(<name><name>Class</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call>
                                          .<call><name>invoke</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></for>
                            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>") "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>x</name></decl></param>) <block>{
                        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"CDATA "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"CDATA "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"#IMPLIED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>LINE_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> =<init> <expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>nestedName</name> =<init> <expr>(<name>String</name>) <call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!"#PCDATA".<call><name>equals</name><argument_list>(<argument><expr><name>nestedName</name></expr></argument>)</argument_list></call>
                    &amp;&amp; !<call><name><name>TASKS</name>.<name>equals</name></name><argument_list>(<argument><expr><name>nestedName</name></expr></argument>)</argument_list></call>
                    &amp;&amp; !<call><name><name>TYPES</name>.<name>equals</name></name><argument_list>(<argument><expr><name>nestedName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>printElementDecl</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>nestedName</name></expr></argument>, <argument><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr><name>nestedName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></function>

        <comment type="javadoc">/**
         * Does this String match the XML-NMTOKEN production?
         * @param s the string to test
         * @return true if the string matches the XML-NMTOKEN
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isNmtoken</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name> =<init> <expr><call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>s</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// TODO - we are committing CombiningChar and Extender here</comment>
                <if>if <condition>(<expr>!<call><name><name>Character</name>.<name>isLetterOrDigit</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
                    &amp;&amp; <name>c</name> != '.' &amp;&amp; <name>c</name> != '-' &amp;&amp; <name>c</name> != '_' &amp;&amp; <name>c</name> != ':'</expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></for>
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Do the Strings all match the XML-NMTOKEN production?
         *
         * &lt;p&gt;Otherwise they are not suitable as an enumerated attribute,
         * for example.&lt;/p&gt;
         * @param s the array of string to test
         * @return true if all the strings in the array math XML-NMTOKEN
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>areNmtokens</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>s</name></decl></param>)</parameter_list> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>s</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr>!<call><name>isNmtoken</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></for>
            <return>return <expr>true</expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Does this String match the XML-NMTOKEN production?
     * @param s the string to test
     * @return true if the string matches the XML-NMTOKEN
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isNmtoken</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>DTDPrinter</name>.<name>isNmtoken</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Do the Strings all match the XML-NMTOKEN production?
     *
     * &lt;p&gt;Otherwise they are not suitable as an enumerated attribute,
     * for example.&lt;/p&gt;
     * @param s the array of string to test
     * @return true if all the strings in the array math XML-NMTOKEN
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>areNmtokens</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>DTDPrinter</name>.<name>areNmtokens</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
