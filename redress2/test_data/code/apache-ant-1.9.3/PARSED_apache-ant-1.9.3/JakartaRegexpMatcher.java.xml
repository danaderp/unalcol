<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\regexp\JakartaRegexpMatcher.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>regexp</name>.<name>RE</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>regexp</name>.<name>RESyntaxException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Implementation of RegexpMatcher for Jakarta-Regexp.
 *
 */</comment>
<class><specifier>public</specifier> class <name>JakartaRegexpMatcher</name> <super><implements>implements <name>RegexpMatcher</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pattern</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the regexp pattern from the String description.
     * @param pattern the pattern to match
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pattern</name></name> = <name>pattern</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get a String representation of the regexp pattern
     * @return the pattern
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPattern</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>pattern</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compile the pattern.
     *
     * @param options the ant regexp options
     * @return a compiled pattern
     * @exception BuildException if an error occurs
     */</comment>
    <function><type><specifier>protected</specifier> <name>RE</name></type> <name>getCompiledPattern</name><parameter_list>(<param><decl><type><name>int</name></type> <name>options</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>cOptions</name> =<init> <expr><call><name>getCompilerOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>RE</name></type> <name>reg</name> =<init> <expr>new <call><name>RE</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>reg</name>.<name>setMatchFlags</name></name><argument_list>(<argument><expr><name>cOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>reg</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>RESyntaxException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Does the given argument match the pattern?
     * @param argument the string to match against
     * @return true if the pattern matches
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>(<param><decl><type><name>String</name></type> <name>argument</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>matches</name><argument_list>(<argument><expr><name>argument</name></expr></argument>, <argument><expr><name>MATCH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Does the given argument match the pattern?
     * @param input the string to match against
     * @param options the regex options to use
     * @return true if the pattern matches
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>options</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>matches</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>getCompiledPattern</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>, <param><decl><type><name>RE</name></type> <name>reg</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>reg</name>.<name>match</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a Vector of matched groups found in the argument
     * using default options.
     *
     * &lt;p&gt;Group 0 will be the full match, the rest are the
     * parenthesized subexpressions&lt;/p&gt;.
     *
     * @param argument the string to match against
     * @return the vector of groups
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>Vector</name></type> <name>getGroups</name><parameter_list>(<param><decl><type><name>String</name></type> <name>argument</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>getGroups</name><argument_list>(<argument><expr><name>argument</name></expr></argument>, <argument><expr><name>MATCH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a Vector of matched groups found in the argument.
     *
     * &lt;p&gt;Group 0 will be the full match, the rest are the
     * parenthesized subexpressions&lt;/p&gt;.
     *
     * @param input the string to match against
     * @param options the regex options to use
     * @return the vector of groups
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>Vector</name></type> <name>getGroups</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>options</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>RE</name></type> <name>reg</name> =<init> <expr><call><name>getCompiledPattern</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>matches</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Vector</name></type> <name>v</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> =<init> <expr><call><name><name>reg</name>.<name>getParenCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>cnt</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>match</name> =<init> <expr><call><name><name>reg</name>.<name>getParen</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// treat non-matching groups as empty matches</comment>
            <if>if <condition>(<expr><name>match</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>match</name> = ""</expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>v</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>v</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convert the generic options to the regex compiler specific options.
     * @param options the generic options
     * @return the specific options
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>getCompilerOptions</name><parameter_list>(<param><decl><type><name>int</name></type> <name>options</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>cOptions</name> =<init> <expr><name><name>RE</name>.<name>MATCH_NORMAL</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>RegexpUtil</name>.<name>hasFlag</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>MATCH_CASE_INSENSITIVE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cOptions</name> |= <name><name>RE</name>.<name>MATCH_CASEINDEPENDENT</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>RegexpUtil</name>.<name>hasFlag</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>MATCH_MULTILINE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cOptions</name> |= <name><name>RE</name>.<name>MATCH_MULTILINE</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>RegexpUtil</name>.<name>hasFlag</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>MATCH_SINGLELINE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cOptions</name> |= <name><name>RE</name>.<name>MATCH_SINGLELINE</name></name></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>cOptions</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
