<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Length.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Condition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Comparison</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Resources</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>PropertyOutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Gets lengths:  of files/resources, byte size; of strings, length (optionally trimmed).
 * The task is overloaded in this way for semantic reasons, much like Available.
 * @since Ant 1.6.3
 */</comment>
<class><specifier>public</specifier> class <name>Length</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ALL</name> =<init> <expr>"all"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EACH</name> =<init> <expr>"each"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STRING</name> =<init> <expr>"string"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LENGTH_REQUIRED</name>
        =<init> <expr>"Use of the Length condition requires that the length attribute be set."</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>property</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>string</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>trim</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mode</name> =<init> <expr><name>ALL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparison</name></type> <name>when</name> =<init> <expr><name><name>Comparison</name>.<name>EQUAL</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resources</name></type> <name>resources</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The property in which the length will be stored.
     * @param property the &lt;code&gt;String&lt;/code&gt; property key.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>property</name></name> = <name>property</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the single resource for this task.
     * @param resource the Resource whose length to retrieve.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>resource</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the single file for this task.
     * @param file the &lt;code&gt;File&lt;/code&gt; whose length to retrieve.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a FileSet.
     * @param fs the &lt;code&gt;FileSet&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr>(<name>ResourceCollection</name>) <name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a ResourceCollection.
     * @param c the &lt;code&gt;ResourceCollection&lt;/code&gt; to add.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>c</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>resources</name> = (<name>resources</name> == <name>null</name>) ? new <call><name>Resources</name><argument_list>()</argument_list></call> : <name>resources</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resources</name>.<name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the target count number for use as a Condition.
     * @param ell the long length to compare with.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setLength</name><parameter_list>(<param><decl><type><name>long</name></type> <name>ell</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>length</name> = new <call><name>Long</name><argument_list>(<argument><expr><name>ell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the comparison for use as a Condition.
     * @param w EnumeratedAttribute When.
     * @see org.apache.tools.ant.types.Comparison
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setWhen</name><parameter_list>(<param><decl><type><name>When</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setWhen</name><argument_list>(<argument><expr>(<name>Comparison</name>) <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the comparison for use as a Condition.
     * @param c Comparison.
     * @see org.apache.tools.ant.types.Comparison
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setWhen</name><parameter_list>(<param><decl><type><name>Comparison</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>when</name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the execution mode for working with files.
     * @param m the &lt;code&gt;FileMode&lt;/code&gt; to use.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setMode</name><parameter_list>(<param><decl><type><name>FileMode</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>mode</name></name> = <call><name><name>m</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the string whose length to get.
     * @param string &lt;code&gt;String&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>string</name></name> = <name>string</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>mode</name></name> = <name>STRING</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to trim in string mode. Default false.
     * @param trim &lt;code&gt;boolean&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setTrim</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>trim</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>trim</name></name> = <name>trim</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether strings will be trimmed. Default false.
     * @return boolean trim setting.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getTrim</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>trim</name> != <name>null</name> &amp;&amp; <call><name><name>trim</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the length task.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>ps</name> =<init> <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>(<name>property</name> != <name>null</name>)
            ? (<name>OutputStream</name>) new <call><name>PropertyOutputStream</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>property</name></expr></argument>)</argument_list></call>
            : (<name>OutputStream</name>) new <call><name>LogOutputStream</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>STRING</name>.<name>equals</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ps</name>.<name>print</name></name><argument_list>(<argument><expr><call><name>getLength</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>getTrim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ps</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>EACH</name>.<name>equals</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleResources</name><argument_list>(<argument><expr>new <call><name>EachHandler</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>ALL</name>.<name>equals</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleResources</name><argument_list>(<argument><expr>new <call><name>AllHandler</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Fulfill the condition contract.
     * @return true if the condition is true.
     * @throws BuildException if an error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>length</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>LENGTH_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Long</name></type> <name>ell</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>STRING</name>.<name>equals</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ell</name> = new <call><name>Long</name><argument_list>(<argument><expr><call><name>getLength</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>getTrim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>AccumHandler</name></type> <name>h</name> =<init> <expr>new <call><name>AccumHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>handleResources</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ell</name> = new <call><name>Long</name><argument_list>(<argument><expr><call><name><name>h</name>.<name>getAccum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><call><name><name>when</name>.<name>evaluate</name></name><argument_list>(<argument><expr><call><name><name>ell</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>string</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>resources</name> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"the string length function"
                    + " is incompatible with the file/resource length function"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr>!(<call><name><name>STRING</name>.<name>equals</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"the mode attribute is for use"
                    + " with the file/resource length function"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>resources</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!(<call><name><name>EACH</name>.<name>equals</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> || <call><name><name>ALL</name>.<name>equals</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"invalid mode setting for"
                    + " file/resource length function: \"" + <name>mode</name> + "\""</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <if>if <condition>(<expr><name>trim</name> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"the trim attribute is"
                    + " for use with the string length function only"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if></else></if>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"you must set either the string attribute"
                + " or specify one or more files using the file attribute or"
                + " nested resource collections"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleResources</name><parameter_list>(<param><decl><type><name>Handler</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resources</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr>!<call><name><name>r</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>r</name> + " does not exist"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>r</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>r</name> + " is a directory; length may not be meaningful"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>h</name>.<name>handle</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>h</name>.<name>complete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>getLength</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>t</name> ? <call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call> : <name>s</name>).<call><name>length</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** EnumeratedAttribute operation mode */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FileMode</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>MODES</name> =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>EACH</name></expr>, <expr><name>ALL</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Return the possible values for FileMode.
         * @return &lt;code&gt;String[]&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>MODES</name></expr>;</return>
        }</block></function>

    }</block></class>

    <comment type="javadoc">/**
     * EnumeratedAttribute for the when attribute.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>When</name> <super><extends>extends <name>Comparison</name></extends></super> <block>{
        <comment type="line">//extend Comparison; retain for BC only</comment>
    }</block></class>

    <class><specifier>private</specifier> <specifier>abstract</specifier> class <name>Handler</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>PrintStream</name></type> <name>ps</name></decl>;</decl_stmt>
        <constructor><name>Handler</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>ps</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>ps</name></name> = <name>ps</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <name>PrintStream</name></type> <name>getPs</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>ps</name></expr>;</return>
        }</block></function>

        <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>handle</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list>;</function_decl>

        <function><type><name>void</name></type> <name>complete</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>EachHandler</name> <super><extends>extends <name>Handler</name></extends></super> <block>{
        <constructor><name>EachHandler</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>ps</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>handle</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>getPs</name><argument_list>()</argument_list></call>.<call><name>print</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getPs</name><argument_list>()</argument_list></call>.<call><name>print</name><argument_list>(<argument><expr>" : "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//when writing to the log, we'll see what's happening:</comment>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> =<init> <expr><call><name><name>r</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>size</name> == <name><name>Resource</name>.<name>UNKNOWN_SIZE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getPs</name><argument_list>()</argument_list></call>.<call><name>println</name><argument_list>(<argument><expr>"unknown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>getPs</name><argument_list>()</argument_list></call>.<call><name>println</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
       }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>AccumHandler</name> <super><extends>extends <name>Handler</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>accum</name> =<init> <expr>0L</expr></init></decl>;</decl_stmt>

        <constructor><name>AccumHandler</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <constructor><specifier>protected</specifier> <name>AccumHandler</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>ps</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier>protected</specifier> <name>long</name></type> <name>getAccum</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>accum</name></expr>;</return>
        }</block></function>
        <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>handle</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> =<init> <expr><call><name><name>r</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>size</name> == <name><name>Resource</name>.<name>UNKNOWN_SIZE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Size unknown for " + <call><name><name>r</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>accum</name> += <name>size</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>AllHandler</name> <super><extends>extends <name>AccumHandler</name></extends></super> <block>{
        <constructor><name>AllHandler</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>ps</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><name>void</name></type> <name>complete</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>getPs</name><argument_list>()</argument_list></call>.<call><name>print</name><argument_list>(<argument><expr><call><name>getAccum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>super</name>.<name>complete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
