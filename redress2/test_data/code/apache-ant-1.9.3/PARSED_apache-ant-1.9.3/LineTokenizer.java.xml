<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\LineTokenizer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>

<comment type="javadoc">/**
 * class to tokenize the input as lines separated
 * by \r (mac style), \r\n (dos/windows style) or \n (unix style)
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>LineTokenizer</name> <super><extends>extends <name>ProjectComponent</name></extends>
    <implements>implements <name>Tokenizer</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NOT_A_CHAR</name> =<init> <expr>-2</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>lineEnd</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>     <name>pushed</name> =<init> <expr><name>NOT_A_CHAR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeDelims</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * attribute includedelims - whether to include
     * the line ending with the line, or to return
     * it in the posttoken
     * default false
     * @param includeDelims if true include /r and /n in the line
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludeDelims</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeDelims</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>includeDelims</name></name> = <name>includeDelims</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get the next line from the input
     *
     * @param in the input reader
     * @return the line excluding /r or /n, unless includedelims is set
     * @exception IOException if an error occurs reading
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getToken</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pushed</name> != <name>NOT_A_CHAR</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = <name>pushed</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pushed</name> = <name>NOT_A_CHAR</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>ch</name> == -1</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>lineEnd</name> = ""</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>line</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>state</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>ch</name> != -1</expr>)</condition> <block>{
            <if>if <condition>(<expr><name>state</name> == 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>ch</name> == '\r'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>state</name> = 1</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == '\n'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>lineEnd</name> = "\n"</expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>line</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>) <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>state</name> = 0</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ch</name> == '\n'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>lineEnd</name> = "\r\n"</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>pushed</name> = <name>ch</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lineEnd</name> = "\r"</expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
            }</block></else></if>
            <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>ch</name> == -1 &amp;&amp; <name>state</name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lineEnd</name> = "\r"</expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>includeDelims</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>line</name>.<name>append</name></name><argument_list>(<argument><expr><name>lineEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>line</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the line ending character(s) for the current line
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPostToken</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>includeDelims</name></expr>)</condition><then> <block>{
            <return>return <expr>""</expr>;</return>
        }</block></then></if>
        <return>return <expr><name>lineEnd</name></expr>;</return>
    }</block></function>

}</block></class>

</unit>
