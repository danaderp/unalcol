<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\java15\ProxyDiagnostics.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>java15</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<import>import <name><name>java</name>.<name>net</name>.<name>ProxySelector</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URI</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URISyntaxException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>Proxy</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>SocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<comment type="javadoc">/**
 * This class exists to create a string that tells diagnostics about the current
 * state of proxy diagnostics.
 * It does this in its toString operator.
 * Java1.5+ is needed to compile this class; its interface is classic typeless
 * Java.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>ProxyDiagnostics</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>destination</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>URI</name></type> <name>destURI</name></decl>;</decl_stmt>

    <comment type="javadoc">/** {@value} */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_DESTINATION</name> =<init> <expr>"http://ant.apache.org/"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * create a diagnostics binding for a specific URI
     * @param destination dest to bind to
     * @throws BuildException if the URI is malformed.
     */</comment>
    <constructor><specifier>public</specifier> <name>ProxyDiagnostics</name><parameter_list>(<param><decl><type><name>String</name></type> <name>destination</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>destination</name></name> = <name>destination</name></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><name><name>this</name>.<name>destURI</name></name> = new <call><name>URI</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>URISyntaxException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></constructor>

    <comment type="javadoc">/**
     * create a proxy diagnostics tool bound to
     * {@link #DEFAULT_DESTINATION}
     */</comment>
    <constructor><specifier>public</specifier> <name>ProxyDiagnostics</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>DEFAULT_DESTINATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the diagnostics for proxy information.
     * @return the information.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ProxySelector</name></type> <name>selector</name> =<init> <expr><call><name><name>ProxySelector</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>list</name> =<init> <expr><call><name><name>selector</name>.<name>select</name></name><argument_list>(<argument><expr><name>destURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>result</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>proxies</name> =<init> <expr><call><name><name>list</name>.<name>listIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>proxies</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> =<init> <expr>(<name>Proxy</name>) <call><name><name>proxies</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SocketAddress</name></type> <name>address</name> =<init> <expr><call><name><name>proxy</name>.<name>address</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>address</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"Direct connection\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>proxy</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>address</name> <name>instanceof</name> <name>InetSocketAddress</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>InetSocketAddress</name></type> <name>ina</name> =<init> <expr>(<name>InetSocketAddress</name>) <name>address</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>ina</name>.<name>getHostName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>ina</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>ina</name>.<name>isUnresolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>" [unresolved]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <decl_stmt><decl><type><name>InetAddress</name></type> <name>addr</name> =<init> <expr><call><name><name>ina</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>" ["</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>addr</name>.<name>getHostAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>']'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <return>return <expr><call><name><name>result</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
