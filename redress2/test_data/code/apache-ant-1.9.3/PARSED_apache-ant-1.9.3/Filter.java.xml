<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Filter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * Sets a token filter that is used by the file copy tasks
 * to do token substitution. Sets multiple tokens by
 * reading these from a file.
 *
 * @since Ant 1.1
 *
 * @ant.task category="filesystem"
 */</comment>
<class><specifier>public</specifier> class <name>Filter</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>filtersFile</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The token string without @ delimiters.
     * @param token token to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToken</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>token</name></name> = <name>token</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The string that should replace the token during filtered copies.
     * @param value token replace value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The file from which the filters must be read.
     * This file must be a formatted as a property file.
     *
     * @param filtersFile filter file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFiltersfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>filtersFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>filtersFile</name></name> = <name>filtersFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the task.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isFiltersFromFile</name> =<init>
            <expr><name>filtersFile</name> != <name>null</name> &amp;&amp; <name>token</name> == <name>null</name> &amp;&amp; <name>value</name> == <name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSingleFilter</name> =<init>
            <expr><name>filtersFile</name> == <name>null</name> &amp;&amp; <name>token</name> != <name>null</name> &amp;&amp; <name>value</name> != <name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name>isFiltersFromFile</name> &amp;&amp; !<name>isSingleFilter</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"both token and value parameters, or "
                                     + "only a filtersFile parameter is "
                                     + "required"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>isSingleFilter</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getGlobalFilterSet</name><argument_list>()</argument_list></call>.<call><name>addFilter</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>isFiltersFromFile</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>readFilters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Read the filters.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>readFilters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Reading filters from " + <name>filtersFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getGlobalFilterSet</name><argument_list>()</argument_list></call>.<call><name>readFiltersFromFile</name><argument_list>(<argument><expr><name>filtersFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
