<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\cvslib\CvsVersion.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>cvslib</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>AbstractCvsTask</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>

<comment type="javadoc">/**
 * this task allows to find out the client and the server version of a
 * CVS installation
 *
 * example usage :
 * &amp;lt;cvsversion
 * cvsRoot=&amp;quot;:pserver:anoncvs@cvs.apache.org:/home/cvspublic&amp;quot;
 * passfile=&amp;quot;c:/programme/cygwin/home/antoine/.cvspass&amp;quot;
 * clientversionproperty=&amp;quot;apacheclient&amp;quot;
 * serverversionproperty=&amp;quot;apacheserver&amp;quot;   /&amp;gt;
 *
 * the task can be used also in the API by calling its execute method,
 * then calling getServerVersion and/or getClientVersion
 *
 * @ant.task category="scm"
 * @since ant 1.6.1
 */</comment>
<class><specifier>public</specifier> class <name>CvsVersion</name> <super><extends>extends <name>AbstractCvsTask</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>VERSION_1_11_2</name> =<init> <expr>11102</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MULTIPLY</name> =<init> <expr>100</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>clientVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>serverVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>clientVersionProperty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>serverVersionProperty</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get the CVS client version
     * @return CVS client version
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getClientVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>clientVersion</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * Get the CVS server version
     * @return CVS server version
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getServerVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>serverVersion</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * Set a property where to store the CVS client version
     * @param clientVersionProperty  property for CVS client version
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClientVersionProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>clientVersionProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>clientVersionProperty</name></name> = <name>clientVersionProperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a property where to store the CVS server version
     * @param serverVersionProperty  property for CVS server version
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setServerVersionProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>serverVersionProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>serverVersionProperty</name></name> = <name>serverVersionProperty</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Find out if the server version supports log with S option
     * @return  boolean indicating if the server version supports log with S option
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsCvsLogWithSOption</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>serverVersion</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokenizer</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>serverVersion</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>counter</name> =<init> <expr><name>MULTIPLY</name> * <name>MULTIPLY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>version</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tokenizer</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr>!<call><name><name>Character</name>.<name>isDigit</name></name><argument_list>(<argument><expr><call><name><name>s</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <decl_stmt><decl><type><name>String</name></type> <name>s2</name> =<init> <expr><call><name><name>s</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>version</name> = <name>version</name> + <name>counter</name> * <call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>counter</name> == 1</expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>counter</name> = <name>counter</name> / <name>MULTIPLY</name></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr>(<name>version</name> &gt;= <name>VERSION_1_11_2</name>)</expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * the execute method running CvsVersion
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bos</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>setOutputStream</name></name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>berr</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>setErrorStream</name></name><argument_list>(<argument><expr><name>berr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setCommand</name><argument_list>(<argument><expr>"version"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>output</name> =<init> <expr><call><name><name>bos</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Received version response \"" + <name>output</name> + "\""</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>client</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>server</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cvs</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cachedVersion</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>haveReadAhead</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>haveReadAhead</name> || <call><name><name>st</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>currentToken</name> =<init> <expr><name>haveReadAhead</name> ? <name>cachedVersion</name> : <call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>haveReadAhead</name> = false</expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>currentToken</name>.<name>equals</name></name><argument_list>(<argument><expr>"Client:"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>client</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>currentToken</name>.<name>equals</name></name><argument_list>(<argument><expr>"Server:"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>server</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>currentToken</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"(CVS"</expr></argument>)</argument_list></call>
                       &amp;&amp; <call><name><name>currentToken</name>.<name>endsWith</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cvs</name> = <call><name><name>currentToken</name>.<name>length</name></name><argument_list>()</argument_list></call> == 5 ? "" : " " + <name>currentToken</name></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
            <if>if <condition>(<expr>!<name>client</name> &amp;&amp; !<name>server</name> &amp;&amp; <name>cvs</name> != <name>null</name>
                &amp;&amp; <name>cachedVersion</name> == <name>null</name> &amp;&amp; <call><name><name>st</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cachedVersion</name> = <call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>haveReadAhead</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>client</name> &amp;&amp; <name>cvs</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>st</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>clientVersion</name> = <call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call> + <name>cvs</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>client</name> = false</expr>;</expr_stmt>
                <expr_stmt><expr><name>cvs</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>server</name> &amp;&amp; <name>cvs</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>st</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>serverVersion</name> = <call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call> + <name>cvs</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>server</name> = false</expr>;</expr_stmt>
                <expr_stmt><expr><name>cvs</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>currentToken</name>.<name>equals</name></name><argument_list>(<argument><expr>"(client/server)"</expr></argument>)</argument_list></call>
                       &amp;&amp; <name>cvs</name> != <name>null</name> &amp;&amp; <name>cachedVersion</name> != <name>null</name>
                       &amp;&amp; !<name>client</name> &amp;&amp; !<name>server</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>client</name> = <name>server</name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><name>clientVersion</name> = <name>serverVersion</name> = <name>cachedVersion</name> + <name>cvs</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cachedVersion</name> = <name>cvs</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if>
        }</block></while>
        <if>if <condition>(<expr><name>clientVersionProperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>clientVersionProperty</name></expr></argument>, <argument><expr><name>clientVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>serverVersionProperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>serverVersionProperty</name></expr></argument>, <argument><expr><name>serverVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
