<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\BuildEvent.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>EventObject</name></name>;</import>

<comment type="javadoc">/**
 * Class representing an event occurring during a build. An
 * event is built by specifying either a project, a task or a target.
 * A project level event will only have a project reference;
 * a target level event will have project and target references;
 * a task level event will have project, target and task references.
 *
 */</comment>
<class><specifier>public</specifier> class <name>BuildEvent</name> <super><extends>extends <name>EventObject</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>4538050075952288486L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Project which emitted the event. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <comment type="javadoc">/** Target which emitted the event, if specified. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Target</name></type> <name>target</name></decl>;</decl_stmt>
    <comment type="javadoc">/** Task which emitted the event, if specified. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Task</name></type> <name>task</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Message associated with the event. This is only used for
     * "messageLogged" events.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The priority of the message, for "messageLogged" events.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>priority</name> =<init> <expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The exception associated with this event, if any.
     * This is only used for "messageLogged", "taskFinished", "targetFinished",
     * and "buildFinished" events.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Throwable</name></type> <name>exception</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a BuildEvent for a project level event.
     *
     * @param project the project that emitted the event.
     *                Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>BuildEvent</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>target</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>null</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a BuildEvent for a target level event.
     * The project associated with the event is derived
     * from the given target.
     *
     * @param target the target that emitted the event.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>BuildEvent</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <call><name><name>target</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>null</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a BuildEvent for a task level event.
     * The project and target associated with the event
     * are derived from the given task.
     *
     * @param task the task that emitted the event.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>BuildEvent</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>target</name></name> = <call><name><name>task</name>.<name>getOwningTarget</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets the message and priority associated with this event.
     * This is used for "messageLogged" events.
     *
     * @param message the message to be associated with this event.
     *                Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param priority the priority to be associated with this event,
     *                 as defined in the {@link Project Project} class.
     *
     * @see BuildListener#messageLogged(BuildEvent)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>message</name></name> = <name>message</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>priority</name></name> = <name>priority</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the exception associated with this event. This is used
     * for "messageLogged", "taskFinished", "targetFinished", and "buildFinished"
     * events.
     *
     * @param exception The exception to be associated with this event.
     *                  May be &lt;code&gt;null&lt;/code&gt;.
     *
     * @see BuildListener#messageLogged(BuildEvent)
     * @see BuildListener#taskFinished(BuildEvent)
     * @see BuildListener#targetFinished(BuildEvent)
     * @see BuildListener#buildFinished(BuildEvent)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setException</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>exception</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>exception</name></name> = <name>exception</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the project that fired this event.
     *
     * @return the project that fired this event
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the target that fired this event.
     *
     * @return the project that fired this event, or &lt;code&gt;null&lt;/code&gt;
     *          if this event is a project level event.
     */</comment>
    <function><type><specifier>public</specifier> <name>Target</name></type> <name>getTarget</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>target</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the task that fired this event.
     *
     * @return the task that fired this event, or &lt;code&gt;null&lt;/code&gt;
     *         if this event is a project or target level event.
     */</comment>
    <function><type><specifier>public</specifier> <name>Task</name></type> <name>getTask</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>task</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the logging message. This field will only be set
     * for "messageLogged" events.
     *
     * @return the message associated with this event, or &lt;code&gt;null&lt;/code&gt;
     *         if no message has been set.
     *
     * @see BuildListener#messageLogged(BuildEvent)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>message</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the priority of the logging message. This field will only
     * be set for "messageLogged" events. The meaning of this priority
     * is as specified by the constants in the {@link Project Project} class.
     *
     * @return the priority associated with this event.
     *
     * @see BuildListener#messageLogged(BuildEvent)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPriority</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>priority</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the exception that was thrown, if any. This field will only
     * be set for "messageLogged", "taskFinished", "targetFinished", and "buildFinished"
     * events.
     *
     * @return the exception associated with this exception, or
     *         &lt;code&gt;null&lt;/code&gt; if no exception has been set.
     *
     * @see BuildListener#messageLogged(BuildEvent)
     * @see BuildListener#taskFinished(BuildEvent)
     * @see BuildListener#targetFinished(BuildEvent)
     * @see BuildListener#buildFinished(BuildEvent)
     */</comment>
    <function><type><specifier>public</specifier> <name>Throwable</name></type> <name>getException</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>exception</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
