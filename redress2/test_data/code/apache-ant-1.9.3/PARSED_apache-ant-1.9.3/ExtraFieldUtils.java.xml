<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\zip\ExtraFieldUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipException</name></name>;</import>

<comment type="javadoc">/**
 * ZipExtraField related methods
 *
 */</comment>
<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF (bc)</comment>
<class><specifier>public</specifier> class <name>ExtraFieldUtils</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WORD</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Static registry of known extra fields.
     *
     * @since 1.1
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ZipShort</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>implementations</name></decl>;</decl_stmt>

    static <block>{
        <expr_stmt><expr><name>implementations</name> = new <call><name><name>ConcurrentHashMap</name><argument_list>&lt;<argument><name>ZipShort</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name><name>AsiExtraField</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name><name>JarMarker</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name><name>UnicodePathExtraField</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name><name>UnicodeCommentExtraField</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name><name>Zip64ExtendedInformationExtraField</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <comment type="javadoc">/**
     * Register a ZipExtraField implementation.
     *
     * &lt;p&gt;The given class must have a no-arg constructor and implement
     * the {@link ZipExtraField ZipExtraField interface}.&lt;/p&gt;
     * @param c the class to register
     *
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>register</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>ZipExtraField</name></type> <name>ze</name> =<init> <expr>(<name>ZipExtraField</name>) <call><name><name>c</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>implementations</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getHeaderId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ClassCastException</name></type> <name>cc</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>c</name> + " doesn\'t implement ZipExtraField"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>InstantiationException</name></type> <name>ie</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>c</name> + " is not a concrete class"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>ie</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>c</name> + "\'s no-arg constructor is not public"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Create an instance of the appropriate ExtraField, falls back to
     * {@link UnrecognizedExtraField UnrecognizedExtraField}.
     * @param headerId the header identifier
     * @return an instance of the appropriate ExtraField
     * @exception InstantiationException if unable to instantiate the class
     * @exception IllegalAccessException if not allowed to instantiate the class
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ZipExtraField</name></type> <name>createExtraField</name><parameter_list>(<param><decl><type><name>ZipShort</name></type> <name>headerId</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name> =<init> <expr><call><name><name>implementations</name>.<name>get</name></name><argument_list>(<argument><expr><name>headerId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>c</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>ZipExtraField</name>) <call><name><name>c</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>UnrecognizedExtraField</name></type> <name>u</name> =<init> <expr>new <call><name>UnrecognizedExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>u</name>.<name>setHeaderId</name></name><argument_list>(<argument><expr><name>headerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>u</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Split the array into ExtraFields and populate them with the
     * given data as local file data, throwing an exception if the
     * data cannot be parsed.
     * @param data an array of bytes as it appears in local file data
     * @return an array of ExtraFields
     * @throws ZipException on error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ZipExtraField</name><index>[]</index></type> <name>parse</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ZipException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>parse</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name><name>UnparseableExtraField</name>.<name>THROW</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Split the array into ExtraFields and populate them with the
     * given data, throwing an exception if the data cannot be parsed.
     * @param data an array of bytes
     * @param local whether data originates from the local file data
     * or the central directory
     * @return an array of ExtraFields
     * @since 1.1
     * @throws ZipException on error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ZipExtraField</name><index>[]</index></type> <name>parse</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>local</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ZipException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>parse</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><name><name>UnparseableExtraField</name>.<name>THROW</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Split the array into ExtraFields and populate them with the
     * given data.
     * @param data an array of bytes
     * @param local whether data originates from the local file data
     * or the central directory
     * @param onUnparseableData what to do if the extra field data
     * cannot be parsed.
     * @return an array of ExtraFields
     * @throws ZipException on error
     * @since Ant 1.8.1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ZipExtraField</name><index>[]</index></type> <name>parse</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>local</name></decl></param>,
                                        <param><decl><type><name>UnparseableExtraField</name></type> <name>onUnparseableData</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ZipException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ZipExtraField</name></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ZipExtraField</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <label><name>LOOP</name>:</label>
        <while>while <condition>(<expr><name>start</name> &lt;= <name><name>data</name>.<name>length</name></name> - <name>WORD</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>ZipShort</name></type> <name>headerId</name> =<init> <expr>new <call><name>ZipShort</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> =<init> <expr>(new <call><name>ZipShort</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>start</name> + 2</expr></argument>)</argument_list></call>).<call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>start</name> + <name>WORD</name> + <name>length</name> &gt; <name><name>data</name>.<name>length</name></name></expr>)</condition><then> <block>{
                <switch>switch<condition>(<expr><call><name><name>onUnparseableData</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name><name>UnparseableExtraField</name>.<name>THROW_KEY</name></name></expr>:
                    <throw>throw <expr>new <call><name>ZipException</name><argument_list>(<argument><expr>"bad extra field starting at "
                                           + <name>start</name> + ".  Block length of "
                                           + <name>length</name> + " bytes exceeds remaining"
                                           + " data of "
                                           + (<name><name>data</name>.<name>length</name></name> - <name>start</name> - <name>WORD</name>)
                                           + " bytes."</expr></argument>)</argument_list></call></expr>;</throw>
                </case><case>case <expr><name><name>UnparseableExtraField</name>.<name>READ_KEY</name></name></expr>:
                    <decl_stmt><decl><type><name>UnparseableExtraFieldData</name></type> <name>field</name> =<init>
                        <expr>new <call><name>UnparseableExtraFieldData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>local</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>field</name>.<name>parseFromLocalFileData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
                                                     <argument><expr><name><name>data</name>.<name>length</name></name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>field</name>.<name>parseFromCentralDirectoryData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
                                                            <argument><expr><name><name>data</name>.<name>length</name></name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//$FALL-THROUGH$</comment>
                </case><case>case <expr><name><name>UnparseableExtraField</name>.<name>SKIP_KEY</name></name></expr>:
                    <comment type="line">// since we cannot parse the data we must assume</comment>
                    <comment type="line">// the extra field consumes the whole rest of the</comment>
                    <comment type="line">// available data</comment>
                    <break>break LOOP;</break>
                </case><default>default:
                    <throw>throw <expr>new <call><name>ZipException</name><argument_list>(<argument><expr>"unknown UnparseableExtraField key: "
                                           + <call><name><name>onUnparseableData</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </default>}</block></switch>
            }</block></then></if>
            <try>try <block>{
                <decl_stmt><decl><type><name>ZipExtraField</name></type> <name>ze</name> =<init> <expr><call><name>createExtraField</name><argument_list>(<argument><expr><name>headerId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>local</name>
                    || !(<name>ze</name> <name>instanceof</name> <name>CentralDirectoryParsingZipExtraField</name>)</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>ze</name>.<name>parseFromLocalFileData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>start</name> + <name>WORD</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr>((<name>CentralDirectoryParsingZipExtraField</name>) <name>ze</name>)
                        .<call><name>parseFromCentralDirectoryData</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>start</name> + <name>WORD</name></expr></argument>,
                                                       <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>InstantiationException</name></type> <name>ie</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>ZipException</name><argument_list>(<argument><expr><call><name><name>ie</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>iae</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>ZipException</name><argument_list>(<argument><expr><call><name><name>iae</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><name>start</name> += (<name>length</name> + <name>WORD</name>)</expr>;</expr_stmt>
        }</block></while>

        <decl_stmt><decl><type><name>ZipExtraField</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>ZipExtraField</name><index>[<expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>v</name>.<name>toArray</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Merges the local file data fields of the given ZipExtraFields.
     * @param data an array of ExtraFiles
     * @return an array of bytes
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>mergeLocalFileDataData</name><parameter_list>(<param><decl><type><name><name>ZipExtraField</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>lastIsUnparseableHolder</name> =<init> <expr><name><name>data</name>.<name>length</name></name> &gt; 0
            &amp;&amp; <name><name>data</name><index>[<expr><name><name>data</name>.<name>length</name></name> - 1</expr>]</index></name> <name>instanceof</name> <name>UnparseableExtraFieldData</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>regularExtraFieldCount</name> =<init>
            <expr><name>lastIsUnparseableHolder</name> ? <name><name>data</name>.<name>length</name></name> - 1 : <name><name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>sum</name> =<init> <expr><name>WORD</name> * <name>regularExtraFieldCount</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ZipExtraField</name></type> <name>element</name> :<range> <expr><name>data</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><name>sum</name> += <call><name><name>element</name>.<name>getLocalFileDataLength</name></name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>sum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>regularExtraFieldCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getHeaderId</name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getLocalFileDataLength</name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>start</name> + 2</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>local</name> =<init> <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getLocalFileDataData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>start</name> + <name>WORD</name></expr></argument>, <argument><expr><name><name>local</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> += (<name><name>local</name>.<name>length</name></name> + <name>WORD</name>)</expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>lastIsUnparseableHolder</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>local</name> =<init> <expr><name><name>data</name><index>[<expr><name><name>data</name>.<name>length</name></name> - 1</expr>]</index></name>.<call><name>getLocalFileDataData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>local</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Merges the central directory fields of the given ZipExtraFields.
     * @param data an array of ExtraFields
     * @return an array of bytes
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>mergeCentralDirectoryData</name><parameter_list>(<param><decl><type><name><name>ZipExtraField</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>lastIsUnparseableHolder</name> =<init> <expr><name><name>data</name>.<name>length</name></name> &gt; 0
            &amp;&amp; <name><name>data</name><index>[<expr><name><name>data</name>.<name>length</name></name> - 1</expr>]</index></name> <name>instanceof</name> <name>UnparseableExtraFieldData</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>regularExtraFieldCount</name> =<init>
            <expr><name>lastIsUnparseableHolder</name> ? <name><name>data</name>.<name>length</name></name> - 1 : <name><name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>sum</name> =<init> <expr><name>WORD</name> * <name>regularExtraFieldCount</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ZipExtraField</name></type> <name>element</name> :<range> <expr><name>data</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><name>sum</name> += <call><name><name>element</name>.<name>getCentralDirectoryLength</name></name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>sum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>regularExtraFieldCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getHeaderId</name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getCentralDirectoryLength</name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>start</name> + 2</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>local</name> =<init> <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getCentralDirectoryData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>start</name> + <name>WORD</name></expr></argument>, <argument><expr><name><name>local</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> += (<name><name>local</name>.<name>length</name></name> + <name>WORD</name>)</expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>lastIsUnparseableHolder</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>local</name> =<init> <expr><name><name>data</name><index>[<expr><name><name>data</name>.<name>length</name></name> - 1</expr>]</index></name>.<call><name>getCentralDirectoryData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>local</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * "enum" for the possible actions to take if the extra field
     * cannot be parsed.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>UnparseableExtraField</name> <block>{
        <comment type="javadoc">/**
         * Key for "throw an exception" action.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>THROW_KEY</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * Key for "skip" action.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SKIP_KEY</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * Key for "read" action.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>READ_KEY</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Throw an exception if field cannot be parsed.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UnparseableExtraField</name></type> <name>THROW</name>
            =<init> <expr>new <call><name>UnparseableExtraField</name><argument_list>(<argument><expr><name>THROW_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Skip the extra field entirely and don't make its data
         * available - effectively removing the extra field data.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UnparseableExtraField</name></type> <name>SKIP</name>
            =<init> <expr>new <call><name>UnparseableExtraField</name><argument_list>(<argument><expr><name>SKIP_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Read the extra field data into an instance of {@link
         * UnparseableExtraFieldData UnparseableExtraFieldData}.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UnparseableExtraField</name></type> <name>READ</name>
            =<init> <expr>new <call><name>UnparseableExtraField</name><argument_list>(<argument><expr><name>READ_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>key</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>UnparseableExtraField</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>key</name> = <name>k</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Key of the action to take.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>key</name></expr>;</return> }</block></function>
    }</block></class>
}</block></class>
</unit>
