<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Expand.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PatternSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectorUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>IdentityMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>

<comment type="javadoc">/**
 * Unzip a file.
 *
 * @since Ant 1.1
 *
 * @ant.task category="packaging"
 *           name="unzip"
 *           name="unjar"
 *           name="unwar"
 */</comment>
<class><specifier>public</specifier> class <name>Expand</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUFFER_SIZE</name> =<init> <expr>1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dest</name></decl>;</decl_stmt> <comment type="line">//req</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>source</name></decl>;</decl_stmt> <comment type="line">// req</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>overwrite</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Mapper</name></type> <name>mapperElement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>PatternSet</name></argument>&gt;</argument_list></name></type> <name>patternsets</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>PatternSet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Union</name></type> <name>resources</name> =<init> <expr>new <call><name>Union</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>resourcesSpecified</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnEmptyArchive</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>stripAbsolutePathSpec</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>scanForUnicodeExtraFields</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NATIVE_ENCODING</name> =<init> <expr>"native-encoding"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>encoding</name> =<init> <expr>"UTF8"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Error message when more that one mapper is defined */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_MULTIPLE_MAPPERS</name> =<init> <expr>"Cannot define more than one mapper"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether try ing to expand an empty archive would be an error.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnEmptyArchive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnEmptyArchive</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether try ing to expand an empty archive would be an error.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFailOnEmptyArchive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>failOnEmptyArchive</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Do the work.
     *
     * @exception BuildException Thrown in unrecoverable error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>"expand".<call><name>equals</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"!! expand is deprecated. Use unzip instead. !!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>source</name> == <name>null</name> &amp;&amp; !<name>resourcesSpecified</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"src attribute and/or resources must be "
                                     + "specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>dest</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Dest attribute must be specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>dest</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>dest</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Dest must be a directory."</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>source</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>source</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Src must not be a directory."
                    + " Use nested filesets instead."</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>source</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"src '" + <name>source</name> + "' doesn't exist."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>source</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"src '" + <name>source</name> + "' cannot be read."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>expandFile</name><argument_list>(<argument><expr><name>FILE_UTILS</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if>
        }</block></then></if>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resources</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr>!<call><name><name>r</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Skipping '" + <call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call> + "' because it doesn't exist."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <decl_stmt><decl><type><name>FileProvider</name></type> <name>fp</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fp</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>expandFile</name><argument_list>(<argument><expr><name>FILE_UTILS</name></expr></argument>, <argument><expr><call><name><name>fp</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>expandResource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * This method is to be overridden by extending unarchival tasks.
     *
     * @param fileUtils the fileUtils
     * @param srcF      the source file
     * @param dir       the destination directory
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>expandFile</name><parameter_list>(<param><decl><type><name>FileUtils</name></type> <name>fileUtils</name></decl></param>, <param><decl><type><name>File</name></type> <name>srcF</name></decl></param>, <param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Expanding: " + <name>srcF</name> + " into " + <name>dir</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapper</name> =<init> <expr><call><name>getMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>srcF</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to expand "
                    + <name>srcF</name>
                    + " as the file does not exist"</expr></argument>,
                    <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><name>zf</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><name>srcF</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>scanForUnicodeExtraFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>empty</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>ZipEntry</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>zf</name>.<name>getEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><name>empty</name> = false</expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"extracting " + <call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name>extractFile</name><argument_list>(<argument><expr><name>fileUtils</name></expr></argument>, <argument><expr><name>srcF</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
                                <argument><expr><name>is</name> = <call><name><name>zf</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>ze</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></while>
            <if>if <condition>(<expr><name>empty</name> &amp;&amp; <call><name>getFailOnEmptyArchive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"archive '" + <name>srcF</name> + "' is empty"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"expand complete"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Error while expanding " + <call><name><name>srcF</name>.<name>getPath</name></name><argument_list>()</argument_list></call>
                + "\n" + <call><name><name>ioe</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>ZipFile</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * This method is to be overridden by extending unarchival tasks.
     *
     * @param srcR      the source resource
     * @param dir       the destination directory
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>expandResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>srcR</name></decl></param>, <param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"only filesystem based resources are"
                                 + " supported by this task."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * get a mapper for a file
     * @return a filenamemapper for a file
     */</comment>
    <function><type><specifier>protected</specifier> <name>FileNameMapper</name></type> <name>getMapper</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapper</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mapperElement</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mapper</name> = <call><name><name>mapperElement</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>mapper</name> = new <call><name>IdentityMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>mapper</name></expr>;</return>
    }</block></function>

    <comment type="line">// CheckStyle:ParameterNumberCheck OFF - bc</comment>
    <comment type="javadoc">/**
     * extract a file to a directory
     * @param fileUtils             a fileUtils object
     * @param srcF                  the source file
     * @param dir                   the destination directory
     * @param compressedInputStream the input stream
     * @param entryName             the name of the entry
     * @param entryDate             the date of the entry
     * @param isDirectory           if this is true the entry is a directory
     * @param mapper                the filename mapper to use
     * @throws IOException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>extractFile</name><parameter_list>(<param><decl><type><name>FileUtils</name></type> <name>fileUtils</name></decl></param>, <param><decl><type><name>File</name></type> <name>srcF</name></decl></param>, <param><decl><type><name>File</name></type> <name>dir</name></decl></param>,
                               <param><decl><type><name>InputStream</name></type> <name>compressedInputStream</name></decl></param>,
                               <param><decl><type><name>String</name></type> <name>entryName</name></decl></param>, <param><decl><type><name>Date</name></type> <name>entryDate</name></decl></param>,
                               <param><decl><type><name>boolean</name></type> <name>isDirectory</name></decl></param>, <param><decl><type><name>FileNameMapper</name></type> <name>mapper</name></decl></param>)</parameter_list>
                               <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>stripAbsolutePathSpec</name> &amp;&amp; <call><name><name>entryName</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0
            &amp;&amp; (<call><name><name>entryName</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> == <name><name>File</name>.<name>separatorChar</name></name>
                || <call><name><name>entryName</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> == '/'
                || <call><name><name>entryName</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> == '\\')</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"stripped absolute path spec from " + <name>entryName</name></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>entryName</name> = <call><name><name>entryName</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>patternsets</name> != <name>null</name> &amp;&amp; <call><name><name>patternsets</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>entryName</name>.<name>replace</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call>
                .<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>included</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includePatterns</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludePatterns</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>patternsets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>v</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>v</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>v</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>PatternSet</name></type> <name>p</name> =<init> <expr><call><name><name>patternsets</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>incls</name> =<init> <expr><call><name><name>p</name>.<name>getIncludePatterns</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>incls</name> == <name>null</name> || <name><name>incls</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
                    <comment type="line">// no include pattern implicitly means includes="**"</comment>
                    <expr_stmt><expr><name>incls</name> = new <name><name>String</name><index>[]</index></name> <block>{<expr>"**"</expr>}</block></expr>;</expr_stmt>
                }</block></then></if>

                <for>for (<init><decl><type><name>int</name></type> <name>w</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>w</name> &lt; <name><name>incls</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>w</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>pattern</name> =<init> <expr><name><name>incls</name><index>[<expr><name>w</name></expr>]</index></name>.<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call>
                        .<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>pattern</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>pattern</name> += "**"</expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>includePatterns</name>.<name>add</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>

                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>excls</name> =<init> <expr><call><name><name>p</name>.<name>getExcludePatterns</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>excls</name> != <name>null</name></expr>)</condition><then> <block>{
                    <for>for (<init><decl><type><name>int</name></type> <name>w</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>w</name> &lt; <name><name>excls</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>w</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>pattern</name> =<init> <expr><name><name>excls</name><index>[<expr><name>w</name></expr>]</index></name>
                            .<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call>
                            .<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>pattern</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>pattern</name> += "**"</expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><call><name><name>excludePatterns</name>.<name>add</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></then></if>
            }</block></for>

            <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iter</name> =<init> <expr><call><name><name>includePatterns</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                 <condition><expr>!<name>included</name> &amp;&amp; <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>pattern</name> =<init> <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>included</name> = <call><name><name>SelectorUtils</name>.<name>matchPath</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iter</name> =<init> <expr><call><name><name>excludePatterns</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                 <condition><expr><name>included</name> &amp;&amp; <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>pattern</name> =<init> <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>included</name> = !<call><name><name>SelectorUtils</name>.<name>matchPath</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <if>if <condition>(<expr>!<name>included</name></expr>)</condition><then> <block>{
                <comment type="line">//Do not process this file</comment>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"skipping " + <name>entryName</name>
                    + " as it is excluded or not included."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>mappedNames</name> =<init> <expr><call><name><name>mapper</name>.<name>mapFileName</name></name><argument_list>(<argument><expr><name>entryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mappedNames</name> == <name>null</name> || <name><name>mappedNames</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mappedNames</name> = new <name><name>String</name><index>[]</index></name> <block>{<expr><name>entryName</name></expr>}</block></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name><name>fileUtils</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>mappedNames</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr>!<name>overwrite</name> &amp;&amp; <call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call>
                &amp;&amp; <call><name><name>f</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>entryDate</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Skipping " + <name>f</name> + " as it is up-to-date"</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"expanding " + <name>entryName</name> + " to " + <name>f</name></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// create intermediary directories - sometimes zip don't add them</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>dirF</name> =<init> <expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dirF</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>dirF</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>isDirectory</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>f</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>length</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>fos</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <while>while <condition>(<expr>(<name>length</name> =
                            <call><name><name>compressedInputStream</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition> <block>{
                        <expr_stmt><expr><call><name><name>fos</name>.<name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></while>

                    <expr_stmt><expr><call><name><name>fos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fos</name> = <name>null</name></expr>;</expr_stmt>
                }</block> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>fileUtils</name>.<name>setFileLastModified</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name><name>entryDate</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>FileNotFoundException</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Unable to expand to file " + <call><name><name>f</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>ex</name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function>
    <comment type="line">// CheckStyle:ParameterNumberCheck ON</comment>

    <comment type="javadoc">/**
     * Set the destination directory. File will be unzipped into the
     * destination directory.
     *
     * @param d Path to the directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDest</name><parameter_list>(<param><decl><type><name>File</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dest</name></name> = <name>d</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the path to zip-file.
     *
     * @param s Path to zip-file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrc</name><parameter_list>(<param><decl><type><name>File</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>source</name></name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Should we overwrite files in dest, even if they are newer than
     * the corresponding entries in the archive?
     * @param b a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOverwrite</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>overwrite</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a patternset.
     * @param set a pattern set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPatternset</name><parameter_list>(<param><decl><type><name>PatternSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>patternsets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a fileset
     * @param set a file set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a resource collection.
     * @param rc a resource collection.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>resourcesSpecified</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resources</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Defines the mapper to map source entries to destination files.
     * @return a mapper to be configured
     * @exception BuildException if more than one mapper is defined
     * @since Ant1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Mapper</name></type> <name>createMapper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>mapperElement</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ERROR_MULTIPLE_MAPPERS</name></expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>mapperElement</name> = new <call><name>Mapper</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>mapperElement</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A nested filenamemapper
     * @param fileNameMapper the mapper to add
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createMapper</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the encoding to assume for file names and comments.
     *
     * &lt;p&gt;Set to &lt;code&gt;native-encoding&lt;/code&gt; if you want your
     * platform's native encoding, defaults to UTF8.&lt;/p&gt;
     * @param encoding the name of the character encoding
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>internalSetEncoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Supports grand-children that want to support the attribute
     * where the child-class doesn't (i.e. Unzip in the compress
     * Antlib).
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>internalSetEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>NATIVE_ENCODING</name>.<name>equals</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>encoding</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>encoding</name></name> = <name>encoding</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getEncoding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>encoding</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Whether leading path separators should be stripped.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStripAbsolutePathSpec</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>stripAbsolutePathSpec</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether unicode extra fields will be used if present.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setScanForUnicodeExtraFields</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>internalSetScanForUnicodeExtraFields</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Supports grand-children that want to support the attribute
     * where the child-class doesn't (i.e. Unzip in the compress
     * Antlib).
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>internalSetScanForUnicodeExtraFields</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>scanForUnicodeExtraFields</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getScanForUnicodeExtraFields</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>scanForUnicodeExtraFields</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
