<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ManifestTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Testcase for the Manifest class used in the jar task.
 *
 */</comment>
<class><specifier>public</specifier> class <name>ManifestTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EXPANDED_MANIFEST</name>
        =<init> <expr>"src/etc/testcases/taskdefs/manifests/META-INF/MANIFEST.MF"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LONG_LINE</name>
        =<init> <expr>"AReallyLongLineToTestLineBreakingInManifests-ACapabilityWhich" +
          "IsSureToLeadToHundredsOfQuestionsAboutWhyAntMungesManifests" +
          "OfCourseTheAnswerIsThatIsWhatTheSpecRequiresAndIfAnythingHas" +
          "AProblemWithThatItIsNotABugInAnt"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LONG_70_NAME</name> 
        =<init> <expr>"ThisNameIsJustSeventyCharactersWhichIsAllowedAccordingToTheSpecsFiller"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LONG_68_NAME</name> 
        =<init> <expr>"ThisNameIsJustSixtyEightCharactersWhichIsAllowedAccordingToTheSpecsX"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NOT_LONG_NAME</name> 
        =<init> <expr>"NameIsJustUnderSeventyCharactersWhichIsAllowedAccordingTheSpec"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VALUE</name> =<init> <expr>"NOT_LONG"</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ManifestTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/manifest.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"clean"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Empty manifest - is OK
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ManifestException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Manifest</name></type> <name>manifest</name> =<init> <expr><call><name>getManifest</name><argument_list>(<argument><expr><name>EXPANDED_MANIFEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>version</name> =<init> <expr><call><name><name>manifest</name>.<name>getManifestVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Manifest was not created with correct version - "</expr></argument>, <argument><expr>"1.0"</expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Simple Manifest with version 2.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ManifestException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Manifest</name></type> <name>manifest</name> =<init> <expr><call><name>getManifest</name><argument_list>(<argument><expr><name>EXPANDED_MANIFEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>version</name> =<init> <expr><call><name><name>manifest</name>.<name>getManifestVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Manifest was not created with correct version - "</expr></argument>, <argument><expr>"2.0"</expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Malformed manifest - no : on the line
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test3"</expr></argument>, <argument><expr>"Manifest is invalid - no colon on header line"</expr></argument>,
                                       <argument><expr>"Invalid Manifest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Malformed manifest - starts with continuation line
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test4</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test4"</expr></argument>, <argument><expr>"Manifest is invalid - section starts with continuation line"</expr></argument>,
                                       <argument><expr>"Invalid Manifest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></function>

    <comment type="javadoc">/**
     * Malformed manifest - Name attribute in main section
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test5</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>output</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasWarning</name> =<init> <expr><call><name><name>output</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"Manifest warning: \"Name\" attributes should not occur in the main section"</expr></argument>)</argument_list></call> != -1</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Expected warning about Name in main section"</expr></argument>, <argument><expr><name>hasWarning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * New Section not starting with Name attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test6</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test6"</expr></argument>, <argument><expr>"Manifest is invalid - section starts with incorrect attribute"</expr></argument>,
                                       <argument><expr>"Invalid Manifest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>output</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasWarning</name> =<init> <expr><call><name><name>output</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"Manifest sections should start with a \"Name\" attribute"</expr></argument>)</argument_list></call> != -1</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Expected warning about section not starting with Name: attribute"</expr></argument>, <argument><expr><name>hasWarning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * From attribute is illegal
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test7</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test7"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>hasWarning</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr><name><name>Manifest</name>.<name>ERROR_FROM_FORBIDDEN</name></name></expr></argument>)</argument_list></call> != -1</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Expected warning about From: attribute"</expr></argument>, <argument><expr><name>hasWarning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inline manifest - OK
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test8</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Manifest</name></type> <name>manifest</name> =<init> <expr><call><name>getManifest</name><argument_list>(<argument><expr><name>EXPANDED_MANIFEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Manifest</name>.<name>Section</name></name></type> <name>mainSection</name> =<init> <expr><call><name><name>manifest</name>.<name>getMainSection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>classpath</name> =<init> <expr><call><name><name>mainSection</name>.<name>getAttributeValue</name></name><argument_list>(<argument><expr>"class-path"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Class-Path attribute was not set correctly - "</expr></argument>, <argument><expr>"fubar"</expr></argument>, <argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Manifest</name>.<name>Section</name></name></type> <name>testSection</name> =<init> <expr><call><name><name>manifest</name>.<name>getSection</name></name><argument_list>(<argument><expr>"Test"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>testAttr</name> =<init> <expr><call><name><name>testSection</name>.<name>getAttributeValue</name></name><argument_list>(<argument><expr>"TestAttr"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TestAttr attribute was not set correctly - "</expr></argument>, <argument><expr>"Test"</expr></argument>, <argument><expr><name>testAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inline manifest - Invalid since has a Name attribute in the section element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test9</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test9"</expr></argument>, <argument><expr>"Construction is invalid - Name attribute should not be used"</expr></argument>,
                                       <argument><expr>"Specify the section name using the \"name\" attribute of the &lt;section&gt; element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inline manifest - Invalid attribute without name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test10</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test10"</expr></argument>, <argument><expr>"Attribute has no name"</expr></argument>,
                                       <argument><expr>"Attributes must have name and value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inline manifest - Invalid attribute without value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test11</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test11"</expr></argument>, <argument><expr>"Attribute has no value"</expr></argument>,
                                       <argument><expr>"Attributes must have name and value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inline manifest - Invalid attribute without value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test12</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test12"</expr></argument>, <argument><expr>"Section with no name"</expr></argument>,
                                       <argument><expr>"Sections must have a name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inline manifest - Duplicate attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test13</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test13"</expr></argument>, <argument><expr>"Duplicate Attribute"</expr></argument>,
                                       <argument><expr>"The attribute \"Test\" may not occur more than once in the same section"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inline manifest - OK since classpath entries can be duplicated.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test14</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test14"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Manifest</name></type> <name>manifest</name> =<init> <expr><call><name>getManifest</name><argument_list>(<argument><expr><name>EXPANDED_MANIFEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Manifest</name>.<name>Section</name></name></type> <name>mainSection</name> =<init> <expr><call><name><name>manifest</name>.<name>getMainSection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>classpath</name> =<init> <expr><call><name><name>mainSection</name>.<name>getAttributeValue</name></name><argument_list>(<argument><expr>"class-path"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Class-Path attribute was not set correctly - "</expr></argument>,
            <argument><expr>"Test1 Test2 Test3 Test4"</expr></argument>, <argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tets long line wrapping
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLongLine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.longline"</expr></argument>, <argument><expr><name>LONG_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.long68name"</expr></argument> , <argument><expr><name>LONG_68_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.long70name"</expr></argument> , <argument><expr><name>LONG_70_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.notlongname"</expr></argument> , <argument><expr><name>NOT_LONG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.value"</expr></argument>, <argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testLongLine"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name></type> <name>manifest</name> =<init> <expr><call><name>getManifest</name><argument_list>(<argument><expr><name>EXPANDED_MANIFEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Manifest</name>.<name>Section</name></name></type> <name>mainSection</name> =<init> <expr><call><name><name>manifest</name>.<name>getMainSection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>classpath</name> =<init> <expr><call><name><name>mainSection</name>.<name>getAttributeValue</name></name><argument_list>(<argument><expr>"class-path"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Class-Path attribute was not set correctly - "</expr></argument>,
            <argument><expr><name>LONG_LINE</name></expr></argument>, <argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name><name>mainSection</name>.<name>getAttributeValue</name></name><argument_list>(<argument><expr><name>LONG_68_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"LONG_68_NAME_VALUE_MISMATCH"</expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name><name>mainSection</name>.<name>getAttributeValue</name></name><argument_list>(<argument><expr><name>LONG_70_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"LONG_70_NAME_VALUE_MISMATCH"</expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name><name>mainSection</name>.<name>getAttributeValue</name></name><argument_list>(<argument><expr><name>NOT_LONG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"NOT_LONG_NAME_VALUE_MISMATCH"</expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>FileReader</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EXPANDED_MANIFEST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Set</name></type> <name>set</name> =<init> <expr>new <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>read</name> =<init> <expr><call><name><name>in</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>read</name> != <name>null</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name><name>set</name>.<name>add</name></name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>read</name> = <call><name><name>in</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Manifest file should have contained string "</expr></argument>, <argument><expr><call><name><name>set</name>
                .<name>remove</name></name><argument_list>(<argument><expr>" NOT_LONG"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Manifest file should have contained string "</expr></argument>, <argument><expr><call><name><name>set</name>
                .<name>remove</name></name><argument_list>(<argument><expr>" NG"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Manifest file should have contained string "</expr></argument>, <argument><expr><call><name><name>set</name>
                .<name>remove</name></name><argument_list>(<argument><expr><name>LONG_70_NAME</name> + ": "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Manifest file should have contained string "</expr></argument>, <argument><expr><call><name><name>set</name>
                .<name>remove</name></name><argument_list>(<argument><expr><name>NOT_LONG_NAME</name> + ": NOT_LO"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests ordering of sections
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrder1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testOrder1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name></type> <name>manifest</name> =<init> <expr><call><name>getManifest</name><argument_list>(<argument><expr><name>EXPANDED_MANIFEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>manifest</name>.<name>getSectionNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>section1</name> =<init> <expr>(<name>String</name>)<call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>section2</name> =<init> <expr>(<name>String</name>)<call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"First section name unexpected"</expr></argument>, <argument><expr>"Test1"</expr></argument>, <argument><expr><name>section1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Second section name unexpected"</expr></argument>, <argument><expr>"Test2"</expr></argument>, <argument><expr><name>section2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Manifest</name>.<name>Section</name></name></type> <name>section</name> =<init> <expr><call><name><name>manifest</name>.<name>getSection</name></name><argument_list>(<argument><expr>"Test1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>e</name> = <call><name><name>section</name>.<name>getAttributeKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>attr1Key</name> =<init> <expr>(<name>String</name>)<call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>attr2Key</name> =<init> <expr>(<name>String</name>)<call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>attr1</name> =<init> <expr><call><name><name>section</name>.<name>getAttribute</name></name><argument_list>(<argument><expr><name>attr1Key</name></expr></argument>)</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>attr2</name> =<init> <expr><call><name><name>section</name>.<name>getAttribute</name></name><argument_list>(<argument><expr><name>attr2Key</name></expr></argument>)</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"First attribute name unexpected"</expr></argument>, <argument><expr>"TestAttr1"</expr></argument>, <argument><expr><name>attr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Second attribute name unexpected"</expr></argument>, <argument><expr>"TestAttr2"</expr></argument>, <argument><expr><name>attr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests ordering of sections
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrder2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testOrder2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name></type> <name>manifest</name> =<init> <expr><call><name>getManifest</name><argument_list>(<argument><expr><name>EXPANDED_MANIFEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>manifest</name>.<name>getSectionNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>section1</name> =<init> <expr>(<name>String</name>)<call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>section2</name> =<init> <expr>(<name>String</name>)<call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"First section name unexpected"</expr></argument>, <argument><expr>"Test2"</expr></argument>, <argument><expr><name>section1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Second section name unexpected"</expr></argument>, <argument><expr>"Test1"</expr></argument>, <argument><expr><name>section2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Manifest</name>.<name>Section</name></name></type> <name>section</name> =<init> <expr><call><name><name>manifest</name>.<name>getSection</name></name><argument_list>(<argument><expr>"Test1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>e</name> = <call><name><name>section</name>.<name>getAttributeKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>attr1Key</name> =<init> <expr>(<name>String</name>)<call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>attr2Key</name> =<init> <expr>(<name>String</name>)<call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>attr1</name> =<init> <expr><call><name><name>section</name>.<name>getAttribute</name></name><argument_list>(<argument><expr><name>attr1Key</name></expr></argument>)</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>attr2</name> =<init> <expr><call><name><name>section</name>.<name>getAttribute</name></name><argument_list>(<argument><expr><name>attr2Key</name></expr></argument>)</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"First attribute name unexpected"</expr></argument>, <argument><expr>"TestAttr2"</expr></argument>, <argument><expr><name>attr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Second attribute name unexpected"</expr></argument>, <argument><expr>"TestAttr1"</expr></argument>, <argument><expr><name>attr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * file attribute for manifest task is required.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testNoFile"</expr></argument>, <argument><expr>"file is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * replace changes Manifest-Version from 2.0 to 1.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReplace</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testReplace"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Manifest</name></type> <name>mf</name> =<init> <expr><call><name>getManifest</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/mftest.mf"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>Manifest</name>.<name>getDefaultManifest</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * update keeps the Manifest-Version and adds a new attribute Foo
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUpdate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testUpdate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Manifest</name></type> <name>mf</name> =<init> <expr><call><name>getManifest</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/mftest.mf"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!<call><name><name>Manifest</name>.<name>getDefaultManifest</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mfAsString</name> =<init> <expr><call><name><name>mf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>mfAsString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>mfAsString</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"Manifest-Version: 2.0"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>mfAsString</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"Foo: Bar"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mf</name> = <call><name>getManifest</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/mftest2.mf"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mfAsString</name> = <call><name><name>mf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>mfAsString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>mfAsString</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"Foo: Bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>mfAsString</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"Foo: Baz"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFrom</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testFrom"</expr></argument>, <argument><expr><name><name>Manifest</name>.<name>ERROR_FROM_FORBIDDEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIllegalName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testIllegalName"</expr></argument>, <argument><expr>"Manifest attribute names must not contain ' '"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIllegalNameInSection</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testIllegalNameInSection"</expr></argument>, <argument><expr>"Manifest attribute names must not contain ' '"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIllegalNameBegin</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testIllegalNameInSection"</expr></argument>, <argument><expr>"Manifest attribute names must not start with '-' at the begin."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIllegalName2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testIllegalName"</expr></argument>, <argument><expr>"Manifest attribute names must not contain '.'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIllegalName3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testIllegalName"</expr></argument>, <argument><expr>"Manifest attribute names must not contain '*'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Reads mftest.mf.
     */</comment>
    <function><type><specifier>private</specifier> <name>Manifest</name></type> <name>getManifest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>FileReader</name></type> <name>r</name> =<init> <expr>new <call><name>FileReader</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <return>return <expr>new <call><name>Manifest</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>r</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
