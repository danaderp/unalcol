<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\windows\Attrib.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>windows</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>ExecuteOn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<comment type="javadoc">/**
 * Attrib equivalent for Win32 environments.
 * Note: Attrib parameters /S and /D are not handled.
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>Attrib</name> <super><extends>extends <name>ExecuteOn</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ATTR_READONLY</name> =<init> <expr>"R"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ATTR_ARCHIVE</name>  =<init> <expr>"A"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ATTR_SYSTEM</name>   =<init> <expr>"S"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ATTR_HIDDEN</name>   =<init> <expr>"H"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SET</name>    =<init> <expr>"+"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNSET</name>  =<init> <expr>"-"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>haveAttr</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for Attrib. */</comment>
    <constructor><specifier>public</specifier> <name>Attrib</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setExecutable</name></name><argument_list>(<argument><expr>"attrib"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setParallel</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * A file to be attribed.
     * @param src a file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>new <call><name>FileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addFileset</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the ReadOnly file attribute.
     * @param value a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReadonly</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ATTR_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the Archive file attribute.
     * @param value a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArchive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ATTR_ARCHIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the System file attribute.
     * @param value a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystem</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ATTR_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the Hidden file attribute.
     * @param value a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHidden</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ATTR_HIDDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Check the attributes.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkConfiguration</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name>haveAttr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Missing attribute parameter"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>checkConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the executable.
     * This is not allowed, and it always throws a BuildException.
     * @param e ignored
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExecutable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call>
            + " doesn\'t support the executable attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Set the executable.
     * This is not allowed, and it always throws a BuildException.
     * @param e ignored
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call>
            + " doesn\'t support the command attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Add source file.
     * This is not allowed, and it always throws a BuildException.
     * @param b ignored
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAddsourcefile</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call>
            + " doesn\'t support the addsourcefile attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Set skip empty file sets.
     * This is not allowed, and it always throws a BuildException.
     * @param skip ignored
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSkipEmptyFilesets</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skip</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call> + " doesn\'t support the "
                                 + "skipemptyfileset attribute"</expr></argument>,
                                 <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Set parallel.
     * This is not allowed, and it always throws a BuildException.
     * @param parallel ignored
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setParallel</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>parallel</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call>
                                 + " doesn\'t support the parallel attribute"</expr></argument>,
                                 <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Set max parallel.
     * This is not allowed, and it always throws a BuildException.
     * @param max ignored
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxParallel</name><parameter_list>(<param><decl><type><name>int</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call>
                                 + " doesn\'t support the maxparallel attribute"</expr></argument>,
                                 <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Check if the os is valid.
     * Default is to allow windows
     * @return true if the os is valid.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isValidOs</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getOs</name><argument_list>()</argument_list></call> == <name>null</name> &amp;&amp; <call><name>getOsFamily</name><argument_list>()</argument_list></call> == <name>null</name> ?
            <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr><name><name>Os</name>.<name>FAMILY_WINDOWS</name></name></expr></argument>)</argument_list></call> : <call><name><name>super</name>.<name>isValidOs</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getSignString</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>attr</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>attr</name> ? <name>SET</name> : <name>UNSET</name>)</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addArg</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>sign</name></decl></param>, <param><decl><type><name>String</name></type> <name>attribute</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createArg</name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getSignString</name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call> + <name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>haveAttr</name> = true</expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>haveAttr</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>haveAttr</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
