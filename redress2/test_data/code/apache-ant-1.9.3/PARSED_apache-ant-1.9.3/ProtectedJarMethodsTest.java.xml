<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ProtectedJarMethodsTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>ProtectedJarMethodsTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>tempJar</name> =<init> <expr>"tmp.jar"</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ProtectedJarMethodsTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/jar.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGrabFilesAndDirs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIndexTests"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>archive</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>tempJar</name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ArrayList</name></type> <name>dirs</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ArrayList</name></type> <name>files</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>expectedDirs</name> =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"META-INF/"</expr>,
            <expr>"sub/"</expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>expectedFiles</name> =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"foo"</expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Jar</name>.<name>grabFilesAndDirs</name></name><argument_list>(<argument><expr><name>archive</name></expr></argument>, <argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expectedDirs</name>.<name>length</name></name></expr></argument>, <argument><expr><call><name><name>dirs</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>expectedDirs</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Found " + <name><name>expectedDirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                       <argument><expr><call><name><name>dirs</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>expectedDirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expectedFiles</name>.<name>length</name></name></expr></argument>, <argument><expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>expectedFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Found " + <name><name>expectedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                       <argument><expr><call><name><name>files</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>expectedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFindJarNameNoClasspath</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>Jar</name>.<name>findJarName</name></name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>Jar</name>.<name>findJarName</name></name><argument_list>(<argument><expr>"lib" + <name><name>File</name>.<name>separatorChar</name></name> + "foo"</expr></argument>,
                                            <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFindJarNameNoMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>Jar</name>.<name>findJarName</name></name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"bar"</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFindJarNameSimpleMatches</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>Jar</name>.<name>findJarName</name></name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"foo"</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"lib/foo"</expr></argument>, <argument><expr><call><name><name>Jar</name>.<name>findJarName</name></name><argument_list>(<argument><expr>"foo"</expr></argument>,
                                                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"lib/foo"</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>Jar</name>.<name>findJarName</name></name><argument_list>(<argument><expr>"bar" + <name><name>File</name>.<name>separatorChar</name></name> + "foo"</expr></argument>,
                                            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"foo"</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"lib/foo"</expr></argument>,
                     <argument><expr><call><name><name>Jar</name>.<name>findJarName</name></name><argument_list>(<argument><expr>"bar" + <name><name>File</name>.<name>separatorChar</name></name> + "foo"</expr></argument>,
                                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"lib/foo"</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFindJarNameLongestMatchWins</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"lib/foo"</expr></argument>,
                     <argument><expr><call><name><name>Jar</name>.<name>findJarName</name></name><argument_list>(<argument><expr>"lib/foo"</expr></argument>, 
                                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"foo"</expr>, <expr>"lib/foo"</expr>, 
                                                   <expr>"lib/bar/foo"</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
