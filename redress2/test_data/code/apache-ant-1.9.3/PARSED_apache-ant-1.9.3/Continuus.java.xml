<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ccm\Continuus.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ccm</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>ExecuteStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>LogStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>


<comment type="javadoc">/**
 * A base class for creating tasks for executing commands on Continuus 5.1.
 * &lt;p&gt;
 * The class extends the  task as it operates by executing the ccm.exe program
 * supplied with Continuus/Synergy. By default the task expects the ccm executable to be
 * in the path,
 * you can override this be specifying the ccmdir attribute.
 * &lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Continuus</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ccmDir</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ccmAction</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get the value of ccmAction.
     * @return value of ccmAction.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCcmAction</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ccmAction</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the value of ccmAction.
     * @param v  Value to assign to ccmAction.
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCcmAction</name><parameter_list>(<param><decl><type><name>String</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ccmAction</name></name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Set the directory where the ccm executable is located.
     *
     * @param dir the directory containing the ccm executable
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setCcmDir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>ccmDir</name> = <call><name><name>FileUtils</name>.<name>translatePath</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Builds and returns the command string to execute ccm
     * @return String containing path to the executable
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>getCcmCommand</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>toReturn</name> =<init> <expr><name>ccmDir</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>toReturn</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>toReturn</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>toReturn</name> += "/"</expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>toReturn</name> += <name>CCM_EXE</name></expr>;</expr_stmt>

        <return>return <expr><name>toReturn</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Run the command.
     * @param cmd the command line
     * @param handler an execute stream handler
     * @return the exit status of the command
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>run</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>ExecuteStreamHandler</name></type> <name>handler</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>IOException</name></name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Run the command.
     * @param cmd the command line
     * @return the exit status of the command
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>run</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>run</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>new <call><name>LogStreamHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Constant for the thing to execute
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CCM_EXE</name> =<init> <expr>"ccm"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The 'CreateTask' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_CREATE_TASK</name> =<init> <expr>"create_task"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Checkout' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_CHECKOUT</name> =<init> <expr>"co"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Checkin' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_CHECKIN</name> =<init> <expr>"ci"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Reconfigure' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_RECONFIGURE</name> =<init> <expr>"reconfigure"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The 'Reconfigure' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_DEFAULT_TASK</name> =<init> <expr>"default_task"</expr></init></decl>;</decl_stmt>


}</block></class>
</unit>
