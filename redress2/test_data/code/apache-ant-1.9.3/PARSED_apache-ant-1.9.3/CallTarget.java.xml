<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\CallTarget.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PropertySet</name></name>;</import>

<comment type="javadoc">/**
 * Call another target in the same project.
 *
 *  &lt;pre&gt;
 *    &amp;lt;target name="foo"&amp;gt;
 *      &amp;lt;antcall target="bar"&amp;gt;
 *        &amp;lt;param name="property1" value="aaaaa" /&amp;gt;
 *        &amp;lt;param name="foo" value="baz" /&amp;gt;
 *       &amp;lt;/antcall&amp;gt;
 *    &amp;lt;/target&amp;gt;
 *
 *    &amp;lt;target name="bar" depends="init"&amp;gt;
 *      &amp;lt;echo message="prop is ${property1} ${foo}" /&amp;gt;
 *    &amp;lt;/target&amp;gt;
 * &lt;/pre&gt;
 *
 * &lt;p&gt;This only works as expected if neither property1 nor foo are
 * defined in the project itself.
 *
 *
 * @since Ant 1.2
 *
 * @ant.task name="antcall" category="control"
 */</comment>
<class><specifier>public</specifier> class <name>CallTarget</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Ant</name></type> <name>callee</name></decl>;</decl_stmt>
    <comment type="line">// must match the default value of Ant#inheritAll</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>inheritAll</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <comment type="line">// must match the default value of Ant#inheritRefs</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>inheritRefs</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>targetSet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * If true, pass all properties to the new Ant project.
     * Defaults to true.
     * @param inherit &lt;code&gt;boolean&lt;/code&gt; flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInheritAll</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>inherit</name></decl></param>)</parameter_list> <block>{
       <expr_stmt><expr><name>inheritAll</name> = <name>inherit</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, pass all references to the new Ant project.
     * Defaults to false.
     * @param inheritRefs &lt;code&gt;boolean&lt;/code&gt; flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInheritRefs</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>inheritRefs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>inheritRefs</name></name> = <name>inheritRefs</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialize this task by creating new instance of the ant task and
     * configuring it by calling its own init method.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>callee</name> = new <call><name>Ant</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>callee</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Delegate the work to the ant task instance, after setting it up.
     * @throws BuildException on validation failure or if the target didn't
     * execute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>callee</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>targetSet</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Attribute target or at least one nested target is required."</expr></argument>,
                 <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>callee</name>.<name>setAntfile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"ant.file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>callee</name>.<name>setInheritAll</name></name><argument_list>(<argument><expr><name>inheritAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>callee</name>.<name>setInheritRefs</name></name><argument_list>(<argument><expr><name>inheritRefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>callee</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create a new Property to pass to the invoked target(s).
     * @return a &lt;code&gt;Property&lt;/code&gt; object.
     */</comment>
    <function><type><specifier>public</specifier> <name>Property</name></type> <name>createParam</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>callee</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>callee</name>.<name>createProperty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Reference element identifying a data type to carry
     * over to the invoked target.
     * @param r the specified &lt;code&gt;Ant.Reference&lt;/code&gt;.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addReference</name><parameter_list>(<param><decl><type><name><name>Ant</name>.<name>Reference</name></name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>callee</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>callee</name>.<name>addReference</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set of properties to pass to the new project.
     * @param ps the &lt;code&gt;PropertySet&lt;/code&gt; to pass.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPropertyset</name><parameter_list>(<param><decl><type><name>PropertySet</name></type> <name>ps</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>callee</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>callee</name>.<name>addPropertyset</name></name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set target to execute.
     * @param target the name of the target to execute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>callee</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>callee</name>.<name>setTarget</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>targetSet</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a target to the list of targets to invoke.
     * @param t &lt;code&gt;Ant.TargetElement&lt;/code&gt; representing the target.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredTarget</name><parameter_list>(<param><decl><type><name><name>Ant</name>.<name>TargetElement</name></name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>callee</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>callee</name>.<name>addConfiguredTarget</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>targetSet</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Handles output.
     * Send it the the new project if is present, otherwise
     * call the super class.
     * @param output The string output to output.
     * @see Task#handleOutput(String)
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>callee</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>callee</name>.<name>handleOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handles input.
     * Delegate to the created project, if present, otherwise
     * call the super class.
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read.
     *
     * @return the number of bytes read.
     *
     * @exception IOException if the data cannot be read.
     * @see Task#handleInput(byte[], int, int)
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>handleInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>callee</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>callee</name>.<name>handleInput</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>handleInput</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles output.
     * Send it the the new project if is present, otherwise
     * call the super class.
     * @param output The string to output.
     * @see Task#handleFlush(String)
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>callee</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>callee</name>.<name>handleFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handle error output.
     * Send it the the new project if is present, otherwise
     * call the super class.
     * @param output The string to output.
     *
     * @see Task#handleErrorOutput(String)
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleErrorOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>callee</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>callee</name>.<name>handleErrorOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handle error output.
     * Send it the the new project if is present, otherwise
     * call the super class.
     * @param output The string to output.
     * @see Task#handleErrorFlush(String)
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleErrorFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>callee</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>callee</name>.<name>handleErrorFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
