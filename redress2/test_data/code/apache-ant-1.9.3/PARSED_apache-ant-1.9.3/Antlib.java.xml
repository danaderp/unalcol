<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Antlib.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ComponentHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelperRepository</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>TaskContainer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>UnknownElement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>URLResource</name></name>;</import>


<comment type="javadoc">/**
 * Antlib task. It does not
 * occur in an ant build file. It is the root element
 * an antlib xml file.
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>Antlib</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>TaskContainer</name></implements></super> <block>{
    <comment type="line">//</comment>
    <comment type="line">// Static</comment>
    <comment type="line">//</comment>

    <comment type="javadoc">/** The name of this task */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG</name> =<init> <expr>"antlib"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Static method to read an ant lib definition from
     * a url.
     *
     * @param project   the current project
     * @param antlibUrl the url to read the definitions from
     * @param uri       the uri that the antlib is to be placed in
     * @return the ant lib task
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Antlib</name></type> <name>createAntlib</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>URL</name></type> <name>antlibUrl</name></decl></param>,
                                      <param><decl><type><name>String</name></type> <name>uri</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Check if we can contact the URL</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>antlibUrl</name>.<name>openConnection</name></name><argument_list>()</argument_list></call>.<call><name>connect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Unable to find " + <name>antlibUrl</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <decl_stmt><decl><type><name>ComponentHelper</name></type> <name>helper</name> =<init>
            <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>helper</name>.<name>enterAntLib</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>URLResource</name></type> <name>antlibResource</name> =<init> <expr>new <call><name>URLResource</name><argument_list>(<argument><expr><name>antlibUrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <comment type="line">// Should be safe to parse</comment>
            <decl_stmt><decl><type><name>ProjectHelper</name></type> <name>parser</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>p</name> =<init>
                <expr><call><name><name>project</name>.<name>getReference</name></name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>PROJECTHELPER_REFERENCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>p</name> <name>instanceof</name> <name>ProjectHelper</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>parser</name> = (<name>ProjectHelper</name>) <name>p</name></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name><name>parser</name>.<name>canParseAntlibDescriptor</name></name><argument_list>(<argument><expr><name>antlibResource</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>parser</name> = <name>null</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>parser</name> == <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ProjectHelperRepository</name></type> <name>helperRepository</name> =<init>
                    <expr><call><name><name>ProjectHelperRepository</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>parser</name> = <call><name><name>helperRepository</name>.<name>getProjectHelperForAntlib</name></name><argument_list>(<argument><expr><name>antlibResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ue</name> =<init>
                <expr><call><name><name>parser</name>.<name>parseAntlibDescriptor</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>antlibResource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Check name is "antlib"</comment>
            <if>if <condition>(<expr>!(<call><name><name>ue</name>.<name>getTag</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Unexpected tag " + <call><name><name>ue</name>.<name>getTag</name></name><argument_list>()</argument_list></call> + " expecting "
                    + <name>TAG</name></expr></argument>, <argument><expr><call><name><name>ue</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>Antlib</name></type> <name>antlib</name> =<init> <expr>new <call><name>Antlib</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>antlib</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>antlib</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>antlib</name>.<name>setTaskName</name></name><argument_list>(<argument><expr>"antlib"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>antlib</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ue</name>.<name>configure</name></name><argument_list>(<argument><expr><name>antlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>antlib</name></expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>helper</name>.<name>exitAntLib</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="line">//</comment>
    <comment type="line">// Instance</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>classLoader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>uri</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>tasks</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the class loader for this antlib.
     * This class loader is used for any tasks that
     * derive from Definer.
     *
     * @param classLoader the class loader
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setClassLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>classLoader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>classLoader</name></name> = <name>classLoader</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the URI for this antlib.
     * @param uri the namespace uri
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setURI</name><parameter_list>(<param><decl><type><name>String</name></type> <name>uri</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>uri</name></name> = <name>uri</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>getClassLoader</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>classLoader</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>classLoader</name> = <name><name>Antlib</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>classLoader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a task to the list of tasks
     *
     * @param nestedTask Nested task to execute in antlib
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>nestedTask</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tasks</name>.<name>add</name></name><argument_list>(<argument><expr><name>nestedTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the nested tasks, setting the classloader for
     * any tasks that derive from Definer.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//TODO handle tasks added via #addTask()</comment>
        <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>i</name> =<init> <expr><call><name><name>tasks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ue</name> =<init> <expr>(<name>UnknownElement</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setLocation</name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ue</name>.<name>maybeConfigure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>configuredObject</name> =<init> <expr><call><name><name>ue</name>.<name>getRealThing</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>configuredObject</name> == <name>null</name></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr>!(<name>configuredObject</name> <name>instanceof</name> <name>AntlibDefinition</name>)</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Invalid task in antlib " + <call><name><name>ue</name>.<name>getTag</name></name><argument_list>()</argument_list></call>
                    + " " + <call><name><name>configuredObject</name>.<name>getClass</name></name><argument_list>()</argument_list></call> + " does not "
                    + "extend org.apache.tools.ant.taskdefs.AntlibDefinition"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>AntlibDefinition</name></type> <name>def</name> =<init> <expr>(<name>AntlibDefinition</name>) <name>configuredObject</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>def</name>.<name>setURI</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>def</name>.<name>setAntlibClassLoader</name></name><argument_list>(<argument><expr><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>def</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>def</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

}</block></class>
</unit>
