<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\HasFreeSpace.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ReflectWrapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * &amp;lt;hasfreespace&amp;gt;
 * &lt;p&gt;Condition returns true if selected partition
 * has the requested space, false otherwise.&lt;/p&gt;
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>HasFreeSpace</name> <super><implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>partition</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>needed</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Evaluate the condition.
     * @return true if there enough free space.
     * @throws BuildException if there is a problem.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>JavaEnvUtils</name>.<name>isAtLeastJavaVersion</name></name><argument_list>(<argument><expr>"1.6"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//reflection to avoid bootstrap/build problems</comment>
                <decl_stmt><decl><type><name>File</name></type> <name>fs</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>partition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ReflectWrapper</name></type> <name>w</name> =<init> <expr>new <call><name>ReflectWrapper</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>free</name> =<init> <expr>((<name>Long</name>) <call><name><name>w</name>.<name>invoke</name></name><argument_list>(<argument><expr>"getFreeSpace"</expr></argument>)</argument_list></call>).<call><name>longValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><name>free</name> &gt;= <call><name><name>StringUtils</name>.<name>parseHumanSizes</name></name><argument_list>(<argument><expr><name>needed</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"HasFreeSpace condition not supported on Java5 or less."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>null</name> == <name>partition</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Please set the partition attribute."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>null</name> == <name>needed</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Please set the needed attribute."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * The partition/device to check
     * @return the partition.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPartition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>partition</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the partition name.
     * @param partition the name to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPartition</name><parameter_list>(<param><decl><type><name>String</name></type> <name>partition</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>partition</name></name> = <name>partition</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The amount of free space required
     * @return the amount required
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getNeeded</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>needed</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the amount of space required.
     * @param needed the amount required.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNeeded</name><parameter_list>(<param><decl><type><name>String</name></type> <name>needed</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>needed</name></name> = <name>needed</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
