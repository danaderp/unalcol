<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\selectors\SelectSelector.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>PropertyHelper</name></name>;</import>

<comment type="javadoc">/**
 * This selector just holds one other selector and forwards all
 * requests to it. It exists so that there is a single selector
 * type that can exist outside of any targets, as an element of
 * project. It overrides all of the reference stuff so that it
 * works as expected. Note that this is the only selector you
 * can reference.
 *
 * @since 1.5
 */</comment>
<class><specifier>public</specifier> class <name>SelectSelector</name> <super><extends>extends <name>BaseSelectorContainer</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>ifCondition</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>unlessCondition</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>SelectSelector</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * @return a string describing this object
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>hasSelectors</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"{select"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ifCondition</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>" if: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>ifCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>unlessCondition</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>" unless: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>unlessCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>super</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Performs the check for circular references and returns the
     * referenced Selector.
     */</comment>
    <function><type><specifier>private</specifier> <name>SelectSelector</name></type> <name>getRef</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getCheckedRef</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"SelectSelector"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>SelectSelector</name>) <name>o</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates whether there are any selectors here.
     * @return whether any selectors are in this container
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasSelectors</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>()</argument_list></call>.<call><name>hasSelectors</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>hasSelectors</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gives the count of the number of selectors in this container
     * @return the number of selectors in this container
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>selectorCount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>()</argument_list></call>.<call><name>selectorCount</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>selectorCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the set of selectors as an array.
     * @param p the current project
     * @return an array of selectors in this container
     */</comment>
    <function><type><specifier>public</specifier> <name>FileSelector</name><index>[]</index></type> <name>getSelectors</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>()</argument_list></call>.<call><name>getSelectors</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>getSelectors</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an enumerator for accessing the set of selectors.
     * @return an enumerator that goes through each of the selectors
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name></type> <name>selectorElements</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>()</argument_list></call>.<call><name>selectorElements</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>selectorElements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a new selector into this container.
     *
     * @param selector the new selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>appendSelector</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>appendSelector</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Makes sure that there is only one entry, sets an error message if
     * not.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>verifySettings</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> =<init> <expr><call><name>selectorCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cnt</name> &lt; 0 || <name>cnt</name> &gt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Only one selector is allowed within the "
                + "&lt;selector&gt; tag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Ensures that the selector passes the conditions placed
     * on it with &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;unless&lt;/code&gt;.
     * @return true if conditions are passed
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>passesConditions</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>PropertyHelper</name></type> <name>ph</name> =<init> <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ph</name>.<name>testIfCondition</name></name><argument_list>(<argument><expr><name>ifCondition</name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>ph</name>.<name>testUnlessCondition</name></name><argument_list>(<argument><expr><name>unlessCondition</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the if attribute to an expression which must evaluate to
     * true or the name of an existing property for the
     * selector to select any files.
     * @param ifProperty the expression to check
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>ifProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ifCondition</name></name> = <name>ifProperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the if attribute to an expression which must evaluate to
     * true or the name of an existing property for the
     * selector to select any files.
     * @param ifProperty the expression to check
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ifProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setIf</name><argument_list>(<argument><expr>(<name>Object</name>) <name>ifProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the unless attribute to an expression which must evaluate to
     * false or the name of a property which cannot exist for the
     * selector to select any files.
     * @param unlessProperty the expression to check
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>unlessProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>unlessCondition</name></name> = <name>unlessProperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the unless attribute to an expression which must evaluate to
     * false or the name of a property which cannot exist for the
     * selector to select any files.
     * @param unlessProperty the expression to check
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>String</name></type> <name>unlessProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setUnless</name><argument_list>(<argument><expr>(<name>Object</name>) <name>unlessProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns true (the file is selected) only if the if property (if any)
     * exists, the unless property (if any) doesn't exist, and the
     * contained selector (if any) selects the file. If there is no contained
     * selector, return true (because we assume that the point was to test
     * the if and unless conditions).
     *
     * @param basedir the base directory the scan is being done from
     * @param filename the name of the file to check
     * @param file a java.io.File object for the filename that the selector
     * can use
     * @return whether the file should be selected or not
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelected</name><parameter_list>(<param><decl><type><name>File</name></type> <name>basedir</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Deal with if and unless properties first</comment>
        <if>if <condition>(<expr>!(<call><name>passesConditions</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name>selectorElements</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>FileSelector</name></type> <name>f</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>f</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

</unit>
