<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\listener\ProfileLogger.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>listener</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ConcurrentHashMap</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DefaultLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * This is a special logger that is designed to profile builds.
 *
 * @since Ant1.8
 */</comment>
<class><specifier>public</specifier> class <name>ProfileLogger</name> <super><extends>extends <name>DefaultLogger</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Object</name></argument>, <argument><name>Date</name></argument>&gt;</argument_list></name></type> <name>profileData</name> =<init> <expr>new <call><name><name>ConcurrentHashMap</name><argument_list>&lt;<argument><name>Object</name></argument>, <argument><name>Date</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Logs a message to say that the target has started.
     *
     * @param event
     *            An event with any relevant extra information. Must not be
     *            &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> =<init> <expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>"Target " + <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logStart</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>profileData</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a message to say that the target has finished.
     *
     * @param event
     *            An event with any relevant extra information. Must not be
     *            &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Date</name></type> <name>start</name> =<init> <expr>(<name>Date</name>) <call><name><name>profileData</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>"Target " + <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logFinish</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a message to say that the task has started.
     *
     * @param event
     *            An event with any relevant extra information. Must not be
     *            &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call>.<call><name>getTaskName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> =<init> <expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logStart</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>profileData</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a message to say that the task has finished.
     *
     * @param event
     *            An event with any relevant extra information. Must not be
     *            &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Date</name></type> <name>start</name> =<init> <expr>(<name>Date</name>) <call><name><name>profileData</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call>.<call><name>getTaskName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logFinish</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logFinish</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>, <param><decl><type><name>Date</name></type> <name>start</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> =<init> <expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>start</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>diff</name> =<init> <expr><call><name><name>now</name>.<name>getTime</name></name><argument_list>()</argument_list></call> - <call><name><name>start</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>msg</name> = <name><name>StringUtils</name>.<name>LINE_SEP</name></name> + <name>name</name> + ": finished " + <name>now</name> + " ("
                    + <name>diff</name> + "ms)"</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>msg</name> = <name><name>StringUtils</name>.<name>LINE_SEP</name></name> + <name>name</name> + ": finished " + <name>now</name>
                    + " (unknown duration, start not detected)"</expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>printMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name><name>event</name>.<name>getPriority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logStart</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>, <param><decl><type><name>Date</name></type> <name>start</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name> + <name>name</name> + ": started " + <name>start</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name><name>event</name>.<name>getPriority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
