<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\j2ee\WebLogicHotDeploymentTool.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>j2ee</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Java</name></name>;</import>

<comment type="javadoc">/**
 *  An Ant wrapper task for the weblogic.deploy tool.  This is used to
 *  hot-deploy J2EE applications to a running WebLogic server.
 *  This is &lt;b&gt;not&lt;/b&gt; the same as creating the application archive.
 *  This task assumes the archive (EAR, JAR, or WAR) file has been
 *  assembled and is supplied as the "source" attribute.
 *  &lt;p&gt;In the end, this task assembles the commandline parameters
 *  and runs the weblogic.deploy tool in a separate JVM.
 *
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.HotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.AbstractHotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.ServerDeploy
 */</comment>
<class><specifier>public</specifier> class <name>WebLogicHotDeploymentTool</name> <super><extends>extends <name>AbstractHotDeploymentTool</name></extends>
                                       <implements>implements <name>HotDeploymentTool</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STRING_BUFFER_SIZE</name> =<init> <expr>1024</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** The classname of the tool to run **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WEBLOGIC_DEPLOY_CLASS_NAME</name> =<init> <expr>"weblogic.deploy"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** All the valid actions that weblogic.deploy permits **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_ACTIONS</name>
        =<init> <expr><block>{<expr><name>ACTION_DELETE</name></expr>, <expr><name>ACTION_DEPLOY</name></expr>, <expr><name>ACTION_LIST</name></expr>, <expr><name>ACTION_UNDEPLOY</name></expr>, <expr><name>ACTION_UPDATE</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Represents the "-debug" flag from weblogic.deploy **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>debug</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The application name that is being deployed **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>application</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The component name:target(s) for the "-component" argument of weblogic.deploy **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>component</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  Perform the actual deployment.
     *  For this implementation, a JVM is spawned and the weblogic.deploy
     *  tools is executed.
     *  @exception org.apache.tools.ant.BuildException if the attributes are invalid or incomplete.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>deploy</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Java</name></type> <name>java</name> =<init> <expr>new <call><name>Java</name><argument_list>(<argument><expr><call><name>getTask</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setFailonerror</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setClasspath</name></name><argument_list>(<argument><expr><call><name>getClasspath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>java</name>.<name>setClassname</name></name><argument_list>(<argument><expr><name>WEBLOGIC_DEPLOY_CLASS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Validates the passed in attributes.
     *  &lt;p&gt;The rules are:
     *  &lt;ol&gt;&lt;li&gt;If action is "deploy" or "update" the "application" and "source"
     *  attributes must be supplied.
     *  &lt;li&gt;If action is "delete" or "undeploy" the "application" attribute must
     *  be supplied.
     *  @exception org.apache.tools.ant.BuildException if the attributes are invalid or incomplete
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateAttributes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>validateAttributes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>action</name> =<init> <expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getAction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// check that the password has been set</comment>
        <if>if <condition>(<expr>(<call><name>getPassword</name><argument_list>()</argument_list></call> == <name>null</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The password attribute must be set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// check for missing application on deploy &amp; update</comment>
        <if>if <condition>(<expr>(<call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_DEPLOY</name></expr></argument>)</argument_list></call> || <call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_UPDATE</name></expr></argument>)</argument_list></call>)
            &amp;&amp; <name>application</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The application attribute must be set "
                + "if action = " + <name>action</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// check for missing source on deploy &amp; update</comment>
        <if>if <condition>(<expr>(<call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_DEPLOY</name></expr></argument>)</argument_list></call> || <call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_UPDATE</name></expr></argument>)</argument_list></call>)
            &amp;&amp; <call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getSource</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The source attribute must be set if "
                + "action = " + <name>action</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// check for missing application on delete &amp; undeploy</comment>
        <if>if <condition>(<expr>(<call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_DELETE</name></expr></argument>)</argument_list></call> || <call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_UNDEPLOY</name></expr></argument>)</argument_list></call>)
            &amp;&amp; <name>application</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The application attribute must be set if "
                + "action = " + <name>action</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     *  Builds the arguments to pass to weblogic.deploy according to the
     *  supplied action.
     *  @return A String containing the arguments for the weblogic.deploy tool.
     * @throws BuildException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getArguments</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>action</name> =<init> <expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getAction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>args</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_DEPLOY</name></expr></argument>)</argument_list></call> || <call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_UPDATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>args</name> = <call><name>buildDeployArgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_DELETE</name></expr></argument>)</argument_list></call> || <call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_UNDEPLOY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>args</name> = <call><name>buildUndeployArgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_LIST</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>args</name> = <call><name>buildListArgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>

        <return>return <expr><name>args</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Determines if the action supplied is valid.
     *  &lt;p&gt;Valid actions are contained in the static array VALID_ACTIONS
     *  @return true if the action attribute is valid, false if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isActionValid</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>valid</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>action</name> =<init> <expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getAction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>VALID_ACTIONS</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>VALID_ACTIONS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>valid</name> = true</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>valid</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Builds the prefix arguments to pass to weblogic.deploy.
     *  These arguments are generic across all actions.
     *  @return A StringBuffer containing the prefix arguments.
     *  The action-specific build methods will append to this StringBuffer.
     */</comment>
    <function><type><specifier>protected</specifier> <name>StringBuffer</name></type> <name>buildArgsPrefix</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ServerDeploy</name></type> <name>task</name> =<init> <expr><call><name>getTask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// constructs the "-url &lt;url&gt; -debug &lt;action&gt; &lt;password&gt;" portion</comment>
        <comment type="line">// of the commmand line</comment>
        <return>return <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>STRING_BUFFER_SIZE</name></expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr>(<call><name>getServer</name><argument_list>()</argument_list></call> != <name>null</name>)
                    ? "-url " + <call><name>getServer</name><argument_list>()</argument_list></call>
                    : ""</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><name>debug</name> ? "-debug " : ""</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr>(<call><name>getUserName</name><argument_list>()</argument_list></call> != <name>null</name>)
                    ? "-username " + <call><name>getUserName</name><argument_list>()</argument_list></call>
                    : ""</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><call><name><name>task</name>.<name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><call><name>getPassword</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Builds the arguments to pass to weblogic.deploy for deployment actions
     *  ("deploy" and "update").
     *  @return A String containing the full argument string for weblogic.deploy.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>buildDeployArgs</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>args</name> =<init> <expr><call><name>buildArgsPrefix</name><argument_list>()</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getSource</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                .<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>component</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>args</name> = "-component " + <name>component</name> + " " + <name>args</name></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>args</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Builds the arguments to pass to weblogic.deploy for undeployment actions
     *  ("undeploy" and "delete").
     *  @return A String containing the full argument string for weblogic.deploy.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>buildUndeployArgs</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>buildArgsPrefix</name><argument_list>()</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call>
                .<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Builds the arguments to pass to weblogic.deploy for the list action
     *  @return A String containing the full argument string for weblogic.deploy.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>buildListArgs</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>buildArgsPrefix</name><argument_list>()</argument_list></call>
                .<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  If set to true, additional information will be
     *  printed during the deployment process; optional.
     *  @param debug A boolean representing weblogic.deploy "-debug" flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDebug</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>debug</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>debug</name></name> = <name>debug</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  The name of the application being deployed; required.
     *  @param application A String representing the application portion of the
     *  weblogic.deploy command line.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setApplication</name><parameter_list>(<param><decl><type><name>String</name></type> <name>application</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>application</name></name> = <name>application</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * the component string for the deployment targets; optional.
     * It is in the form &lt;code&gt;&amp;lt;component&amp;gt;:&amp;lt;target1&amp;gt;,&amp;lt;target2&amp;gt;...&lt;/code&gt;
     * Where component is the archive name (minus the .jar, .ear, .war
     * extension).  Targets are the servers where the components will be deployed

     *  @param component A String representing the value of the "-component"
     *  argument of the weblogic.deploy command line argument.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComponent</name><parameter_list>(<param><decl><type><name>String</name></type> <name>component</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>component</name></name> = <name>component</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
