<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\net\FTPTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>LoaderUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>Retryable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>SplitClassLoader</name></name>;</import>

<comment type="javadoc">/**
 * Basic FTP client. Performs the following actions:
 * &lt;ul&gt;
 *   &lt;li&gt; &lt;strong&gt;send&lt;/strong&gt; - send files to a remote server. This is the
 *   default action.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;get&lt;/strong&gt; - retrieve files from a remote server.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;del&lt;/strong&gt; - delete files from a remote server.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;list&lt;/strong&gt; - create a file listing.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;chmod&lt;/strong&gt; - change unix file permissions.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;rmdir&lt;/strong&gt; - remove directories, if empty, from a
 *   remote server.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;strong&gt;Note:&lt;/strong&gt; Some FTP servers - notably the Solaris server - seem
 * to hold data ports open after a "retr" operation, allowing them to timeout
 * instead of shutting them down cleanly. This happens in active or passive
 * mode, and the ports will remain open even after ending the FTP session. FTP
 * "send" operations seem to close ports immediately. This behavior may cause
 * problems on some systems when downloading large sets of files.
 *
 * @since Ant 1.3
 */</comment>
<class><specifier>public</specifier> class <name>FTPTask</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>FTPTaskConfig</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SEND_FILES</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GET_FILES</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEL_FILES</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LIST_FILES</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MK_DIR</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CHMOD</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RM_DIR</name> =<init> <expr>6</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SITE_CMD</name> =<init> <expr>7</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** adjust uptodate calculations where server timestamps are HH:mm and client's
     * are HH:mm:ss */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>GRANULARITY_MINUTE</name> =<init> <expr>60000L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default port for FTP */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_FTP_PORT</name> =<init> <expr>21</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remotedir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>server</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>userid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>password</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>account</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>listing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>binary</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>passive</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>newerOnly</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>timeDiffMillis</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>granularityMillis</name> =<init> <expr>0L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>timeDiffAuto</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>action</name> =<init> <expr><name>SEND_FILES</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>filesets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remoteFileSep</name> =<init> <expr>"/"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>port</name> =<init> <expr><name>DEFAULT_FTP_PORT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>skipFailedTransfers</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreNoncriticalErrors</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>preserveLastModified</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>chmod</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>umask</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FTPSystemType</name></type> <name>systemTypeKey</name> =<init> <expr><call><name><name>FTPSystemType</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>defaultDateFormatConfig</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>recentDateFormatConfig</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>serverLanguageCodeConfig</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>serverTimeZoneConfig</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>shortMonthNamesConfig</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Granularity</name></type> <name>timestampGranularity</name> =<init> <expr><call><name><name>Granularity</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isConfigurationSet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>retriesAllowed</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>siteCommand</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>initialSiteCommand</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>enableRemoteVerification</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>classpath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>mirrorLoader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FTPTaskMirror</name></type> <name>delegate</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>ACTION_STRS</name> =<init> <expr><block>{
        <expr>"sending"</expr>,
        <expr>"getting"</expr>,
        <expr>"deleting"</expr>,
        <expr>"listing"</expr>,
        <expr>"making directory"</expr>,
        <expr>"chmod"</expr>,
        <expr>"removing"</expr>,
        <expr>"site"</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>COMPLETED_ACTION_STRS</name> =<init> <expr><block>{
        <expr>"sent"</expr>,
        <expr>"retrieved"</expr>,
        <expr>"deleted"</expr>,
        <expr>"listed"</expr>,
        <expr>"created directory"</expr>,
        <expr>"mode changed"</expr>,
        <expr>"removed"</expr>,
        <expr>"site command executed"</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>ACTION_TARGET_STRS</name> =<init> <expr><block>{
        <expr>"files"</expr>,
        <expr>"files"</expr>,
        <expr>"files"</expr>,
        <expr>"files"</expr>,
        <expr>"directory"</expr>,
        <expr>"files"</expr>,
        <expr>"directories"</expr>,
        <expr>"site command"</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Sets the remote directory where files will be placed. This may be a
     * relative or absolute path, and must be in the path syntax expected by
     * the remote server. No correction of path syntax will be performed.
     *
     * @param dir the remote directory name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRemotedir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>remotedir</name></name> = <name>dir</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRemotedir</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>remotedir</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the FTP server to send files to.
     *
     * @param server the remote server name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setServer</name><parameter_list>(<param><decl><type><name>String</name></type> <name>server</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>server</name></name> = <name>server</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getServer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>server</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the FTP port used by the remote server.
     *
     * @param port the port on which the remote server is listening.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPort</name><parameter_list>(<param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPort</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>port</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the login user id to use on the specified server.
     *
     * @param userid remote system userid.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUserid</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userid</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>userid</name></name> = <name>userid</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUserid</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>userid</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the login password for the given user id.
     *
     * @param password the password on the remote system.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPassword</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>password</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the login account to use on the specified server.
     *
     * @param pAccount the account name on remote system
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAccount</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pAccount</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>account</name></name> = <name>pAccount</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAccount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>account</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, uses binary mode, otherwise text mode (default is binary).
     *
     * @param binary if true use binary mode in transfers.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBinary</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>binary</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>binary</name></name> = <name>binary</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBinary</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>binary</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Specifies whether to use passive mode. Set to true if you are behind a
     * firewall and cannot connect without it. Passive mode is disabled by
     * default.
     *
     * @param passive true is passive mode should be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>passive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>passive</name></name> = <name>passive</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPassive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>passive</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set to true to receive notification about each file as it is
     * transferred.
     *
     * @param verbose true if verbose notifications are required.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>verbose</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isVerbose</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>verbose</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A synonym for &lt;tt&gt;depends&lt;/tt&gt;. Set to true to transmit only new
     * or changed files.
     *
     * See the related attributes timediffmillis and timediffauto.
     *
     * @param newer if true only transfer newer files.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNewer</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>newer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>newerOnly</name></name> = <name>newer</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNewer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>newerOnly</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * number of milliseconds to add to the time on the remote machine
     * to get the time on the local machine.
     *
     * use in conjunction with &lt;code&gt;newer&lt;/code&gt;
     *
     * @param timeDiffMillis number of milliseconds
     *
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeDiffMillis</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeDiffMillis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>timeDiffMillis</name></name> = <name>timeDiffMillis</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimeDiffMillis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>timeDiffMillis</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * &amp;quot;true&amp;quot; to find out automatically the time difference
     * between local and remote machine.
     *
     * This requires right to create
     * and delete a temporary file in the remote directory.
     *
     * @param timeDiffAuto true = find automatically the time diff
     *
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeDiffAuto</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>timeDiffAuto</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>timeDiffAuto</name></name> = <name>timeDiffAuto</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTimeDiffAuto</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>timeDiffAuto</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set to true to preserve modification times for "gotten" files.
     *
     * @param preserveLastModified if true preserver modification times.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPreserveLastModified</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>preserveLastModified</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>preserveLastModified</name></name> = <name>preserveLastModified</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPreserveLastModified</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>preserveLastModified</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set to true to transmit only files that are new or changed from their
     * remote counterparts. The default is to transmit all files.
     *
     * @param depends if true only transfer newer files.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDepends</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>depends</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>newerOnly</name></name> = <name>depends</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the remote file separator character. This normally defaults to the
     * Unix standard forward slash, but can be manually overridden using this
     * call if the remote server requires some other separator. Only the first
     * character of the string is used.
     *
     * @param separator the file separator on the remote system.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeparator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>separator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>remoteFileSep</name> = <name>separator</name></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSeparator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>remoteFileSep</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the file permission mode (Unix only) for files sent to the
     * server.
     *
     * @param theMode unix style file mode for the files sent to the remote
     *        system.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChmod</name><parameter_list>(<param><decl><type><name>String</name></type> <name>theMode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>chmod</name></name> = <name>theMode</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getChmod</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>chmod</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the default mask for file creation on a unix server.
     *
     * @param theUmask unix style umask for files created on the remote server.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUmask</name><parameter_list>(<param><decl><type><name>String</name></type> <name>theUmask</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>umask</name></name> = <name>theUmask</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUmask</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>umask</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  A set of files to upload or download
     *
     * @param set the set of files to be added to the list of files to be
     *        transferred.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filesets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Vector</name></type> <name>getFilesets</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>filesets</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the FTP action to be taken. Currently accepts "put", "get", "del",
     * "mkdir", "chmod", "list", and "site".
     *
     * @deprecated since 1.5.x.
     *             setAction(String) is deprecated and is replaced with
     *      setAction(FTP.Action) to make Ant's Introspection mechanism do the
     *      work and also to encapsulate operations on the type in its own
     *      class.
     * @ant.attribute ignore="true"
     *
     * @param action the FTP action to be performed.
     *
     * @throws BuildException if the action is not a valid action.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAction</name><parameter_list>(<param><decl><type><name>String</name></type> <name>action</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"DEPRECATED - The setAction(String) method has been deprecated."
            + " Use setAction(FTP.Action) instead."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Action</name></type> <name>a</name> =<init> <expr>new <call><name>Action</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>a</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>action</name></name> = <call><name><name>a</name>.<name>getAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the FTP action to be taken. Currently accepts "put", "get", "del",
     * "mkdir", "chmod", "list", and "site".
     *
     * @param action the FTP action to be performed.
     *
     * @throws BuildException if the action is not a valid action.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAction</name><parameter_list>(<param><decl><type><name>Action</name></type> <name>action</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>action</name></name> = <call><name><name>action</name>.<name>getAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getAction</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>action</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The output file for the "list" action. This attribute is ignored for
     * any other actions.
     *
     * @param listing file in which to store the listing.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setListing</name><parameter_list>(<param><decl><type><name>File</name></type> <name>listing</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>listing</name></name> = <name>listing</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>File</name></type> <name>getListing</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>listing</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, enables unsuccessful file put, delete and get
     * operations to be skipped with a warning and the remainder
     * of the files still transferred.
     *
     * @param skipFailedTransfers true if failures in transfers are ignored.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSkipFailedTransfers</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skipFailedTransfers</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>skipFailedTransfers</name></name> = <name>skipFailedTransfers</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSkipFailedTransfers</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>skipFailedTransfers</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * set the flag to skip errors on directory creation.
     * (and maybe later other server specific errors)
     *
     * @param ignoreNoncriticalErrors true if non-critical errors should not
     *        cause a failure.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreNoncriticalErrors</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ignoreNoncriticalErrors</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ignoreNoncriticalErrors</name></name> = <name>ignoreNoncriticalErrors</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIgnoreNoncriticalErrors</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ignoreNoncriticalErrors</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>configurationHasBeenSet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>isConfigurationSet</name></name> = true</expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isConfigurationSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>isConfigurationSet</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the systemTypeKey attribute.
     * Method for setting &lt;code&gt;FTPClientConfig&lt;/code&gt; remote system key.
     *
     * @param systemKey the key to be set - BUT if blank
     * the default value of null (which signifies "autodetect") will be kept.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemTypeKey</name><parameter_list>(<param><decl><type><name>FTPSystemType</name></type> <name>systemKey</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>systemKey</name> != <name>null</name> &amp;&amp; !<call><name><name>systemKey</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>systemTypeKey</name></name> = <name>systemKey</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the defaultDateFormatConfig attribute.
     * @param defaultDateFormat configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultDateFormatConfig</name><parameter_list>(<param><decl><type><name>String</name></type> <name>defaultDateFormat</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>defaultDateFormat</name> != <name>null</name> &amp;&amp; !<call><name><name>defaultDateFormat</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>defaultDateFormatConfig</name></name> = <name>defaultDateFormat</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the recentDateFormatConfig attribute.
     * @param recentDateFormat configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRecentDateFormatConfig</name><parameter_list>(<param><decl><type><name>String</name></type> <name>recentDateFormat</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>recentDateFormat</name> != <name>null</name> &amp;&amp; !<call><name><name>recentDateFormat</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>recentDateFormatConfig</name></name> = <name>recentDateFormat</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the serverLanguageCode attribute.
     * @param serverLanguageCode configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setServerLanguageCodeConfig</name><parameter_list>(<param><decl><type><name>String</name></type> <name>serverLanguageCode</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>serverLanguageCode</name> != <name>null</name> &amp;&amp; !"".<call><name>equals</name><argument_list>(<argument><expr><name>serverLanguageCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>serverLanguageCodeConfig</name></name> = <name>serverLanguageCode</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the serverTimeZoneConfig attribute.
     * @param serverTimeZoneId configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setServerTimeZoneConfig</name><parameter_list>(<param><decl><type><name>String</name></type> <name>serverTimeZoneId</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>serverTimeZoneId</name> != <name>null</name> &amp;&amp; !<call><name><name>serverTimeZoneId</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>serverTimeZoneConfig</name></name> = <name>serverTimeZoneId</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the shortMonthNamesConfig attribute
     *
     * @param shortMonthNames configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShortMonthNamesConfig</name><parameter_list>(<param><decl><type><name>String</name></type> <name>shortMonthNames</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>shortMonthNames</name> != <name>null</name> &amp;&amp; !<call><name><name>shortMonthNames</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>shortMonthNamesConfig</name></name> = <name>shortMonthNames</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>



    <comment type="javadoc">/**
     * Defines how many times to retry executing FTP command before giving up.
     * Default is 0 - try once and if failure then give up.
     *
     * @param retriesAllowed number of retries to allow.  -1 means
     * keep trying forever. "forever" may also be specified as a
     * synonym for -1.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRetriesAllowed</name><parameter_list>(<param><decl><type><name>String</name></type> <name>retriesAllowed</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>"FOREVER".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>retriesAllowed</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>retriesAllowed</name></name> = <name><name>Retryable</name>.<name>RETRY_FOREVER</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>retries</name> =<init> <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>retriesAllowed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>retries</name> &lt; <name><name>Retryable</name>.<name>RETRY_FOREVER</name></name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                             <argument><expr>"Invalid value for retriesAllowed attribute: "
                                             + <name>retriesAllowed</name></expr></argument>)</argument_list></call></expr>;</throw>

                }</block></then></if>
                <expr_stmt><expr><name><name>this</name>.<name>retriesAllowed</name></name> = <name>retries</name></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>px</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                         <argument><expr>"Invalid value for retriesAllowed attribute: "
                                         + <name>retriesAllowed</name></expr></argument>)</argument_list></call></expr>;</throw>

            }</block></catch></try>

        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRetriesAllowed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>retriesAllowed</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return Returns the systemTypeKey.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSystemTypeKey</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>systemTypeKey</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the defaultDateFormatConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultDateFormatConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>defaultDateFormatConfig</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the recentDateFormatConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRecentDateFormatConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>recentDateFormatConfig</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the serverLanguageCodeConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getServerLanguageCodeConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>serverLanguageCodeConfig</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the serverTimeZoneConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getServerTimeZoneConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>serverTimeZoneConfig</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the shortMonthNamesConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getShortMonthNamesConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>shortMonthNamesConfig</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the timestampGranularity.
     */</comment>
    <function><type><specifier>public</specifier> <name>Granularity</name></type> <name>getTimestampGranularity</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>timestampGranularity</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * Sets the timestampGranularity attribute
     * @param timestampGranularity The timestampGranularity to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimestampGranularity</name><parameter_list>(<param><decl><type><name>Granularity</name></type> <name>timestampGranularity</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>null</name> == <name>timestampGranularity</name> || "".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>timestampGranularity</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>timestampGranularity</name></name> = <name>timestampGranularity</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Sets the siteCommand attribute.  This attribute
     * names the command that will be executed if the action
     * is "site".
     * @param siteCommand The siteCommand to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSiteCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>siteCommand</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>siteCommand</name></name> = <name>siteCommand</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSiteCommand</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>siteCommand</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the initialSiteCommand attribute.  This attribute
     * names a site command that will be executed immediately
     * after connection.
     * @param initialCommand The initialSiteCommand to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInitialSiteCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>initialCommand</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>initialSiteCommand</name></name> = <name>initialCommand</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getInitialSiteCommand</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>initialSiteCommand</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getGranularityMillis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>granularityMillis</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGranularityMillis</name><parameter_list>(<param><decl><type><name>long</name></type> <name>granularity</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>granularityMillis</name></name> = <name>granularity</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to verify that data and control connections are
     * connected to the same remote host.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEnableRemoteVerification</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>enableRemoteVerification</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getEnableRemoteVerification</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>enableRemoteVerification</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks to see that all required parameters are set.
     *
     * @throws BuildException if the configuration is not valid.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkAttributes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>server</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"server attribute must be set!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>userid</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"userid attribute must be set!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>password</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"password attribute must be set!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>action</name> == <name>LIST_FILES</name>) &amp;&amp; (<name>listing</name> == <name>null</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"listing attribute must be set for list "
                                     + "action!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>action</name> == <name>MK_DIR</name> &amp;&amp; <name>remotedir</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"remotedir attribute must be set for "
                                     + "mkdir action!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>action</name> == <name>CHMOD</name> &amp;&amp; <name>chmod</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"chmod attribute must be set for chmod "
                                     + "action!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>action</name> == <name>SITE_CMD</name> &amp;&amp; <name>siteCommand</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"sitecommand attribute must be set for site "
                                     + "action!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>


        <if>if <condition>(<expr><name><name>this</name>.<name>isConfigurationSet</name></name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"org.apache.commons.net.ftp.FTPClientConfig"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                         <argument><expr>"commons-net.jar &gt;= 1.4.0 is required for at least one"
                                         + " of the attributes specified."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Runs the task.
     *
     * @throws BuildException if the task fails or is not configured
     *         correctly.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>setupFTPDelegate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>delegate</name>.<name>doFTP</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>mirrorLoader</name> <name>instanceof</name> <name>SplitClassLoader</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>SplitClassLoader</name>) <name>mirrorLoader</name>).<call><name>cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>mirrorLoader</name> = <name>null</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>classpath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>classpath</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setupFTPDelegate</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>myLoader</name> =<init> <expr><name><name>FTPTask</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>mustSplit</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mirrorLoader</name> =
                new <call><name>SplitClassLoader</name><argument_list>(<argument><expr><name>myLoader</name></expr></argument>, <argument><expr><name>classpath</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
                                         <expr>"FTPTaskMirrorImpl"</expr>,
                                         <expr>"FTPConfigurator"</expr>
                                     }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>mirrorLoader</name> = <name>myLoader</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>delegate</name> = <call><name>createMirror</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>mirrorLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>mustSplit</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>LoaderUtils</name>.<name>getResourceSource</name></name><argument_list>(<argument><expr><name><name>FTPTask</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr>"/org/apache/commons/net/"
                                             + "ftp/FTP.class"</expr></argument>)</argument_list></call>
            == <name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>FTPTaskMirror</name></type> <name>createMirror</name><parameter_list>(<param><decl><type><name>FTPTask</name></type> <name>task</name></decl></param>,
                                              <param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>loader</name>.<name>loadClass</name></name><argument_list>(<argument><expr>"org.apache.commons.net.ftp.FTP"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// sanity check</comment>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The &lt;classpath&gt; for &lt;ftp&gt; must include"
                                     + " commons-net.jar if not in Ant's own "
                                     + " classpath"</expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>task</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <try>try <block>{
            <decl_stmt><decl><type><name>Class</name></type> <name>c</name> =<init> <expr><call><name><name>loader</name>.<name>loadClass</name></name><argument_list>(<argument><expr><name><name>FTPTaskMirror</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call> + "Impl"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>c</name>.<name>getClassLoader</name></name><argument_list>()</argument_list></call> != <name>loader</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Overdelegating loader"</expr></argument>,
                                         <argument><expr><call><name><name>task</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>Constructor</name></type> <name>cons</name> =<init> <expr><call><name><name>c</name>.<name>getConstructor</name></name><argument_list>(<argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>FTPTask</name>.<name><name/></name></name>class</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>(<name>FTPTaskMirror</name>) <call><name><name>cons</name>.<name>newInstance</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>task</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>task</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * an action to perform, one of
     * "send", "put", "recv", "get", "del", "delete", "list", "mkdir", "chmod",
     * "rmdir"
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Action</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_ACTIONS</name> =<init> <expr><block>{
            <expr>"send"</expr>, <expr>"put"</expr>, <expr>"recv"</expr>, <expr>"get"</expr>, <expr>"del"</expr>, <expr>"delete"</expr>, <expr>"list"</expr>, <expr>"mkdir"</expr>,
            <expr>"chmod"</expr>, <expr>"rmdir"</expr>, <expr>"site"</expr>
        }</block></expr></init></decl>;</decl_stmt>


        <comment type="javadoc">/**
         * Get the valid values
         *
         * @return an array of the valid FTP actions.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALID_ACTIONS</name></expr>;</return>
        }</block></function>


        <comment type="javadoc">/**
         * Get the symbolic equivalent of the action value.
         *
         * @return the SYMBOL representing the given action.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getAction</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>actionL</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"send"</expr></argument>)</argument_list></call> || <call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"put"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>SEND_FILES</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"recv"</expr></argument>)</argument_list></call> || <call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"get"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>GET_FILES</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"del"</expr></argument>)</argument_list></call> || <call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"delete"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>DEL_FILES</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"list"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>LIST_FILES</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"chmod"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>CHMOD</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"mkdir"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>MK_DIR</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"rmdir"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>RM_DIR</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"site"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>SITE_CMD</name></expr>;</return>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
            <return>return <expr><name>SEND_FILES</name></expr>;</return>
        }</block></function>
    }</block></class>
    <comment type="javadoc">/**
     * represents one of the valid timestamp adjustment values
     * recognized by the &lt;code&gt;timestampGranularity&lt;/code&gt; attribute.&lt;p&gt;

     * A timestamp adjustment may be used in file transfers for checking
     * uptodateness. MINUTE means to add one minute to the server
     * timestamp.  This is done because FTP servers typically list
     * timestamps HH:mm and client FileSystems typically use HH:mm:ss.
     *
     * The default is to use MINUTE for PUT actions and NONE for GET
     * actions, since GETs have the &lt;code&gt;preserveLastModified&lt;/code&gt;
     * option, which takes care of the problem in most use cases where
     * this level of granularity is an issue.
     *
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Granularity</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_GRANULARITIES</name> =<init> <expr><block>{
            <expr>""</expr>, <expr>"MINUTE"</expr>, <expr>"NONE"</expr>
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Get the valid values.
         * @return the list of valid Granularity values
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALID_GRANULARITIES</name></expr>;</return>
        }</block></function>
        <comment type="javadoc">/**
         * returns the number of milliseconds associated with
         * the attribute, which can vary in some cases depending
         * on the value of the action parameter.
         * @param action SEND_FILES or GET_FILES
         * @return the number of milliseconds associated with
         * the attribute, in the context of the supplied action
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>getMilliseconds</name><parameter_list>(<param><decl><type><name>int</name></type> <name>action</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>granularityU</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>"".<call><name>equals</name><argument_list>(<argument><expr><name>granularityU</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>action</name> == <name>SEND_FILES</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>GRANULARITY_MINUTE</name></expr>;</return>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr>"MINUTE".<call><name>equals</name><argument_list>(<argument><expr><name>granularityU</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>GRANULARITY_MINUTE</name></expr>;</return>
            }</block></then></if></else></if>
            <return>return <expr>0L</expr>;</return>
        }</block></function>
        <function><type><specifier>static</specifier> <specifier>final</specifier> <name>Granularity</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>Granularity</name></type> <name>g</name> =<init> <expr>new <call><name>Granularity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g</name>.<name>setValue</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>g</name></expr>;</return>
        }</block></function>

    }</block></class>
    <comment type="javadoc">/**
     * one of the valid system type keys recognized by the systemTypeKey
     * attribute.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FTPSystemType</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_SYSTEM_TYPES</name> =<init> <expr><block>{
            <expr>""</expr>, <expr>"UNIX"</expr>, <expr>"VMS"</expr>, <expr>"WINDOWS"</expr>, <expr>"OS/2"</expr>, <expr>"OS/400"</expr>,
            <expr>"MVS"</expr>
        }</block></expr></init></decl>;</decl_stmt>


        <comment type="javadoc">/**
         * Get the valid values.
         * @return the list of valid system types.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALID_SYSTEM_TYPES</name></expr>;</return>
        }</block></function>

        <function><type><specifier>static</specifier> <specifier>final</specifier> <name>FTPSystemType</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>FTPSystemType</name></type> <name>ftpst</name> =<init> <expr>new <call><name>FTPSystemType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ftpst</name>.<name>setValue</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>ftpst</name></expr>;</return>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
