<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ejb\WeblogicDeploymentTool.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ejb</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>JarEntry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>JarFile</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>JarOutputStream</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>SAXParser</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>SAXParserFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Java</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Environment</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>InputSource</name></name>;</import>

<comment type="javadoc">/**
    The weblogic element is used to control the weblogic.ejbc compiler for
    generating weblogic EJB jars. Prior to Ant 1.3, the method of locating CMP
    descriptors was to use the ejbjar naming convention. So if your ejb-jar was
    called, Customer-ejb-jar.xml, your weblogic descriptor was called Customer-
    weblogic-ejb-jar.xml and your CMP descriptor had to be Customer-weblogic-cmp-
    rdbms-jar.xml. In addition, the &amp;lt;type-storage&amp;gt; element in the weblogic
    descriptor had to be set to the standard name META-INF/weblogic-cmp-rdbms-
    jar.xml, as that is where the CMP descriptor was mapped to in the generated
    jar.
*/</comment>
<class><specifier>public</specifier> class <name>WeblogicDeploymentTool</name> <super><extends>extends <name>GenericDeploymentTool</name></extends></super> <block>{
    <comment type="javadoc">/** EJB11 id */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PUBLICID_EJB11</name>
         =<init> <expr>"-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** EJB20 id */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PUBLICID_EJB20</name>
         =<init> <expr>"-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Weblogic 5.1.0 id */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PUBLICID_WEBLOGIC_EJB510</name>
         =<init> <expr>"-//BEA Systems, Inc.//DTD WebLogic 5.1.0 EJB//EN"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Weblogic 6.0.0 id */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PUBLICID_WEBLOGIC_EJB600</name>
         =<init> <expr>"-//BEA Systems, Inc.//DTD WebLogic 6.0.0 EJB//EN"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Weblogic 7.0.0 id */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PUBLICID_WEBLOGIC_EJB700</name>
         =<init> <expr>"-//BEA Systems, Inc.//DTD WebLogic 7.0.0 EJB//EN"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Weblogic 5.1 dtd location */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_WL51_EJB11_DTD_LOCATION</name>
         =<init> <expr>"/weblogic/ejb/deployment/xml/ejb-jar.dtd"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Weblogic 6.0 ejb 1.1 dtd location */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_WL60_EJB11_DTD_LOCATION</name>
         =<init> <expr>"/weblogic/ejb20/dd/xml/ejb11-jar.dtd"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Weblogic 6.0 ejb 2.0 dtd location */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_WL60_EJB20_DTD_LOCATION</name>
         =<init> <expr>"/weblogic/ejb20/dd/xml/ejb20-jar.dtd"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_WL51_DTD_LOCATION</name>
         =<init> <expr>"/weblogic/ejb/deployment/xml/weblogic-ejb-jar.dtd"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_WL60_51_DTD_LOCATION</name>
         =<init> <expr>"/weblogic/ejb20/dd/xml/weblogic510-ejb-jar.dtd"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_WL60_DTD_LOCATION</name>
         =<init> <expr>"/weblogic/ejb20/dd/xml/weblogic600-ejb-jar.dtd"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_WL70_DTD_LOCATION</name>
         =<init> <expr>"/weblogic/ejb20/dd/xml/weblogic700-ejb-jar.dtd"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_COMPILER</name> =<init> <expr>"default"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WL_DD</name> =<init> <expr>"weblogic-ejb-jar.xml"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WL_CMP_DD</name> =<init> <expr>"weblogic-cmp-rdbms-jar.xml"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPILER_EJB11</name> =<init> <expr>"weblogic.ejbc"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPILER_EJB20</name> =<init> <expr>"weblogic.ejbc20"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** File utilities instance for copying jars */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Instance variable that stores the suffix for the weblogic jarfile. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>jarSuffix</name> =<init> <expr>".jar"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Instance variable that stores the location of the weblogic DTD file. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>weblogicDTD</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Instance variable that stores the location of the ejb 1.1 DTD file. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ejb11DTD</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Instance variable that determines whether generic ejb jars are kept. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>keepgenerated</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Instance variable that stores the fully qualified classname of the
     * weblogic EJBC compiler
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ejbcClass</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>additionalArgs</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * additional args to pass to the spawned jvm
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>additionalJvmArgs</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>keepGeneric</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>compiler</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>alwaysRebuild</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** controls whether ejbc is run on the generated jar */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>noEJBC</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Indicates if the old CMP location convention is to be used.  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>newCMP</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The classpath to the weblogic classes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>wlClasspath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** System properties for the JVM. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>sysprops</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The weblogic.StdoutSeverityLevel to use when running the JVM that
     * executes ejbc. Set to 16 to avoid the warnings about EJB Home and
     * Remotes being in the classpath
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>jvmDebugLevel</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>outputDir</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Add a nested sysproperty element.
     * @param sysp the element to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSysproperty</name><parameter_list>(<param><decl><type><name><name>Environment</name>.<name>Variable</name></name></type> <name>sysp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sysprops</name>.<name>add</name></name><argument_list>(<argument><expr><name>sysp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get the classpath to the weblogic classpaths.
     * @return the classpath to configure.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createWLClasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>wlClasspath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>wlClasspath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>wlClasspath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If set ejbc will use this directory as the output
     * destination rather than a jar file. This allows for the
     * generation of &amp;quot;exploded&amp;quot; jars.
     * @param outputDir the directory to be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>outputDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outputDir</name></name> = <name>outputDir</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Optional classpath to WL6.0.
     * Weblogic 6.0 will give a warning if the home and remote interfaces
     * of a bean are on the system classpath used to run weblogic.ejbc.
     * In that case, the standard weblogic classes should be set with
     * this attribute (or equivalent nested element) and the
     * home and remote interfaces located with the standard classpath
     * attribute.
     * @param wlClasspath the path to be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWLClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>wlClasspath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>wlClasspath</name></name> = <name>wlClasspath</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * The compiler (switch &lt;code&gt;-compiler&lt;/code&gt;) to use; optional.
     * This allows for the selection of a different compiler
     * to be used for the compilation of the generated Java
     * files. This could be set, for example, to Jikes to
     * compile with the Jikes compiler. If this is not set
     * and the &lt;code&gt;build.compiler&lt;/code&gt; property is set
     * to jikes, the Jikes compiler will be used. If this
     * is not desired, the value &amp;quot;&lt;code&gt;default&lt;/code&gt;&amp;quot;
     * may be given to use the default compiler.
     * @param compiler the compiler to be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompiler</name><parameter_list>(<param><decl><type><name>String</name></type> <name>compiler</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>compiler</name></name> = <name>compiler</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Set the rebuild flag to false to only update changes in the jar rather
     * than rerunning ejbc; optional, default true.
     * This flag controls whether weblogic.ejbc is always
     * invoked to build the jar file. In certain circumstances,
     * such as when only a bean class has been changed, the jar
     * can be generated by merely replacing the changed classes
     * and not rerunning ejbc. Setting this to false will reduce
     * the time to run ejbjar.
     * @param rebuild a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRebuild</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>rebuild</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>alwaysRebuild</name></name> = <name>rebuild</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the weblogic.StdoutSeverityLevel to use when running the JVM that
     * executes ejbc; optional. Set to 16 to avoid the warnings about EJB Home and
     * Remotes being in the classpath
     * @param jvmDebugLevel the value to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJvmDebugLevel</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>jvmDebugLevel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>jvmDebugLevel</name></name> = <name>jvmDebugLevel</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get the debug level.
     * @return the jvm debug level (may be null).
     */</comment>
    <function><type><specifier>public</specifier> <name>Integer</name></type> <name>getJvmDebugLevel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>jvmDebugLevel</name></expr>;</return>
    }</block></function>



    <comment type="javadoc">/**
     * Setter used to store the suffix for the generated weblogic jar file.
     *
     * @param inString the string to use as the suffix.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuffix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>inString</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>jarSuffix</name></name> = <name>inString</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * controls whether the generic file used as input to
     * ejbc is retained; defaults to false
     *
     * @param inValue true for keep generic
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeepgeneric</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>inValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keepGeneric</name></name> = <name>inValue</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Controls whether weblogic will keep the generated Java
     * files used to build the class files added to the
     * jar. This can be useful when debugging; default is false.
     *
     * @param inValue either 'true' or 'false'
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeepgenerated</name><parameter_list>(<param><decl><type><name>String</name></type> <name>inValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keepgenerated</name></name> = <call><name><name>Boolean</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>inValue</name></expr></argument>)</argument_list></call>.<call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Any optional extra arguments pass to the weblogic.ejbc
     * tool.
     * @param args extra arguments to pass to the ejbc tool.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArgs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>additionalArgs</name></name> = <name>args</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Set any additional arguments to pass to the weblogic JVM; optional.
     * @param args the arguments to be passed to the JVM
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJvmargs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>additionalJvmArgs</name></name> = <name>args</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classname of the ejbc compiler;  optional
     * Normally ejbjar determines
     * the appropriate class based on the DTD used for the EJB. The EJB 2.0 compiler
     * featured in weblogic 6 has, however, been deprecated in version 7. When
     * using with version 7 this attribute should be set to
     * &amp;quot;weblogic.ejbc&amp;quot; to avoid the deprecation warning.
     * @param ejbcClass the name of the class to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEjbcClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ejbcClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ejbcClass</name></name> = <name>ejbcClass</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get the ejbc compiler class.
     * @return the name of the ejbc compiler class.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getEjbcClass</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ejbcClass</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * &lt;b&gt;Deprecated&lt;/b&gt;. Defines the location of the ejb-jar DTD in
     *  the weblogic class hierarchy. Should not be needed, and the
     * nested &amp;lt;dtd&amp;gt; element is recommended when it is.
     *
     * @param inString the string to use as the DTD location.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWeblogicdtd</name><parameter_list>(<param><decl><type><name>String</name></type> <name>inString</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setEJBdtd</name><argument_list>(<argument><expr><name>inString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * &lt;b&gt;Deprecated&lt;/b&gt;. Defines the location of weblogic DTD in
     *  the weblogic class hierarchy. Should not be needed, and the
     * nested &amp;lt;dtd&amp;gt; element is recommended when it is.
     *
     * @param inString the string to use as the DTD location.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWLdtd</name><parameter_list>(<param><decl><type><name>String</name></type> <name>inString</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>weblogicDTD</name></name> = <name>inString</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * &lt;b&gt;Deprecated&lt;/b&gt;. Defines the location of Sun's EJB DTD in
     *  the weblogic class hierarchy. Should not be needed, and the
     * nested &amp;lt;dtd&amp;gt; element is recommended when it is.
     *
     * @param inString the string to use as the DTD location.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEJBdtd</name><parameter_list>(<param><decl><type><name>String</name></type> <name>inString</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ejb11DTD</name></name> = <name>inString</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Set the value of the oldCMP scheme. This is an antonym for newCMP
     * @ant.attribute ignore="true'
     * @param oldCMP a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOldCMP</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>oldCMP</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>newCMP</name></name> = !<name>oldCMP</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * If this is set to true, the new method for locating
     * CMP descriptors will be used; optional, default false.
     * &lt;P&gt;
     * The old CMP scheme locates the
     * weblogic CMP descriptor based on the naming convention where the
     * weblogic CMP file is expected to be named with the bean name as the
     * prefix. Under this scheme the name of the CMP descriptor does not match
     * the name actually used in the main weblogic EJB descriptor. Also,
     * descriptors which contain multiple CMP references could not be used.
     * @param newCMP a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNewCMP</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>newCMP</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>newCMP</name></name> = <name>newCMP</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Do not EJBC the jar after it has been put together;
     * optional, default false
     * @param noEJBC a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNoEJBC</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>noEJBC</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>noEJBC</name></name> = <name>noEJBC</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Register the DTDs.
     * @param handler the handler to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>registerKnownDTDs</name><parameter_list>(<param><decl><type><name>DescriptorHandler</name></type> <name>handler</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// register all the known DTDs</comment>
        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_EJB11</name></expr></argument>, <argument><expr><name>DEFAULT_WL51_EJB11_DTD_LOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_EJB11</name></expr></argument>, <argument><expr><name>DEFAULT_WL60_EJB11_DTD_LOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_EJB11</name></expr></argument>, <argument><expr><name>ejb11DTD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_EJB20</name></expr></argument>, <argument><expr><name>DEFAULT_WL60_EJB20_DTD_LOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get the weblogic descriptor handler.
     * @param srcDir the source directory.
     * @return the descriptor.
     */</comment>
    <function><type><specifier>protected</specifier> <name>DescriptorHandler</name></type> <name>getWeblogicDescriptorHandler</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>srcDir</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DescriptorHandler</name></type> <name>handler</name> =<init>
            <expr>new <class><super><name>DescriptorHandler</name></super><argument_list>(<argument><expr><call><name>getTask</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>srcDir</name></expr></argument>)</argument_list> <block>{
                <function><type><specifier>protected</specifier> <name>void</name></type> <name>processElement</name><parameter_list>()</parameter_list> <block>{
                    <if>if <condition>(<expr><call><name><name>currentElement</name>.<name>equals</name></name><argument_list>(<argument><expr>"type-storage"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="line">// Get the filename of vendor specific descriptor</comment>
                        <decl_stmt><decl><type><name>String</name></type> <name>fileNameWithMETA</name> =<init> <expr><name>currentText</name></expr></init></decl>;</decl_stmt>
                        <comment type="line">//trim the META_INF\ off of the file name</comment>
                        <decl_stmt><decl><type><name>String</name></type> <name>fileName</name>
                             =<init> <expr><call><name><name>fileNameWithMETA</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>META_DIR</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>fileNameWithMETA</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>File</name></type> <name>descriptorFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>srcDir</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name><name>ejbFiles</name>.<name>put</name></name><argument_list>(<argument><expr><name>fileNameWithMETA</name></expr></argument>, <argument><expr><name>descriptorFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_WEBLOGIC_EJB510</name></expr></argument>, <argument><expr><name>DEFAULT_WL51_DTD_LOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_WEBLOGIC_EJB510</name></expr></argument>, <argument><expr><name>DEFAULT_WL60_51_DTD_LOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_WEBLOGIC_EJB600</name></expr></argument>, <argument><expr><name>DEFAULT_WL60_DTD_LOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_WEBLOGIC_EJB700</name></expr></argument>, <argument><expr><name>DEFAULT_WL70_DTD_LOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_WEBLOGIC_EJB510</name></expr></argument>, <argument><expr><name>weblogicDTD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><name>PUBLICID_WEBLOGIC_EJB600</name></expr></argument>, <argument><expr><name>weblogicDTD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<call><name><name>dtdLocations</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name><name>EjbJar</name>.<name>DTDLocation</name></name></type> <name>dtdLocation</name> =<init> <expr>(<name><name>EjbJar</name>.<name>DTDLocation</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>handler</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><call><name><name>dtdLocation</name>.<name>getPublicId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dtdLocation</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>handler</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Add any vendor specific files which should be included in the EJB Jar.
     * @param ejbFiles the hash table to be populated.
     * @param ddPrefix the prefix to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addVendorFiles</name><parameter_list>(<param><decl><type><name>Hashtable</name></type> <name>ejbFiles</name></decl></param>, <param><decl><type><name>String</name></type> <name>ddPrefix</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>weblogicDD</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>descriptorDir</name></expr></argument>, <argument><expr><name>ddPrefix</name> + <name>WL_DD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>weblogicDD</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ejbFiles</name>.<name>put</name></name><argument_list>(<argument><expr><name>META_DIR</name> + <name>WL_DD</name></expr></argument>,
                <argument><expr><name>weblogicDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Unable to locate weblogic deployment descriptor. "
                + "It was expected to be in "
                + <call><name><name>weblogicDD</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></else></if>

        <if>if <condition>(<expr>!<name>newCMP</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"The old method for locating CMP files has been DEPRECATED."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Please adjust your weblogic descriptor and set "
                + "newCMP=\"true\" to use the new CMP descriptor "
                + "inclusion mechanism. "</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// The the weblogic cmp deployment descriptor</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>weblogicCMPDD</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>descriptorDir</name></expr></argument>, <argument><expr><name>ddPrefix</name> + <name>WL_CMP_DD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>weblogicCMPDD</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ejbFiles</name>.<name>put</name></name><argument_list>(<argument><expr><name>META_DIR</name> + <name>WL_CMP_DD</name></expr></argument>,
                    <argument><expr><name>weblogicCMPDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <comment type="line">// now that we have the weblogic descriptor, we parse the file</comment>
            <comment type="line">// to find other descriptors needed to deploy the bean.</comment>
            <comment type="line">// this could be the weblogic-cmp-rdbms.xml or any other O/R</comment>
            <comment type="line">// mapping tool descriptors.</comment>
            <try>try <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>ejbDescriptor</name> =<init> <expr>(<name>File</name>) <call><name><name>ejbFiles</name>.<name>get</name></name><argument_list>(<argument><expr><name>META_DIR</name> + <name>EJB_DD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>SAXParserFactory</name></type> <name>saxParserFactory</name> =<init> <expr><call><name><name>SAXParserFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>saxParserFactory</name>.<name>setValidating</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>SAXParser</name></type> <name>saxParser</name> =<init> <expr><call><name><name>saxParserFactory</name>.<name>newSAXParser</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>DescriptorHandler</name></type> <name>handler</name>
                    =<init> <expr><call><name>getWeblogicDescriptorHandler</name><argument_list>(<argument><expr><call><name><name>ejbDescriptor</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>saxParser</name>.<name>parse</name></name><argument_list>(<argument><expr>new <call><name>InputSource</name>
                    <argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>weblogicDD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Hashtable</name></type> <name>ht</name> =<init> <expr><call><name><name>handler</name>.<name>getFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>ht</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>ejbFiles</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>ht</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Exception while adding Vendor specific files: " + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>


    <comment type="javadoc">/**
     * Get the vendor specific name of the Jar that will be output. The
     * modification date of this jar will be checked against the dependent
     * bean classes.
     */</comment>
    <function><type><name>File</name></type> <name>getVendorOutputJarFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>baseName</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getDestDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>baseName</name> + <name>jarSuffix</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Helper method invoked by execute() for each WebLogic jar to be built.
     * Encapsulates the logic of constructing a java task for calling
     * weblogic.ejbc and executing it.
     *
     * @param sourceJar java.io.File representing the source (EJB1.1) jarfile.
     * @param destJar java.io.File representing the destination, WebLogic
     *      jarfile.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>buildWeblogicJar</name><parameter_list>(<param><decl><type><name>File</name></type> <name>sourceJar</name></decl></param>, <param><decl><type><name>File</name></type> <name>destJar</name></decl></param>, <param><decl><type><name>String</name></type> <name>publicId</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Java</name></type> <name>javaTask</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>noEJBC</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>copyFile</name></name><argument_list>(<argument><expr><name>sourceJar</name></expr></argument>, <argument><expr><name>destJar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>keepgenerated</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>sourceJar</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return;</return>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to write EJB jar"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>ejbcClassName</name> =<init> <expr><name>ejbcClass</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>javaTask</name> = new <call><name>Java</name><argument_list>(<argument><expr><call><name>getTask</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>javaTask</name>.<name>setTaskName</name></name><argument_list>(<argument><expr>"ejbc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>javaTask</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><name>additionalJvmArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!(<call><name><name>sysprops</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                <for>for (<init><decl><type><name>Enumeration</name></type> <name>en</name> =<init> <expr><call><name><name>sysprops</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>en</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name><name>Environment</name>.<name>Variable</name></name></type> <name>entry</name>
                        =<init> <expr>(<name><name>Environment</name>.<name>Variable</name></name>) <call><name><name>en</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>javaTask</name>.<name>addSysproperty</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>

            <if>if <condition>(<expr><call><name>getJvmDebugLevel</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>javaTask</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr>" -Dweblogic.StdoutSeverityLevel=" + <name>jvmDebugLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>ejbcClassName</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// try to determine it from publicId</comment>
                <if>if <condition>(<expr><call><name><name>PUBLICID_EJB11</name>.<name>equals</name></name><argument_list>(<argument><expr><name>publicId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ejbcClassName</name> = <name>COMPILER_EJB11</name></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>PUBLICID_EJB20</name>.<name>equals</name></name><argument_list>(<argument><expr><name>publicId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ejbcClassName</name> = <name>COMPILER_EJB20</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Unrecognized publicId " + <name>publicId</name>
                        + " - using EJB 1.1 compiler"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ejbcClassName</name> = <name>COMPILER_EJB11</name></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>javaTask</name>.<name>setClassname</name></name><argument_list>(<argument><expr><name>ejbcClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><name>additionalArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>keepgenerated</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-keepgenerated"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>compiler</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// try to use the compiler specified by build.compiler.</comment>
                <comment type="line">// Right now we are just going to allow Jikes</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>buildCompiler</name>
                    =<init> <expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"build.compiler"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>buildCompiler</name> != <name>null</name> &amp;&amp; <call><name><name>buildCompiler</name>.<name>equals</name></name><argument_list>(<argument><expr>"jikes"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-compiler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"jikes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr>!<call><name><name>compiler</name>.<name>equals</name></name><argument_list>(<argument><expr><name>DEFAULT_COMPILER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-compiler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>

            <decl_stmt><decl><type><name>Path</name></type> <name>combinedClasspath</name> =<init> <expr><call><name>getCombinedClasspath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>wlClasspath</name> != <name>null</name> &amp;&amp; <name>combinedClasspath</name> != <name>null</name>
                 &amp;&amp; <call><name><name>combinedClasspath</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><name>combinedClasspath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>sourceJar</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>outputDir</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>destJar</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>javaTask</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>outputDir</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <decl_stmt><decl><type><name>Path</name></type> <name>classpath</name> =<init> <expr><name>wlClasspath</name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>classpath</name> = <call><name>getCombinedClasspath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>javaTask</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>classpath</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>javaTask</name>.<name>setClasspath</name></name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Calling " + <name>ejbcClassName</name> + " for " + <call><name><name>sourceJar</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>javaTask</name>.<name>executeJava</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Ejbc reported an error"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Have to catch this because of the semantics of calling main()</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Exception while calling " + <name>ejbcClassName</name>
                + ". Details: " + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/**
     * Method used to encapsulate the writing of the JAR file. Iterates over
     * the filenames/java.io.Files in the Hashtable stored on the instance
     * variable ejbFiles.
     * @param baseName the base name.
     * @param jarFile the jar file to populate.
     * @param files   the hash table of files to write.
     * @param publicId the id to use.
     * @throws BuildException if there is a problem.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>writeJar</name><parameter_list>(<param><decl><type><name>String</name></type> <name>baseName</name></decl></param>, <param><decl><type><name>File</name></type> <name>jarFile</name></decl></param>, <param><decl><type><name>Hashtable</name></type> <name>files</name></decl></param>,
                            <param><decl><type><name>String</name></type> <name>publicId</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// need to create a generic jar first.</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>genericJarFile</name> =<init> <expr><call><name><name>super</name>.<name>getVendorOutputJarFile</name></name><argument_list>(<argument><expr><name>baseName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>super</name>.<name>writeJar</name></name><argument_list>(<argument><expr><name>baseName</name></expr></argument>, <argument><expr><name>genericJarFile</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>publicId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>alwaysRebuild</name> || <call><name>isRebuildRequired</name><argument_list>(<argument><expr><name>genericJarFile</name></expr></argument>, <argument><expr><name>jarFile</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>buildWeblogicJar</name><argument_list>(<argument><expr><name>genericJarFile</name></expr></argument>, <argument><expr><name>jarFile</name></expr></argument>, <argument><expr><name>publicId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>keepGeneric</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"deleting generic jar " + <call><name><name>genericJarFile</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>genericJarFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Called to validate that the tool parameters have been configured.
     * @throws BuildException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateConfigured</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>validateConfigured</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Helper method to check to see if a weblogic EBJ1.1 jar needs to be
     * rebuilt using ejbc. Called from writeJar it sees if the "Bean" classes
     * are the only thing that needs to be updated and either updates the Jar
     * with the Bean classfile or returns true, saying that the whole weblogic
     * jar needs to be regened with ejbc. This allows faster build times for
     * working developers. &lt;p&gt;
     *
     * The way weblogic ejbc works is it creates wrappers for the publicly
     * defined methods as they are exposed in the remote interface. If the
     * actual bean changes without changing the the method signatures then
     * only the bean classfile needs to be updated and the rest of the
     * weblogic jar file can remain the same. If the Interfaces, ie. the
     * method signatures change or if the xml deployment descriptors changed,
     * the whole jar needs to be rebuilt with ejbc. This is not strictly true
     * for the xml files. If the JNDI name changes then the jar doesnt have to
     * be rebuild, but if the resources references change then it does. At
     * this point the weblogic jar gets rebuilt if the xml files change at
     * all.
     *
     * @param genericJarFile java.io.File The generic jar file.
     * @param weblogicJarFile java.io.File The weblogic jar file to check to
     *      see if it needs to be rebuilt.
     * @return true if the jar needs to be rebuilt.
     */</comment>
    <comment type="line">// CheckStyle:MethodLength OFF - this will no be fixed</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isRebuildRequired</name><parameter_list>(<param><decl><type><name>File</name></type> <name>genericJarFile</name></decl></param>, <param><decl><type><name>File</name></type> <name>weblogicJarFile</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>rebuild</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JarFile</name></type> <name>genericJar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JarFile</name></type> <name>wlJar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>newWLJarFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JarOutputStream</name></type> <name>newJarStream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>genericLoader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Checking if weblogic Jar needs to be rebuilt for jar " + <call><name><name>weblogicJarFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Only go forward if the generic and the weblogic file both exist</comment>
            <if>if <condition>(<expr><call><name><name>genericJarFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>genericJarFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call>
                 &amp;&amp; <call><name><name>weblogicJarFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>weblogicJarFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//open jar files</comment>
                <expr_stmt><expr><name>genericJar</name> = new <call><name>JarFile</name><argument_list>(<argument><expr><name>genericJarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>wlJar</name> = new <call><name>JarFile</name><argument_list>(<argument><expr><name>weblogicJarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Hashtable</name></type> <name>genericEntries</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Hashtable</name></type> <name>wlEntries</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Hashtable</name></type> <name>replaceEntries</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">//get the list of generic jar entries</comment>
                <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>genericJar</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name>JarEntry</name></type> <name>je</name> =<init> <expr>(<name>JarEntry</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>genericEntries</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>je</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>je</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <comment type="line">//get the list of weblogic jar entries</comment>
                <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>wlJar</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name>JarEntry</name></type> <name>je</name> =<init> <expr>(<name>JarEntry</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>wlEntries</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>je</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>je</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>

                <comment type="line">//Cycle Through generic and make sure its in weblogic</comment>
                <expr_stmt><expr><name>genericLoader</name> = <call><name>getClassLoaderFromJar</name><argument_list>(<argument><expr><name>genericJarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>genericEntries</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>filepath</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><call><name><name>wlEntries</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="line">// File name/path match</comment>

                        <comment type="line">// Check files see if same</comment>
                        <decl_stmt><decl><type><name>JarEntry</name></type> <name>genericEntry</name> =<init> <expr>(<name>JarEntry</name>) <call><name><name>genericEntries</name>.<name>get</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>JarEntry</name></type> <name>wlEntry</name> =<init> <expr>(<name>JarEntry</name>) <call><name><name>wlEntries</name>.<name>get</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if>if <condition>(<expr>(<call><name><name>genericEntry</name>.<name>getCrc</name></name><argument_list>()</argument_list></call> != <call><name><name>wlEntry</name>.<name>getCrc</name></name><argument_list>()</argument_list></call>)
                            || (<call><name><name>genericEntry</name>.<name>getSize</name></name><argument_list>()</argument_list></call> != <call><name><name>wlEntry</name>.<name>getSize</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{

                            <if>if <condition>(<expr><call><name><name>genericEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <comment type="line">//File are different see if its an object or an interface</comment>
                                <decl_stmt><decl><type><name>String</name></type> <name>classname</name>
                                    =<init> <expr><call><name><name>genericEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                                    .<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call>
                                    .<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>classname</name> = <call><name><name>classname</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>classname</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <decl_stmt><decl><type><name>Class</name></type> <name>genclass</name> =<init> <expr><call><name><name>genericLoader</name>.<name>loadClass</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <if>if <condition>(<expr><call><name><name>genclass</name>.<name>isInterface</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                                    <comment type="line">//Interface changed   rebuild jar.</comment>
                                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Interface " + <call><name><name>genclass</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                                        + " has changed"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>rebuild</name> = true</expr>;</expr_stmt>
                                    <break>break;</break>
                                }</block></then> <else>else <block>{
                                    <comment type="line">//Object class Changed   update it.</comment>
                                    <expr_stmt><expr><call><name><name>replaceEntries</name>.<name>put</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>genericEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></else></if>
                            }</block></then> <else>else <block>{
                                <comment type="line">// is it the manifest. If so ignore it</comment>
                                <if>if <condition>(<expr>!<call><name><name>genericEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"META-INF/MANIFEST.MF"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                    <comment type="line">//File other then class changed   rebuild</comment>
                                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Non class file " + <call><name><name>genericEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                                        + " has changed"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>rebuild</name> = true</expr>;</expr_stmt>
                                    <break>break;</break>
                                }</block></then></if>
                            }</block></else></if>
                        }</block></then></if>
                    }</block></then> <else>else <block>{
                        <comment type="line">// a file doesnt exist rebuild</comment>

                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"File " + <name>filepath</name> + " not present in weblogic jar"</expr></argument>,
                            <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rebuild</name> = true</expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></else></if>
                }</block></for>

                <if>if <condition>(<expr>!<name>rebuild</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"No rebuild needed - updating jar"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>newWLJarFile</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>weblogicJarFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call> + ".temp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>newWLJarFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>newWLJarFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><name>newJarStream</name> = new <call><name>JarOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>newWLJarFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>newJarStream</name>.<name>setLevel</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">//Copy files from old weblogic jar</comment>
                    <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>wlEntries</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>DEFAULT_BUFFER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>bytesRead</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>JarEntry</name></type> <name>je</name> =<init> <expr>(<name>JarEntry</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if>if <condition>(<expr><call><name><name>je</name>.<name>getCompressedSize</name></name><argument_list>()</argument_list></call> == -1
                            || <call><name><name>je</name>.<name>getCompressedSize</name></name><argument_list>()</argument_list></call> == <call><name><name>je</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>newJarStream</name>.<name>setLevel</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name><name>newJarStream</name>.<name>setLevel</name></name><argument_list>(<argument><expr><name>JAR_COMPRESS_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>

                        <comment type="line">// Update with changed Bean class</comment>
                        <if>if <condition>(<expr><call><name><name>replaceEntries</name>.<name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>je</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Updating Bean class from generic Jar "
                                + <call><name><name>je</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// Use the entry from the generic jar</comment>
                            <expr_stmt><expr><name>je</name> = (<name>JarEntry</name>) <call><name><name>replaceEntries</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>je</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>is</name> = <call><name><name>genericJar</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><name>je</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <comment type="line">//use fle from original weblogic jar</comment>

                            <expr_stmt><expr><name>is</name> = <call><name><name>wlJar</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><name>je</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                        <expr_stmt><expr><call><name><name>newJarStream</name>.<name>putNextEntry</name></name><argument_list>(<argument><expr>new <call><name>JarEntry</name><argument_list>(<argument><expr><call><name><name>je</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <while>while <condition>(<expr>(<name>bytesRead</name> = <call><name><name>is</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call>) != -1</expr>)</condition> <block>{
                            <expr_stmt><expr><call><name><name>newJarStream</name>.<name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>bytesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></while>
                        <expr_stmt><expr><call><name><name>is</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Weblogic Jar rebuild needed due to changed "
                         + "interface or XML"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>rebuild</name> = true</expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>cnfmsg</name> =<init> <expr>"ClassNotFoundException while processing ejb-jar file"
                 + ". Details: "
                 + <call><name><name>cnfe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>cnfmsg</name></expr></argument>, <argument><expr><name>cnfe</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"IOException while processing ejb-jar file "
                 + ". Details: "
                 + <call><name><name>ioe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <comment type="line">// need to close files and perhaps rename output</comment>
            <if>if <condition>(<expr><name>genericJar</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>genericJar</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>closeException</name></decl></param>) <block>{
                    <comment type="line">// empty</comment>
                }</block></catch></try>
            }</block></then></if>

            <if>if <condition>(<expr><name>wlJar</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>wlJar</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>closeException</name></decl></param>) <block>{
                    <comment type="line">// empty</comment>
                }</block></catch></try>
            }</block></then></if>

            <if>if <condition>(<expr><name>newJarStream</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>newJarStream</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>closeException</name></decl></param>) <block>{
                    <comment type="line">// empty</comment>
                }</block></catch></try>

                <try>try <block>{
                    <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>rename</name></name><argument_list>(<argument><expr><name>newWLJarFile</name></expr></argument>, <argument><expr><name>weblogicJarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>renameException</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>renameException</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rebuild</name> = true</expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>genericLoader</name> != <name>null</name>
                &amp;&amp; <name>genericLoader</name> <name>instanceof</name> <name>AntClassLoader</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>AntClassLoader</name></type> <name>loader</name> =<init> <expr>(<name>AntClassLoader</name>) <name>genericLoader</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>loader</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>

        <return>return <expr><name>rebuild</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Helper method invoked by isRebuildRequired to get a ClassLoader for a
     * Jar File passed to it.
     *
     * @param classjar java.io.File representing jar file to get classes from.
     * @return the classloader for the jarfile.
     * @throws IOException if there is a problem.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ClassLoader</name></type> <name>getClassLoaderFromJar</name><parameter_list>(<param><decl><type><name>File</name></type> <name>classjar</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>lookupPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>lookupPath</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>classjar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Path</name></type> <name>classpath</name> =<init> <expr><call><name>getCombinedClasspath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>classpath</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>lookupPath</name>.<name>append</name></name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>lookupPath</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
