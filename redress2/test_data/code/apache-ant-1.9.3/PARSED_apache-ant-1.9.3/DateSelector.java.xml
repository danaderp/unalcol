<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\selectors\DateSelector.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>TimeComparison</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Selector that chooses files based on their last modified date.
 *
 * @since 1.5
 */</comment>
<class><specifier>public</specifier> class <name>DateSelector</name> <super><extends>extends <name>BaseExtendSelector</name></extends></super> <block>{

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>millis</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>dateTime</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeDirs</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>granularity</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TimeComparison</name></type> <name>when</name> =<init> <expr><name><name>TimeComparison</name>.<name>EQUAL</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Key to used for parameterized custom selector */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MILLIS_KEY</name> =<init> <expr>"millis"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Key to used for parameterized custom selector */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATETIME_KEY</name> =<init> <expr>"datetime"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Key to used for parameterized custom selector */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHECKDIRS_KEY</name> =<init> <expr>"checkdirs"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Key to used for parameterized custom selector */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GRANULARITY_KEY</name> =<init> <expr>"granularity"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Key to used for parameterized custom selector */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WHEN_KEY</name> =<init> <expr>"when"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Key to used for parameterized custom selector */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PATTERN_KEY</name> =<init> <expr>"pattern"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;DateSelector&lt;/code&gt; instance.
     *
     */</comment>
    <constructor><specifier>public</specifier> <name>DateSelector</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>granularity</name> = <call><name><name>FILE_UTILS</name>.<name>getFileTimestampGranularity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @return a string describing this object
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"{dateselector date: "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>" compare: "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>when</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>" granularity: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>pattern</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>" pattern: "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the time; for users who prefer to express time in ms since 1970.
     *
     * @param millis the time to compare file's last modified date to,
     *        expressed in milliseconds.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMillis</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>millis</name></name> = <name>millis</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the millisecond value the selector is set for.
     * @return the millisecond value.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getMillis</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>dateTime</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>millis</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the date. The user must supply it in MM/DD/YYYY HH:MM AM_PM format,
     * unless an alternate pattern is specified via the pattern attribute.
     *
     * @param dateTime a formatted date &lt;code&gt;String&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDatetime</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dateTime</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dateTime</name></name> = <name>dateTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>millis</name> = -1</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to check dates on directories.
     *
     * @param includeDirs whether to check the timestamp on directories.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCheckdirs</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeDirs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>includeDirs</name></name> = <name>includeDirs</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the number of milliseconds leeway we will give before we consider
     * a file not to have matched a date.
     * @param granularity the number of milliseconds leeway.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGranularity</name><parameter_list>(<param><decl><type><name>int</name></type> <name>granularity</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>granularity</name></name> = <name>granularity</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the type of comparison to be done on the file's last modified
     * date.
     *
     * @param tcmp The comparison to perform, an EnumeratedAttribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWhen</name><parameter_list>(<param><decl><type><name>TimeComparisons</name></type> <name>tcmp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setWhen</name><argument_list>(<argument><expr>(<name>TimeComparison</name>) <name>tcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the comparison type.
     * @param t TimeComparison object.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWhen</name><parameter_list>(<param><decl><type><name>TimeComparison</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>when</name> = <name>t</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the pattern to be used for the SimpleDateFormat.
     *
     * @param pattern the pattern that defines the date format.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pattern</name></name> = <name>pattern</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * When using this as a custom selector, this method will be called.
     * It translates each parameter into the appropriate setXXX() call.
     *
     * @param parameters the complete set of parameters for this selector.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setParameters</name><parameter_list>(<param><decl><type><name><name>Parameter</name><index>[]</index></name></type> <name>parameters</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>parameters</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>parameters</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>paramname</name> =<init> <expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>MILLIS_KEY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>paramname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name>setMillis</name><argument_list>(<argument><expr><call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                        <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Invalid millisecond setting "
                                + <name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>DATETIME_KEY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>paramname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setDatetime</name><argument_list>(<argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>CHECKDIRS_KEY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>paramname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setCheckdirs</name><argument_list>(<argument><expr><call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(<argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>GRANULARITY_KEY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>paramname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name>setGranularity</name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                        <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Invalid granularity setting "
                            + <name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>WHEN_KEY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>paramname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setWhen</name><argument_list>(<argument><expr>new <call><name>TimeComparison</name><argument_list>(<argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>PATTERN_KEY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>paramname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setPattern</name><argument_list>(<argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Invalid parameter " + <name>paramname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if></else></if></else></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * This is a consistency check to ensure the selector's required
     * values have been set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>verifySettings</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>dateTime</name> == <name>null</name> &amp;&amp; <name>millis</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"You must provide a datetime or the number of "
                    + "milliseconds."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>millis</name> &lt; 0 &amp;&amp; <name>dateTime</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// check millis and only set it once.</comment>
            <decl_stmt><decl><type><name>DateFormat</name></type> <name>df</name> =<init> <expr>((<name>pattern</name> == <name>null</name>)
                ? <call><name><name>DateFormat</name>.<name>getDateTimeInstance</name></name><argument_list>(
                    <argument><expr><name><name>DateFormat</name>.<name>SHORT</name></name></expr></argument>, <argument><expr><name><name>DateFormat</name>.<name>SHORT</name></name></expr></argument>, <argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call>
                : new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>

            <try>try <block>{
                <expr_stmt><expr><call><name>setMillis</name><argument_list>(<argument><expr><call><name><name>df</name>.<name>parse</name></name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>millis</name> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Date of " + <name>dateTime</name>
                        + " results in negative milliseconds value"
                        + " relative to epoch (January 1, 1970, 00:00:00 GMT)."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>pe</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Date of " + <name>dateTime</name>
                        + " Cannot be parsed correctly. It should be in"
                        + ((<name>pattern</name> == <name>null</name>)
                        ? " MM/DD/YYYY HH:MM AM_PM" : <name>pattern</name>) + " format."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * The heart of the matter. This is where the selector gets to decide
     * on the inclusion of a file in a particular fileset.
     *
     * @param basedir the base directory from which the scan is being performed.
     * @param filename is the name of the file to check.
     * @param file is a java.io.File object the selector can use.
     * @return whether the file is selected.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelected</name><parameter_list>(<param><decl><type><name>File</name></type> <name>basedir</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr>(<call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> &amp;&amp; !<name>includeDirs</name>)
            || <call><name><name>when</name>.<name>evaluate</name></name><argument_list>(<argument><expr><call><name><name>file</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>millis</name></expr></argument>, <argument><expr><name>granularity</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Enumerated attribute with the values for time comparison.
     * &lt;p&gt;
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TimeComparisons</name> <super><extends>extends <name>TimeComparison</name></extends></super> <block>{
    }</block></class>

}</block></class>


</unit>
