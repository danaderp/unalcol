<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\util\JavaClassHelper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>ClassParser</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>ConstantValue</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>Field</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>JavaClass</name></name>;</import>

<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF - bc</comment>
<comment type="javadoc">/**
 * Helper class that filters constants from a Java Class
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>JavaClassHelper</name> <block>{
    <comment type="javadoc">/** System specific line separator. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LS</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get the constants declared in a file as name=value
     *
     * @param bytes the class as a array of bytes
     * @return a StringBuffer contains the name=value pairs
     * @exception IOException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StringBuffer</name></type> <name>getConstants</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayInputStream</name></type> <name>bis</name> =<init> <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClassParser</name></type> <name>parser</name> =<init> <expr>new <call><name>ClassParser</name><argument_list>(<argument><expr><name>bis</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>JavaClass</name></type> <name>javaClass</name> =<init> <expr><call><name><name>parser</name>.<name>parse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Field</name><index>[]</index></type> <name>fields</name> =<init> <expr><call><name><name>javaClass</name>.<name>getFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>fields</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Field</name></type> <name>field</name> =<init> <expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>field</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ConstantValue</name></type> <name>cv</name> =<init> <expr><call><name><name>field</name>.<name>getConstantValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>cv</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>cvs</name> =<init> <expr><call><name><name>cv</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">//Remove start and end quotes if field is a String</comment>
                    <if>if <condition>(<expr><call><name><name>cvs</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>cvs</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>cvs</name> = <call><name><name>cvs</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>cvs</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>field</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>cvs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>LS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>sb</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
