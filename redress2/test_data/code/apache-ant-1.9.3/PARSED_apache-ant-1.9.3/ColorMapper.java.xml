<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\optional\image\ColorMapper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>

<comment type="javadoc">/**
 *
 * @see org.apache.tools.ant.taskdefs.optional.image.Image
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ColorMapper</name> <block>{
    <comment type="javadoc">/** private constructor for Utility class */</comment>
    <constructor><specifier>private</specifier> <name>ColorMapper</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/** black string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_BLACK</name> =<init> <expr>"black"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** blue string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_BLUE</name> =<init> <expr>"blue"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** cyan string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_CYAN</name> =<init> <expr>"cyan"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** black string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_DARKGRAY</name> =<init> <expr>"darkgray"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** gray string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_GRAY</name> =<init> <expr>"gray"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** lightgray string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_LIGHTGRAY</name> =<init> <expr>"lightgray"</expr></init></decl>;</decl_stmt>
    <comment type="line">// Gotta atleast put in the proper spelling :-P</comment>
    <comment type="javadoc">/** darkgrey string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_DARKGREY</name> =<init> <expr>"darkgrey"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** grey string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_GREY</name> =<init> <expr>"grey"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** lightgrey string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_LIGHTGREY</name> =<init> <expr>"lightgrey"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** green string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_GREEN</name> =<init> <expr>"green"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** magenta string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_MAGENTA</name> =<init> <expr>"magenta"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** orange string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_ORANGE</name> =<init> <expr>"orange"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** pink string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_PINK</name> =<init> <expr>"pink"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** reg string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_RED</name> =<init> <expr>"red"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** white string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_WHITE</name> =<init> <expr>"white"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** yellow string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLOR_YELLOW</name> =<init> <expr>"yellow"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Convert a color name to a color value.
     * @param colorName a string repr of the color.
     * @return the color value.
     * @todo refactor to use an EnumeratedAttribute (maybe?)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Color</name></type> <name>getColorByName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>colorName</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_BLACK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>black</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_BLUE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>blue</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_CYAN</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>cyan</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_DARKGRAY</name></expr></argument>)</argument_list></call> || <call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_DARKGREY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>darkGray</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_GRAY</name></expr></argument>)</argument_list></call> || <call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_GREY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>gray</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_LIGHTGRAY</name></expr></argument>)</argument_list></call> || <call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_LIGHTGREY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>lightGray</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_GREEN</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>green</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_MAGENTA</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>magenta</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_ORANGE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>orange</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_PINK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>pink</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_RED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>red</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_WHITE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>white</name></name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>colorName</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>COLOR_YELLOW</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Color</name>.<name>yellow</name></name></expr>;</return>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        <return>return <expr><name><name>Color</name>.<name>black</name></name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
