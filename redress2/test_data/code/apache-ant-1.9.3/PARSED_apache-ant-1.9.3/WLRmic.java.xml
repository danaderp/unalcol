<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\rmic\WLRmic.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>rmic</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * The implementation of the rmic for WebLogic
 *
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> class <name>WLRmic</name> <super><extends>extends <name>DefaultRmicAdapter</name></extends></super> <block>{
    <comment type="javadoc">/** The classname of the weblogic rmic */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WLRMIC_CLASSNAME</name> =<init> <expr>"weblogic.rmic"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * the name of this adapter for users to select
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPILER_NAME</name> =<init> <expr>"weblogic"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The error string to use if not able to find the weblogic rmic */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_NO_WLRMIC_ON_CLASSPATH</name> =<init>
        <expr>"Cannot use WebLogic rmic, as it is not "
        + "available. Add it to Ant's classpath with the -lib option"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The error string to use if not able to start the weblogic rmic */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_WLRMIC_FAILED</name> =<init> <expr>"Error starting WebLogic rmic: "</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** The stub suffix */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WL_RMI_STUB_SUFFIX</name> =<init> <expr>"_WLStub"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** The skeleton suffix */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WL_RMI_SKEL_SUFFIX</name> =<init> <expr>"_WLSkel"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** unsupported error message */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNSUPPORTED_STUB_OPTION</name> =<init> <expr>"Unsupported stub option: "</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Carry out the rmic compilation.
     * @return true if the compilation succeeded
     * @throws  BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Using WebLogic rmic"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmd</name> =<init> <expr><call><name>setupRmicCommand</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"-noexit"</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>AntClassLoader</name></type> <name>loader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <comment type="line">// Create an instance of the rmic</comment>
            <decl_stmt><decl><type><name>Class</name></type> <name>c</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>getClasspath</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>c</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>WLRMIC_CLASSNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>loader</name>
                    = <call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>getClasspath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>WLRMIC_CLASSNAME</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name>Method</name></type> <name>doRmic</name> =<init> <expr><call><name><name>c</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"main"</expr></argument>,
                                        <argument><expr>new <name><name>Class</name> <index>[]</index></name> <block>{<expr><name><name>String</name><index>[]</index></name>.class</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>doRmic</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><call><name><name>cmd</name>.<name>getArguments</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ERROR_NO_WLRMIC_ON_CLASSPATH</name></expr></argument>, <argument><expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>ex</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
                <throw>throw <expr>(<name>BuildException</name>) <name>ex</name></expr>;</throw>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ERROR_WLRMIC_FAILED</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>,
                                         <argument><expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>loader</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>loader</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get the suffix for the rmic stub classes
     * @return the stub suffix
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getStubClassSuffix</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>WL_RMI_STUB_SUFFIX</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the suffix for the rmic skeleton classes
     * @return the skeleton suffix
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSkelClassSuffix</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>WL_RMI_SKEL_SUFFIX</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Strip out all -J args from the command list.
     *
     * @param compilerArgs the original compiler arguments
     * @return the filtered set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name><index>[]</index></type> <name>preprocessCompilerArgs</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>compilerArgs</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>filterJvmCompilerArgs</name><argument_list>(<argument><expr><name>compilerArgs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This is an override point; no stub version is returned. If any
     * stub option is set, a warning is printed.
     * @return null, for no stub version
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>addStubVersionOptions</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//handle the many different stub options.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>stubVersion</name> =<init> <expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>getStubVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>stubVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr><name>UNSUPPORTED_STUB_OPTION</name> + <name>stubVersion</name></expr></argument>,
                          <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
