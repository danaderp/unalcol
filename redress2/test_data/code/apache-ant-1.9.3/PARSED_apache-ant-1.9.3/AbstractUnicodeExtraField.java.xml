<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\zip\AbstractUnicodeExtraField.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>CRC32</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipException</name></name>;</import>

<comment type="javadoc">/**
 * A common base class for Unicode extra information extra fields.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractUnicodeExtraField</name> <super><implements>implements <name>ZipExtraField</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>nameCRC32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>unicodeName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>data</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>AbstractUnicodeExtraField</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Assemble as unicode extension from the name/comment and
     * encoding of the original zip entry.
     * 
     * @param text The file name or comment.
     * @param bytes The encoded of the filename or comment in the zip
     * file.
     * @param off The offset of the encoded filename or comment in
     * &lt;code&gt;bytes&lt;/code&gt;.
     * @param len The length of the encoded filename or commentin
     * &lt;code&gt;bytes&lt;/code&gt;.
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractUnicodeExtraField</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>, <param><decl><type><name>int</name></type> <name>off</name></decl></param>,
                                        <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CRC32</name></type> <name>crc32</name> =<init> <expr>new <call><name>CRC32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>crc32</name>.<name>update</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nameCRC32</name> = <call><name><name>crc32</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>unicodeName</name> = <call><name><name>text</name>.<name>getBytes</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"FATAL: UTF-8 encoding not supported."</expr></argument>,
                                       <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></constructor>

    <comment type="javadoc">/**
     * Assemble as unicode extension from the name/comment and
     * encoding of the original zip entry.
     * 
     * @param text The file name or comment.
     * @param bytes The encoded of the filename or comment in the zip
     * file.
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractUnicodeExtraField</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>bytes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assembleData</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>unicodeName</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><name>data</name> = new <name><name>byte</name><index>[<expr>5 + <name><name>unicodeName</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
        <comment type="line">// version 1</comment>
        <expr_stmt><expr><name><name>data</name><index>[<expr>0</expr>]</index></name> = 0x01</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>ZipLong</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>nameCRC32</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>unicodeName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name><name>unicodeName</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return The CRC32 checksum of the filename or comment as
     *         encoded in the central directory of the zip file.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getNameCRC32</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>nameCRC32</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @param nameCRC32 The CRC32 checksum of the filename as encoded
     *         in the central directory of the zip file to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNameCRC32</name><parameter_list>(<param><decl><type><name>long</name></type> <name>nameCRC32</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>nameCRC32</name></name> = <name>nameCRC32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return The utf-8 encoded name.
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getUnicodeName</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>b</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>unicodeName</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>b</name> = new <name><name>byte</name><index>[<expr><name><name>unicodeName</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>unicodeName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>b</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>b</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @param unicodeName The utf-8 encoded name to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnicodeName</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>unicodeName</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>unicodeName</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>unicodeName</name></name> = new <name><name>byte</name><index>[<expr><name><name>unicodeName</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>unicodeName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>this</name>.<name>unicodeName</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><name><name>unicodeName</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>unicodeName</name></name> = <name>null</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>data</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getCentralDirectoryData</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>data</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>assembleData</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>b</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>data</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>b</name> = new <name><name>byte</name><index>[<expr><name><name>data</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>b</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>b</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>public</specifier> <name>ZipShort</name></type> <name>getCentralDirectoryLength</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>data</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assembleData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>new <call><name>ZipShort</name><argument_list>(<argument><expr><name><name>data</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getLocalFileDataData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCentralDirectoryData</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>public</specifier> <name>ZipShort</name></type> <name>getLocalFileDataLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCentralDirectoryLength</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>parseFromLocalFileData</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ZipException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>length</name> &lt; 5</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ZipException</name><argument_list>(<argument><expr>"UniCode path extra data must have at least"
                                   + " 5 bytes."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>version</name> =<init> <expr><name><name>buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>version</name> != 0x01</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ZipException</name><argument_list>(<argument><expr>"Unsupported version [" + <name>version</name>
                                   + "] for UniCode path extra data."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><name>nameCRC32</name> = <call><name><name>ZipLong</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unicodeName</name> = new <name><name>byte</name><index>[<expr><name>length</name> - 5</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name> + 5</expr></argument>, <argument><expr><name>unicodeName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
