<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\KeepAliveOutputStream.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>FilterOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>

<comment type="javadoc">/**
 * Class that can be used to wrap &lt;tt&gt;System.out&lt;/tt&gt; and &lt;tt&gt;System.err&lt;/tt&gt;
 * without getting anxious about any client closing the stream.
 *
 * &lt;p&gt;
 * In code-language it means that it is not necessary to do:
 * &lt;pre&gt;
 * if (out != System.out &amp;&amp; out!= System.err) {
 *   out.close();
 * }
 * &lt;/pre&gt;
 * &lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>KeepAliveOutputStream</name> <super><extends>extends <name>FilterOutputStream</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Constructor of KeepAliveOutputStream.
     *
     * @param out an OutputStream value, it should be standard output.
     */</comment>
    <constructor><specifier>public</specifier> <name>KeepAliveOutputStream</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * This method does nothing.
     * @throws IOException as we are overriding FilterOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// do not close the stream</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience factory method that returns a non-closing
     * PrintStream around System.out.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PrintStream</name></type> <name>wrapSystemOut</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>wrap</name><argument_list>(<argument><expr><name><name>System</name>.<name>out</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience factory method that returns a non-closing
     * PrintStream around System.err.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PrintStream</name></type> <name>wrapSystemErr</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>wrap</name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>PrintStream</name></type> <name>wrap</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>ps</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>KeepAliveOutputStream</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
