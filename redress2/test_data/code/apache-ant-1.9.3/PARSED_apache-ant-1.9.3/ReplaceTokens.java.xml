<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\ReplaceTokens.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Replaces tokens in the original input with user-supplied values.
 *
 * Example:
 *
 * &lt;pre&gt;&amp;lt;replacetokens begintoken=&amp;quot;#&amp;quot; endtoken=&amp;quot;#&amp;quot;&amp;gt;
 *   &amp;lt;token key=&amp;quot;DATE&amp;quot; value=&amp;quot;${TODAY}&amp;quot;/&amp;gt;
 * &amp;lt;/replacetokens&amp;gt;&lt;/pre&gt;
 *
 * Or:
 *
 * &lt;pre&gt;&amp;lt;filterreader classname="org.apache.tools.ant.filters.ReplaceTokens"&amp;gt;
 *   &amp;lt;param type="tokenchar" name="begintoken" value="#"/&amp;gt;
 *   &amp;lt;param type="tokenchar" name="endtoken" value="#"/&amp;gt;
 *   &amp;lt;param type="token" name="DATE" value="${TODAY}"/&amp;gt;
 * &amp;lt;/filterreader&amp;gt;&lt;/pre&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ReplaceTokens</name>
    <super><extends>extends <name>BaseParamFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{
    <comment type="javadoc">/** Default "begin token" character. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name></type> <name>DEFAULT_BEGIN_TOKEN</name> =<init> <expr>'@'</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default "end token" character. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name></type> <name>DEFAULT_END_TOKEN</name> =<init> <expr>'@'</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Data to be used before reading from stream again */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>queuedData</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** replacement test from a token */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>replaceData</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Index into replacement data */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>replaceIndex</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Index into queue data */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>queueIndex</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Hashtable to hold the replacee-replacer pairs (String to String). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hash</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Character marking the beginning of a token. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>char</name></type> <name>beginToken</name> =<init> <expr><name>DEFAULT_BEGIN_TOKEN</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Character marking the end of a token. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>char</name></type> <name>endToken</name> =<init> <expr><name>DEFAULT_END_TOKEN</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>ReplaceTokens</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>ReplaceTokens</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getNextChar</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>queueIndex</name> != -1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name> =<init> <expr><call><name><name>queuedData</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>queueIndex</name>++</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>queueIndex</name> &gt;= <call><name><name>queuedData</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>queueIndex</name> = -1</expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>ch</name></expr>;</return>
        }</block></then></if>

        <return>return <expr><call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the next character in the filtered stream, replacing tokens
     * from the original stream.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name>getInitialized</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setInitialized</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>replaceIndex</name> != -1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name> =<init> <expr><call><name><name>replaceData</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>replaceIndex</name>++</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>replaceIndex</name> &gt;= <call><name><name>replaceData</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>replaceIndex</name> = -1</expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>ch</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr><call><name>getNextChar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>ch</name> == <name>beginToken</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuffer</name></type> <name>key</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do  <block>{
                <expr_stmt><expr><name>ch</name> = <call><name>getNextChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ch</name> != -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>key</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>) <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <break>break;</break>
                }</block></else></if>
            }</block> while <condition>(<expr><name>ch</name> != <name>endToken</name></expr>)</condition>;</do>

            <if>if <condition>(<expr><name>ch</name> == -1</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>queuedData</name> == <name>null</name> || <name>queueIndex</name> == -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>queuedData</name> = <call><name><name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>queuedData</name>
                        = <call><name><name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call> + <call><name><name>queuedData</name>.<name>substring</name></name><argument_list>(<argument><expr><name>queueIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name><name>queuedData</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>queueIndex</name> = 0</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>queueIndex</name> = -1</expr>;</expr_stmt>
                }</block></else></if>
                <return>return <expr><name>beginToken</name></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>key</name>.<name>setLength</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>replaceWith</name> =<init> <expr>(<name>String</name>) <call><name><name>hash</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>replaceWith</name> != <name>null</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>replaceWith</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>replaceData</name> = <name>replaceWith</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>replaceIndex</name> = 0</expr>;</expr_stmt>
                    }</block></then></if>
                    <return>return <expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</return>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>newData</name> =<init> <expr><call><name><name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call> + <name>endToken</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>queuedData</name> == <name>null</name> || <name>queueIndex</name> == -1</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>queuedData</name> = <name>newData</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>queuedData</name> = <name>newData</name> + <call><name><name>queuedData</name>.<name>substring</name></name><argument_list>(<argument><expr><name>queueIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>queueIndex</name> = 0</expr>;</expr_stmt>
                    <return>return <expr><name>beginToken</name></expr>;</return>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><name>ch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the "begin token" character.
     *
     * @param beginToken the character used to denote the beginning of a token
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBeginToken</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>beginToken</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>beginToken</name></name> = <name>beginToken</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the "begin token" character.
     *
     * @return the character used to denote the beginning of a token
     */</comment>
    <function><type><specifier>private</specifier> <name>char</name></type> <name>getBeginToken</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>beginToken</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the "end token" character.
     *
     * @param endToken the character used to denote the end of a token
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEndToken</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>endToken</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>endToken</name></name> = <name>endToken</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the "end token" character.
     *
     * @return the character used to denote the end of a token
     */</comment>
    <function><type><specifier>private</specifier> <name>char</name></type> <name>getEndToken</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>endToken</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A resource containing properties, each of which is interpreted
     * as a token/value pair.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPropertiesResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>makeTokensFromProperties</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a token element to the map of tokens to replace.
     *
     * @param token The token to add to the map of replacements.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredToken</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Token</name></type> <name>token</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>hash</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>token</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>token</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns properties from a specified properties file.
     *
     * @param fileName The file to load properties from.
     */</comment>
    <function><type><specifier>private</specifier> <name>Properties</name></type> <name>getProperties</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>in</name> = <call><name><name>r</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>ioe</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <return>return <expr><name>props</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the map of tokens to replace.
     *
     * @param hash A map (String-&gt;String) of token keys to replacement
     * values. Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setTokens</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hash</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>hash</name></name> = <name>hash</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the map of tokens which will be replaced.
     *
     * @return a map (String-&gt;String) of token keys to replacement
     * values
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTokens</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>hash</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new ReplaceTokens using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ReplaceTokens</name></type> <name>newFilter</name> =<init> <expr>new <call><name>ReplaceTokens</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setBeginToken</name></name><argument_list>(<argument><expr><call><name>getBeginToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setEndToken</name></name><argument_list>(<argument><expr><call><name>getEndToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setTokens</name></name><argument_list>(<argument><expr><call><name>getTokens</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setInitialized</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Initializes tokens and loads the replacee-replacer hashtable.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><call><name>getParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>params</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>params</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>type</name> =<init> <expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>"tokenchar".<call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> =<init> <expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr>"begintoken".<call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Begin token cannot "
                                    + "be empty"</expr></argument>)</argument_list></call></expr>;</throw>
                            }</block></then></if>
                            <expr_stmt><expr><name>beginToken</name> = <name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <if>if <condition>(<expr>"endtoken".<call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"End token cannot "
                                    + "be empty"</expr></argument>)</argument_list></call></expr>;</throw>
                            }</block></then></if>
                            <expr_stmt><expr><name>endToken</name> = <name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if></else></if>
                    }</block></then> <else>else <if>if <condition>(<expr>"token".<call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> =<init> <expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name> =<init> <expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>hash</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr>"propertiesfile".<call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>makeTokensFromProperties</name><argument_list>(
                            <argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if></else></if>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>makeTokensFromProperties</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr><call><name>getProperties</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>props</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>hash</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Holds a token
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Token</name> <block>{

        <comment type="javadoc">/** Token key */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>key</name></decl>;</decl_stmt>

        <comment type="javadoc">/** Token value */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Sets the token key
         *
         * @param key The key for this token. Must not be &lt;code&gt;null&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setKey</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Sets the token value
         *
         * @param value The value for this token. Must not be &lt;code&gt;null&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the key for this token.
         *
         * @return the key for this token
         */</comment>
        <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>key</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the value for this token.
         *
         * @return the value for this token
         */</comment>
        <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>value</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
