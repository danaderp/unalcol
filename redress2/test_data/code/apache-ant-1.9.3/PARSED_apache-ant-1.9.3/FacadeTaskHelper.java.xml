<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\facade\FacadeTaskHelper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>facade</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 * Helper class for facade implementations - encapsulates treatment of
 * explicit implementation choices, magic properties and
 * implementation specific command line arguments.
 *
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>FacadeTaskHelper</name> <block>{

    <comment type="javadoc">/**
     * Command line arguments.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>args</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The explicitly chosen implementation.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>userChoice</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The magic property to consult.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>magicValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The default value.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>defaultValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * User specified path used as classpath when loading the implementation.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>implementationClasspath</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * @param defaultValue The default value for the implementation.
     * Must not be null.
     */</comment>
    <constructor><specifier>public</specifier> <name>FacadeTaskHelper</name><parameter_list>(<param><decl><type><name>String</name></type> <name>defaultValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @param defaultValue The default value for the implementation.
     * Must not be null.
     * @param magicValue the value of a magic property that may hold a user.
     * choice.  May be null.
     */</comment>
    <constructor><specifier>public</specifier> <name>FacadeTaskHelper</name><parameter_list>(<param><decl><type><name>String</name></type> <name>defaultValue</name></decl></param>, <param><decl><type><name>String</name></type> <name>magicValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>defaultValue</name></name> = <name>defaultValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>magicValue</name></name> = <name>magicValue</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Used to set the value of the magic property.
     * @param magicValue the value of a magic property that may hold a user.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMagicValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>magicValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>magicValue</name></name> = <name>magicValue</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Used for explicit user choices.
     * @param userChoice the explicitly chosen implementation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setImplementation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userChoice</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>userChoice</name></name> = <name>userChoice</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieves the implementation.
     * @return the implementation.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getImplementation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>userChoice</name> != <name>null</name> ? <name>userChoice</name>
                                  : (<name>magicValue</name> != <name>null</name> ? <name>magicValue</name>
                                                        : <name>defaultValue</name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieves the explicit user choice.
     * @return the explicit user choice.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getExplicitChoice</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>userChoice</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Command line argument.
     * @param arg an argument to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addImplementationArgument</name><parameter_list>(<param><decl><type><name>ImplementationSpecificArgument</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>args</name>.<name>add</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieves the command line arguments enabled for the current
     * facade implementation.
     * @return an array of command line arguments.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getArgs</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>tmp</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>args</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>e</name> =<init> <expr><call><name><name>args</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>ImplementationSpecificArgument</name></type> <name>arg</name> =<init>
                <expr>((<name>ImplementationSpecificArgument</name>) <call><name><name>e</name>.<name>next</name></name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>curr</name> =<init> <expr><call><name><name>arg</name>.<name>getParts</name></name><argument_list>(<argument><expr><call><name>getImplementation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>curr</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>tmp</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>curr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>res</name> =<init> <expr>new <name><name>String</name><index>[<expr><call><name><name>tmp</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name><name>String</name><index>[]</index></name>) <call><name><name>tmp</name>.<name>toArray</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests whether the implementation has been chosen by the user
     * (either via a magic property or explicitly.
     * @return true if magic or user choice has be set.
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasBeenSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>userChoice</name> != <name>null</name> || <name>magicValue</name> != <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The classpath to use when loading the implementation.
     *
     * @param project the current project
     * @return a Path instance that may be appended to
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>getImplementationClasspath</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>implementationClasspath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>implementationClasspath</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>implementationClasspath</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
