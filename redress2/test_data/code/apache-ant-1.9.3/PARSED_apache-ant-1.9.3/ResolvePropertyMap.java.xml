<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\property\ResolvePropertyMap.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Class to resolve properties in a map. This class is explicitly not threadsafe.
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>ResolvePropertyMap</name> <super><implements>implements <name>GetProperty</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>seen</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ParseProperties</name></type> <name>parseProperties</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>GetProperty</name></type> <name>master</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>prefix</name></decl>;</decl_stmt>
    <comment type="line">// whether properties of the value side of the map should be</comment>
    <comment type="line">// expanded</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>prefixValues</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="line">// whether the current getProperty call is expanding the key side</comment>
    <comment type="line">// of the map</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>expandingLHS</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor with a master getproperty and a collection of expanders.
     * @param project the current ant project.
     * @param master the master property holder (usually PropertyHelper)
     * @param expanders a collection of expanders (usually from PropertyHelper).
     */</comment>
    <constructor><specifier>public</specifier> <name>ResolvePropertyMap</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>GetProperty</name></type> <name>master</name></decl></param>, <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>PropertyExpander</name></argument>&gt;</argument_list></name></type> <name>expanders</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>master</name></name> = <name>master</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>parseProperties</name></name> = new <call><name>ParseProperties</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>expanders</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the value of a property if it is set.
     * @param name name of the property.
     * @return the property value, or null for no match or for name being null.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>seen</name>.<name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Property " + <name>name</name> + " was circularly " + "defined."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <try>try <block>{

            <comment type="line">// If the property we are looking up is a key in the map</comment>
            <comment type="line">// (first call into this method from resolveAllProperties)</comment>
            <comment type="line">// or we've been asked to prefix the value side (later</comment>
            <comment type="line">// recursive calls via the GetProperty interface) the</comment>
            <comment type="line">// prefix must be prepended when looking up the property</comment>
            <comment type="line">// outside of the map.</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>fullKey</name> =<init> <expr><name>name</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>prefix</name> != <name>null</name> &amp;&amp; (<name>expandingLHS</name> || <name>prefixValues</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fullKey</name> = <name>prefix</name> + <name>name</name></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>Object</name></type> <name>masterValue</name> =<init> <expr><call><name><name>master</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>fullKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>masterValue</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// If the property already has a value outside of the</comment>
                <comment type="line">// map, use that value to enforce property</comment>
                <comment type="line">// immutability.</comment>

                <return>return <expr><name>masterValue</name></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>seen</name>.<name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>expandingLHS</name> = false</expr>;</expr_stmt>
            <comment type="line">// will recurse into this method for each property</comment>
            <comment type="line">// reference found in the map's value</comment>
            <return>return <expr><call><name><name>parseProperties</name>.<name>parseProperties</name></name><argument_list>(<argument><expr>(<name>String</name>) <call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>seen</name>.<name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * The action method - resolves all the properties in a map.
     * @param map the map to resolve properties in.
     * @deprecated since Ant 1.8.2, use the three-arg method instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resolveAllProperties</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>resolveAllProperties</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The action method - resolves all the properties in a map.
     * @param map the map to resolve properties in.
     * @param prefix the prefix the properties defined inside the map
     * will finally receive - may be null.
     * @deprecated since Ant 1.8.2, use the three-arg method instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resolveAllProperties</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></param>, <param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>resolveAllProperties</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The action method - resolves all the properties in a map.
     * @param map the map to resolve properties in.
     * @param prefix the prefix the properties defined inside the map
     * will finally receive - may be null.
     * @param prefixValues - whether the prefix will be applied
     * to properties on the value side of the map as well.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resolveAllProperties</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></param>, <param><decl><type><name>String</name></type> <name>prefix</name></decl></param>,
                                     <param><decl><type><name>boolean</name></type> <name>prefixValues</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// The map, prefix and prefixValues flag get used in the</comment>
        <comment type="line">// getProperty callback</comment>
        <expr_stmt><expr><name><name>this</name>.<name>map</name></name> = <name>map</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>prefix</name></name> = <name>prefix</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>prefixValues</name></name> = <name>prefixValues</name></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>String</name></type> <name>key</name> :<range> <expr><call><name><name>map</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><name>expandingLHS</name> = true</expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>result</name> =<init> <expr><call><name>getProperty</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><name>result</name> == <name>null</name> ? "" : <call><name><name>result</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
