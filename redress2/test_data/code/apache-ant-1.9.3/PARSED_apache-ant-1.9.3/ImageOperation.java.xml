<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\optional\image\ImageOperation.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>DataType</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 *
 * @see org.apache.tools.ant.taskdefs.optional.image.Image
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ImageOperation</name> <super><extends>extends <name>DataType</name></extends></super> <block>{
     <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>ImageOperation</name></argument>&gt;</argument_list></name></type> <name>instructions</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>ImageOperation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Add a rotate to the operation.
     * @param instr the rotate to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRotate</name><parameter_list>(<param><decl><type><name>Rotate</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>instructions</name>.<name>add</name></name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a draw to the operation.
     * @param instr the draw to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDraw</name><parameter_list>(<param><decl><type><name>Draw</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>instructions</name>.<name>add</name></name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a rectangle to the operation.
     * @param instr the rectangle to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRectangle</name><parameter_list>(<param><decl><type><name>Rectangle</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>instructions</name>.<name>add</name></name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add text to the operation.
     * @param instr the text to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>Text</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>instructions</name>.<name>add</name></name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a scale to the operation.
     * @param instr the scale to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addScale</name><parameter_list>(<param><decl><type><name>Scale</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>instructions</name>.<name>add</name></name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
