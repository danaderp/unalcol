<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\ClassConstants.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ResourceUtils</name></name>;</import>

<comment type="javadoc">/**
 * Assembles the constants declared in a Java class in
 * &lt;code&gt;key1=value1(line separator)key2=value2&lt;/code&gt;
 * format.
 *&lt;p&gt;
 * Notes:
 * &lt;ol&gt;
 * &lt;li&gt;This filter uses the BCEL external toolkit.
 * &lt;li&gt;This assembles only those constants that are not created
 * using the syntax &lt;code&gt;new whatever()&lt;/code&gt;
 * &lt;li&gt;This assembles constants declared using the basic datatypes
 * and String only.&lt;/li&gt;
 * &lt;li&gt;The access modifiers of the declared constants do not matter.&lt;/li&gt;
 *&lt;/ol&gt;
 * Example:&lt;br&gt;
 * &lt;pre&gt;&amp;lt;classconstants/&amp;gt;&lt;/pre&gt;
 * Or:
 * &lt;pre&gt;&amp;lt;filterreader
 *    classname=&amp;quot;org.apache.tools.ant.filters.ClassConstants&amp;quot;/&amp;gt;&lt;/pre&gt;
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ClassConstants</name>
    <super><extends>extends <name>BaseFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{
    <comment type="javadoc">/** Data that must be read from, if not null. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>queuedData</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Helper Class to be invoked via reflection. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_CLASS_HELPER</name> =<init>
        <expr>"org.apache.tools.ant.filters.util.JavaClassHelper"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>ClassConstants</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader. The contents of the passed-in reader
     * are expected to be the name of the class from which to produce a
     * list of constants.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>ClassConstants</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Reads and assembles the constants declared in a class file.
     *
     * @return the next character in the list of constants, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading, or if the constants for the specified class cannot
     * be read (for example due to the class not being found).
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>queuedData</name> != <name>null</name> &amp;&amp; <call><name><name>queuedData</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>queuedData</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>queuedData</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = <call><name><name>queuedData</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>queuedData</name> = <call><name><name>queuedData</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>queuedData</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>queuedData</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>clazz</name> =<init> <expr><call><name>readFully</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>clazz</name> == <name>null</name> || <call><name><name>clazz</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ch</name> = -1</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>bytes</name> =<init> <expr><call><name><name>clazz</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>ResourceUtils</name>.<name>ISO_8859_1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>javaClassHelper</name> =<init>
                        <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>JAVA_CLASS_HELPER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>javaClassHelper</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></type> <name>params</name> =<init> <expr><block>{
                            <expr><name><name>byte</name><index>[]</index></name>.class</expr>
                        }</block></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Method</name></type> <name>getConstants</name> =<init>
                            <expr><call><name><name>javaClassHelper</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"getConstants"</expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name><index>[]</index></type> <name>args</name> =<init> <expr><block>{
                            <expr><name>bytes</name></expr>
                        }</block></expr></init></decl>;</decl_stmt>
                        <comment type="line">// getConstants is a static method, no need to</comment>
                        <comment type="line">// pass in the object</comment>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuffer</name></type> <name>sb</name> =<init> <expr>(<name>StringBuffer</name>)
                                <call><name><name>getConstants</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>sb</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>queuedData</name> = <call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <return>return <expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</return>
                        }</block></then></if>
                    }</block></then></if>
                }</block> <catch>catch (<param><decl><type><name>NoClassDefFoundError</name></type> <name>ex</name></decl></param>) <block>{
                    <throw>throw <expr><name>ex</name></expr>;</throw>
                }</block></catch> <catch>catch (<param><decl><type><name>RuntimeException</name></type> <name>ex</name></decl></param>) <block>{
                    <throw>throw <expr><name>ex</name></expr>;</throw>
                }</block></catch> <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>ex</name></decl></param>) <block>{
                    <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr><call><name><name>ex</name>.<name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>NoClassDefFoundError</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>(<name>NoClassDefFoundError</name>) <name>t</name></expr>;</throw>
                    }</block></then></if>
                    <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>RuntimeException</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>(<name>RuntimeException</name>) <name>t</name></expr>;</throw>
                    }</block></then></if>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>ch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new ClassConstants using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ClassConstants</name></type> <name>newFilter</name> =<init> <expr>new <call><name>ClassConstants</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
