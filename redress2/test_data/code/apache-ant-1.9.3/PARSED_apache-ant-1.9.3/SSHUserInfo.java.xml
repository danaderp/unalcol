<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ssh\SSHUserInfo.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ssh</name></name>;</package>

<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>UserInfo</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>UIKeyboardInteractive</name></name>;</import>

<comment type="javadoc">/**
 * Class containing information on an SSH user.
 */</comment>
<class><specifier>public</specifier> class <name>SSHUserInfo</name> <super><implements>implements <name>UserInfo</name>, <name>UIKeyboardInteractive</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>password</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>keyfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>passphrase</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>trustAllCertificates</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for SSHUserInfo. */</comment>
    <constructor><specifier>public</specifier> <name>SSHUserInfo</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>trustAllCertificates</name></name> = false</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for SSHUserInfo.
     * @param password the user's password
     * @param trustAllCertificates if true trust hosts whose identity is unknown
     */</comment>
    <constructor><specifier>public</specifier> <name>SSHUserInfo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>trustAllCertificates</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>trustAllCertificates</name></name> = <name>trustAllCertificates</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Gets the user name.
     * @return the user name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the pass phrase of the user.
     * @param message a message
     * @return the passphrase
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPassphrase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>passphrase</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the user's password.
     * @return the user's password
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPassword</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>password</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Prompts a string.
     * @param str the string
     * @return whether the string was prompted
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>prompt</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates whether a retry was done.
     * @return whether a retry was done
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>retry</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name.
     * @param name The name to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the passphrase.
     * @param passphrase The passphrase to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassphrase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>passphrase</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>passphrase</name></name> = <name>passphrase</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the password.
     * @param password The password to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the trust.
     * @param trust whether to trust or not.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTrust</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>trust</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>trustAllCertificates</name></name> = <name>trust</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return whether to trust or not.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getTrust</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>trustAllCertificates</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the passphrase.
     * @return String
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPassphrase</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>passphrase</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the keyfile.
     * @return String
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyfile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>keyfile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the keyfile.
     * @param keyfile The keyfile to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeyfile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keyfile</name></name> = <name>keyfile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Implement the UserInfo interface.
     * @param message ignored
     * @return true always
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>promptPassphrase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Implement the UserInfo interface.
     * @param passwordPrompt ignored
     * @return true the first time this is called, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>promptPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>passwordPrompt</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Implement the UserInfo interface.
     * @param message ignored
     * @return the value of trustAllCertificates
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>promptYesNo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>trustAllCertificates</name></expr>;</return>
    }</block></function>

<comment type="line">//why do we do nothing?</comment>
    <comment type="javadoc">/**
     * Implement the UserInfo interface (noop).
     * @param message ignored
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>showMessage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//log(message, Project.MSG_DEBUG);</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Implementation of UIKeyboardInteractive#promptKeyboardInteractive.
     * @param destination not used.
     * @param name        not used.
     * @param instruction not used.
     * @param prompt      the method checks if this is one in length.
     * @param echo        the method checks if the first element is false.
     * @return the password in an size one array if there is a password
     *         and if the prompt and echo checks pass.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>promptKeyboardInteractive</name><parameter_list>(<param><decl><type><name>String</name></type> <name>destination</name></decl></param>,
                                              <param><decl><type><name>String</name></type> <name>name</name></decl></param>,
                                              <param><decl><type><name>String</name></type> <name>instruction</name></decl></param>,
                                              <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>prompt</name></decl></param>,
                                              <param><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>echo</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>prompt</name>.<name>length</name></name> != 1 || <name><name>echo</name><index>[<expr>0</expr>]</index></name> || <name><name>this</name>.<name>password</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>response</name> =<init> <expr>new <name><name>String</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>response</name><index>[<expr>0</expr>]</index></name> = <name><name>this</name>.<name>password</name></name></expr>;</expr_stmt>
        <return>return <expr><name>response</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
