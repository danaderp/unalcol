<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\ResourceUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>channels</name>.<name>FileChannel</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name>.<name>util</name>.<name>ChainReaderHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>TimeComparison</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FilterSetCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Appendable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Restrict</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Resources</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>StringResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Touchable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>Date</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>ResourceSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectorUtils</name></name>;</import>

<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF - bc</comment>

<comment type="javadoc">/**
 * This class provides utility methods to process Resources.
 *
 * @since Ant 1.5.2
 */</comment>
<class><specifier>public</specifier> class <name>ResourceUtils</name> <block>{

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Name of charset "ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1".
     *
     * @since Ant 1.8.1
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ISO_8859_1</name> =<init> <expr>"ISO-8859-1"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MAX_IO_CHUNK_SIZE</name> =<init> <expr>16*1024*1024</expr></init></decl>;</decl_stmt> <comment type="line">// 16 MB</comment>

    <comment type="javadoc">/**
     * Tells which source files should be reprocessed based on the
     * last modification date of target files.
     * @param logTo where to send (more or less) interesting output.
     * @param source array of resources bearing relative path and last
     * modification date.
     * @param mapper filename mapper indicating how to find the target
     * files.
     * @param targets object able to map as a resource a relative path
     * at &lt;b&gt;destination&lt;/b&gt;.
     * @return array containing the source files which need to be
     * copied or processed, because the targets are out of date or do
     * not exist.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Resource</name><index>[]</index></type> <name>selectOutOfDateSources</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>logTo</name></decl></param>,
                                                    <param><decl><type><name><name>Resource</name><index>[]</index></name></type> <name>source</name></decl></param>,
                                                    <param><decl><type><name>FileNameMapper</name></type> <name>mapper</name></decl></param>,
                                                    <param><decl><type><name>ResourceFactory</name></type> <name>targets</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>selectOutOfDateSources</name><argument_list>(<argument><expr><name>logTo</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>mapper</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>,
                                      <argument><expr><call><name><name>FILE_UTILS</name>.<name>getFileTimestampGranularity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tells which source files should be reprocessed based on the
     * last modification date of target files.
     * @param logTo where to send (more or less) interesting output.
     * @param source array of resources bearing relative path and last
     * modification date.
     * @param mapper filename mapper indicating how to find the target
     * files.
     * @param targets object able to map as a resource a relative path
     * at &lt;b&gt;destination&lt;/b&gt;.
     * @param granularity The number of milliseconds leeway to give
     * before deciding a target is out of date.
     * @return array containing the source files which need to be
     * copied or processed, because the targets are out of date or do
     * not exist.
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Resource</name><index>[]</index></type> <name>selectOutOfDateSources</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>logTo</name></decl></param>,
                                                    <param><decl><type><name><name>Resource</name><index>[]</index></name></type> <name>source</name></decl></param>,
                                                    <param><decl><type><name>FileNameMapper</name></type> <name>mapper</name></decl></param>,
                                                    <param><decl><type><name>ResourceFactory</name></type> <name>targets</name></decl></param>,
                                                    <param><decl><type><name>long</name></type> <name>granularity</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Union</name></type> <name>u</name> =<init> <expr>new <call><name>Union</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>u</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ResourceCollection</name></type> <name>rc</name>
            =<init> <expr><call><name>selectOutOfDateSources</name><argument_list>(<argument><expr><name>logTo</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>mapper</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>, <argument><expr><name>granularity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>rc</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0 ? new <name><name>Resource</name><index>[<expr>0</expr>]</index></name> : ((<name>Union</name>) <name>rc</name>).<call><name>listResources</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tells which sources should be reprocessed based on the
     * last modification date of targets.
     * @param logTo where to send (more or less) interesting output.
     * @param source ResourceCollection.
     * @param mapper filename mapper indicating how to find the target Resources.
     * @param targets object able to map a relative path as a Resource.
     * @param granularity The number of milliseconds leeway to give
     * before deciding a target is out of date.
     * @return ResourceCollection.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ResourceCollection</name></type> <name>selectOutOfDateSources</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>logTo</name></decl></param>,
                                                            <param><decl><type><name>ResourceCollection</name></type> <name>source</name></decl></param>,
                                                            <param><decl><type><name>FileNameMapper</name></type> <name>mapper</name></decl></param>,
                                                            <param><decl><type><name>ResourceFactory</name></type> <name>targets</name></decl></param>,
                                                            <param><decl><type><specifier>final</specifier> <name>long</name></type> <name>granularity</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logFuture</name><argument_list>(<argument><expr><name>logTo</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ResourceSelectorProvider</name></type> <name>p</name> =<init> 
            <expr>new <class><super><name>ResourceSelectorProvider</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>ResourceSelector</name></type>
                    <name>getTargetSelectorForSource</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Resource</name></type> <name>sr</name></decl></param>)</parameter_list> <block>{
                    <return>return <expr>new <class><super><name>ResourceSelector</name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelected</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
                            <comment type="block">/* Extra I/O, probably wasted:
                               if (target.isDirectory()) {
                               return false;
                               }
                            */</comment>
                            <return>return <expr><call><name><name>SelectorUtils</name>.<name>isOutOfDate</name></name><argument_list>(<argument><expr><name>sr</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                                             <argument><expr><name>granularity</name></expr></argument>)</argument_list></call></expr>;</return>
                        }</block></function>
                    }</block></class></expr>;</return>
                }</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>selectSources</name><argument_list>(<argument><expr><name>logTo</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>mapper</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tells which sources should be reprocessed because the given
     * selector selects at least one target.
     * 
     * @param logTo where to send (more or less) interesting output.
     * @param source ResourceCollection.
     * @param mapper filename mapper indicating how to find the target Resources.
     * @param targets object able to map a relative path as a Resource.
     * @param selector returns a selector that is applied to target
     * files.  If it selects at least one target the source will be
     * added to the returned collection.
     * @return ResourceCollection.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ResourceCollection</name></type> <name>selectSources</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>logTo</name></decl></param>,
                                                   <param><decl><type><name>ResourceCollection</name></type> <name>source</name></decl></param>,
                                                   <param><decl><type><name>FileNameMapper</name></type> <name>mapper</name></decl></param>,
                                                   <param><decl><type><name>ResourceFactory</name></type> <name>targets</name></decl></param>,
                                                   <param><decl><type><name>ResourceSelectorProvider</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>source</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>logTo</name>.<name>log</name></name><argument_list>(<argument><expr>"No sources found."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name><name>Resources</name>.<name>NONE</name></name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>source</name> = <call><name><name>Union</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Union</name></type> <name>result</name> =<init> <expr>new <call><name>Union</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Resource</name></type> <name>sr</name> :<range> <expr><name>source</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>srName</name> =<init> <expr><call><name><name>sr</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>srName</name> = <name>srName</name> == <name>null</name>
                ? <name>srName</name> : <call><name><name>srName</name>.<name>replace</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>targetnames</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>targetnames</name> = <call><name><name>mapper</name>.<name>mapFileName</name></name><argument_list>(<argument><expr><name>srName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>logTo</name>.<name>log</name></name><argument_list>(<argument><expr>"Caught " + <name>e</name> + " mapping resource " + <name>sr</name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <if>if <condition>(<expr><name>targetnames</name> == <name>null</name> || <name><name>targetnames</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>logTo</name>.<name>log</name></name><argument_list>(<argument><expr><name>sr</name> + " skipped - don\'t know how to handle it"</expr></argument>,
                      <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>targetnames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>targetnames</name><index>[<expr><name>i</name></expr>]</index></name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>targetnames</name><index>[<expr><name>i</name></expr>]</index></name> = "(no name)"</expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <decl_stmt><decl><type><name>Union</name></type> <name>targetColl</name> =<init> <expr>new <call><name>Union</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>targetnames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>targetColl</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>targets</name>.<name>getResource</name></name><argument_list>(
                    <argument><expr><name><name>targetnames</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <comment type="line">//find the out-of-date targets:</comment>
            <decl_stmt><decl><type><name>Restrict</name></type> <name>r</name> =<init> <expr>new <call><name>Restrict</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>r</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>selector</name>.<name>getTargetSelectorForSource</name></name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>r</name>.<name>add</name></name><argument_list>(<argument><expr><name>targetColl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>r</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Resource</name></type> <name>t</name> =<init> <expr><call><name><name>r</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>logTo</name>.<name>log</name></name><argument_list>(<argument><expr><call><name><name>sr</name>.<name>getName</name></name><argument_list>()</argument_list></call> + " added as " + <call><name><name>t</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                    + (<call><name><name>t</name>.<name>isExists</name></name><argument_list>()</argument_list></call> ? " is outdated." : " doesn\'t exist.")</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <comment type="line">//log uptodateness of all targets:</comment>
            <expr_stmt><expr><call><name><name>logTo</name>.<name>log</name></name><argument_list>(<argument><expr><call><name><name>sr</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                  + " omitted as " + <call><name><name>targetColl</name>.<name>toString</name></name><argument_list>()</argument_list></call>
                  + (<call><name><name>targetColl</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1 ? " is" : " are ")
                  + " up to date."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy content from one Resource to another.
     * No filtering is performed.
     *
     * @param source the Resource to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param dest   the Resource to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @throws IOException if the copying fails.
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>source</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>dest</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>copyResource</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy content from one Resource to another.
     * No filtering is performed.
     *
     * @param source the Resource to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param dest   the Resource to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param project the project instance.
     *
     * @throws IOException if the copying fails.
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>source</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>dest</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>copyResource</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>,
                     <argument><expr>false</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// CheckStyle:ParameterNumberCheck OFF - bc</comment>
    <comment type="javadoc">/**
     * Convenience method to copy content from one Resource to another
     * specifying whether token filtering must be used, whether filter chains
     * must be used, whether newer destination files may be overwritten and
     * whether the last modified time of &lt;code&gt;dest&lt;/code&gt; file should be made
     * equal to the last modified time of &lt;code&gt;source&lt;/code&gt;.
     *
     * @param source the Resource to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param dest   the Resource to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param filters the collection of filters to apply to this copy.
     * @param filterChains filterChains to apply during the copy.
     * @param overwrite Whether or not the destination Resource should be
     *                  overwritten if it already exists.
     * @param preserveLastModified Whether or not the last modified time of
     *                             the destination Resource should be set to that
     *                             of the source.
     * @param inputEncoding the encoding used to read the files.
     * @param outputEncoding the encoding used to write the files.
     * @param project the project instance.
     *
     * @throws IOException if the copying fails.
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>source</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>dest</name></decl></param>,
                             <param><decl><type><name>FilterSetCollection</name></type> <name>filters</name></decl></param>, <param><decl><type><name>Vector</name></type> <name>filterChains</name></decl></param>,
                             <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>preserveLastModified</name></decl></param>,
                             <param><decl><type><name>String</name></type> <name>inputEncoding</name></decl></param>, <param><decl><type><name>String</name></type> <name>outputEncoding</name></decl></param>,
                             <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>copyResource</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filterChains</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>preserveLastModified</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>inputEncoding</name></expr></argument>, <argument><expr><name>outputEncoding</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// CheckStyle:ParameterNumberCheck OFF - bc</comment>
    <comment type="javadoc">/**
     * Convenience method to copy content from one Resource to another
     * specifying whether token filtering must be used, whether filter chains
     * must be used, whether newer destination files may be overwritten and
     * whether the last modified time of &lt;code&gt;dest&lt;/code&gt; file should be made
     * equal to the last modified time of &lt;code&gt;source&lt;/code&gt;.
     *
     * @param source the Resource to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param dest   the Resource to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param filters the collection of filters to apply to this copy.
     * @param filterChains filterChains to apply during the copy.
     * @param overwrite Whether or not the destination Resource should be
     *                  overwritten if it already exists.
     * @param preserveLastModified Whether or not the last modified time of
     *                             the destination Resource should be set to that
     *                             of the source.
     * @param append Whether to append to an Appendable Resource.
     * @param inputEncoding the encoding used to read the files.
     * @param outputEncoding the encoding used to write the files.
     * @param project the project instance.
     *
     * @throws IOException if the copying fails.
     *
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>source</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>dest</name></decl></param>,
                            <param><decl><type><name>FilterSetCollection</name></type> <name>filters</name></decl></param>, <param><decl><type><name>Vector</name></type> <name>filterChains</name></decl></param>,
                            <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>preserveLastModified</name></decl></param>,
                                    <param><decl><type><name>boolean</name></type> <name>append</name></decl></param>,
                            <param><decl><type><name>String</name></type> <name>inputEncoding</name></decl></param>, <param><decl><type><name>String</name></type> <name>outputEncoding</name></decl></param>,
                            <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>copyResource</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filterChains</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>,
                     <argument><expr><name>preserveLastModified</name></expr></argument>, <argument><expr><name>append</name></expr></argument>, <argument><expr><name>inputEncoding</name></expr></argument>,
                     <argument><expr><name>outputEncoding</name></expr></argument>, <argument><expr><name>project</name></expr></argument>, <comment type="block">/* force: */</comment> <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy content from one Resource to another
     * specifying whether token filtering must be used, whether filter chains
     * must be used, whether newer destination files may be overwritten and
     * whether the last modified time of &lt;code&gt;dest&lt;/code&gt; file should be made
     * equal to the last modified time of &lt;code&gt;source&lt;/code&gt;.
     *
     * @param source the Resource to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param dest   the Resource to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param filters the collection of filters to apply to this copy.
     * @param filterChains filterChains to apply during the copy.
     * @param overwrite Whether or not the destination Resource should be
     *                  overwritten if it already exists.
     * @param preserveLastModified Whether or not the last modified time of
     *                             the destination Resource should be set to that
     *                             of the source.
     * @param append Whether to append to an Appendable Resource.
     * @param inputEncoding the encoding used to read the files.
     * @param outputEncoding the encoding used to write the files.
     * @param project the project instance.
     * @param force whether read-only target files will be overwritten
     *
     * @throws IOException if the copying fails.
     *
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>source</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>dest</name></decl></param>,
                            <param><decl><type><name>FilterSetCollection</name></type> <name>filters</name></decl></param>, <param><decl><type><name>Vector</name></type> <name>filterChains</name></decl></param>,
                            <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>preserveLastModified</name></decl></param>,
                                    <param><decl><type><name>boolean</name></type> <name>append</name></decl></param>,
                                    <param><decl><type><name>String</name></type> <name>inputEncoding</name></decl></param>, <param><decl><type><name>String</name></type> <name>outputEncoding</name></decl></param>,
                                    <param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>force</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!(<name>overwrite</name> || <call><name><name>SelectorUtils</name>.<name>isOutOfDate</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>
                .<call><name>getFileTimestampGranularity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>filterSetsAvailable</name> =<init> <expr>(<name>filters</name> != <name>null</name>
                                             &amp;&amp; <call><name><name>filters</name>.<name>hasFilters</name></name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>filterChainsAvailable</name> =<init> <expr>(<name>filterChains</name> != <name>null</name>
                                               &amp;&amp; <call><name><name>filterChains</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>effectiveInputEncoding</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>source</name> <name>instanceof</name> <name>StringResource</name></expr>)</condition><then> <block>{
             <expr_stmt><expr><name>effectiveInputEncoding</name> = ((<name>StringResource</name>) <name>source</name>).<call><name>getEncoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>effectiveInputEncoding</name> = <name>inputEncoding</name></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>File</name></type> <name>destFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>dest</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>destFile</name> = <call><name><name>dest</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>.<call><name>getFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>destFile</name> != <name>null</name> &amp;&amp; <call><name><name>destFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>destFile</name>.<name>canWrite</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>force</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"can't write to read-only destination "
                                      + "file " + <name>destFile</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>FILE_UTILS</name>.<name>tryHardToDelete</name></name><argument_list>(<argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"failed to delete read-only "
                                      + "destination file " + <name>destFile</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if></else></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>filterSetsAvailable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>effectiveInputEncoding</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>source</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>source</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><name>effectiveInputEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>in</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name> =<init> <expr><call><name>getOutputStream</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>append</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>OutputStreamWriter</name></type> <name>osw</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>outputEncoding</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>osw</name> = new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>osw</name> = new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>outputEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>out</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr><name>osw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>filterChainsAvailable</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>ChainReaderHelper</name></type> <name>crh</name> =<init> <expr>new <call><name>ChainReaderHelper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>crh</name>.<name>setBufferSize</name></name><argument_list>(<argument><expr><name><name>FileUtils</name>.<name>BUF_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>crh</name>.<name>setPrimaryReader</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>crh</name>.<name>setFilterChains</name></name><argument_list>(<argument><expr><name>filterChains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>crh</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Reader</name></type> <name>rdr</name> =<init> <expr><call><name><name>crh</name>.<name>getAssembledReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>in</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>LineTokenizer</name></type> <name>lineTokenizer</name> =<init> <expr>new <call><name>LineTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>lineTokenizer</name>.<name>setIncludeDelims</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>newline</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr><call><name><name>lineTokenizer</name>.<name>getToken</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>line</name> != <name>null</name></expr>)</condition> <block>{
                    <if>if <condition>(<expr><call><name><name>line</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                        <comment type="line">// this should not happen, because the lines are</comment>
                        <comment type="line">// returned with the end of line delimiter</comment>
                        <expr_stmt><expr><call><name><name>out</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>newline</name> = <call><name><name>filters</name>.<name>replaceTokens</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>newline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>line</name> = <call><name><name>lineTokenizer</name>.<name>getToken</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then> <else>else <if>if <condition>(<expr><name>filterChainsAvailable</name>
                   || (<name>effectiveInputEncoding</name> != <name>null</name>
                       &amp;&amp; !<call><name><name>effectiveInputEncoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>outputEncoding</name></expr></argument>)</argument_list></call>)
                   || (<name>effectiveInputEncoding</name> == <name>null</name> &amp;&amp; <name>outputEncoding</name> != <name>null</name>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>effectiveInputEncoding</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>source</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>source</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><name>effectiveInputEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>in</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name> =<init> <expr><call><name>getOutputStream</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>append</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>OutputStreamWriter</name></type> <name>osw</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>outputEncoding</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>osw</name> = new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>osw</name> = new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>outputEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>out</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr><name>osw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>filterChainsAvailable</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>ChainReaderHelper</name></type> <name>crh</name> =<init> <expr>new <call><name>ChainReaderHelper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>crh</name>.<name>setBufferSize</name></name><argument_list>(<argument><expr><name><name>FileUtils</name>.<name>BUF_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>crh</name>.<name>setPrimaryReader</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>crh</name>.<name>setFilterChains</name></name><argument_list>(<argument><expr><name>filterChains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>crh</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Reader</name></type> <name>rdr</name> =<init> <expr><call><name><name>crh</name>.<name>getAssembledReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>in</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>char</name><index>[<expr><name><name>FileUtils</name>.<name>BUF_SIZE</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr>true</expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>nRead</name> =<init> <expr><call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>nRead</name> == -1</expr>)</condition><then> <block>{
                        <break>break;</break>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>source</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call> != <name>null</name>
                   &amp;&amp; <name>destFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>sourceFile</name> =<init>
                <expr><call><name><name>source</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>.<call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>File</name></type> <name>parent</name> =<init> <expr><call><name><name>destFile</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> != <name>null</name> &amp;&amp; !<call><name><name>parent</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call>
                &amp;&amp; !<call><name><name>destFile</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call>.<call><name>mkdirs</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"failed to create the parent directory"
                                      + " for " + <name>destFile</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name>FileInputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileChannel</name></type> <name>srcChannel</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileChannel</name></type> <name>destChannel</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

            <try>try <block>{
                <expr_stmt><expr><name>in</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>out</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                <expr_stmt><expr><name>srcChannel</name> = <call><name><name>in</name>.<name>getChannel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>destChannel</name> = <call><name><name>out</name>.<name>getChannel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                
                <decl_stmt><decl><type><name>long</name></type> <name>position</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> =<init> <expr><call><name><name>srcChannel</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>position</name> &lt; <name>count</name></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>long</name></type> <name>chunk</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>MAX_IO_CHUNK_SIZE</name></expr></argument>, <argument><expr><name>count</name> - <name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>position</name> +=
                        <call><name><name>destChannel</name>.<name>transferFrom</name></name><argument_list>(<argument><expr><name>srcChannel</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>srcChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>destChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>in</name> = <call><name><name>source</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>out</name> = <call><name>getOutputStream</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>append</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>FileUtils</name>.<name>BUF_SIZE</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <do>do <block>{
                    <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>count</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> while <condition>(<expr><name>count</name> != -1</expr>)</condition>;</do>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></else></if></else></if></else></if>
        <if>if <condition>(<expr><name>preserveLastModified</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Touchable</name></type> <name>t</name> =<init> <expr><call><name><name>dest</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>Touchable</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>t</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setLastModified</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name><name>source</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
    <comment type="line">// CheckStyle:ParameterNumberCheck ON</comment>

    <comment type="javadoc">/**
     * Set the last modified time of an object implementing
     * org.apache.tools.ant.types.resources.Touchable .
     *
     * @param t the Touchable whose modified time is to be set.
     * @param time the time to which the last modified time is to be set.
     *             if this is -1, the current time is used.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setLastModified</name><parameter_list>(<param><decl><type><name>Touchable</name></type> <name>t</name></decl></param>, <param><decl><type><name>long</name></type> <name>time</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>t</name>.<name>touch</name></name><argument_list>(<argument><expr>(<name>time</name> &lt; 0) ? <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> : <name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Compares the contents of two Resources.
     *
     * @param r1 the Resource whose content is to be compared.
     * @param r2 the other Resource whose content is to be compared.
     * @param text true if the content is to be treated as text and
     *        differences in kind of line break are to be ignored.
     *
     * @return true if the content of the Resources is the same.
     *
     * @throws IOException if the Resources cannot be read.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>contentEquals</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r1</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>r2</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>text</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>r1</name>.<name>isExists</name></name><argument_list>()</argument_list></call> != <call><name><name>r2</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>r1</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// two not existing files are equal</comment>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <comment type="line">// should the following two be switched?  If r1 and r2 refer to the same file,</comment>
        <comment type="line">// isn't their content equal regardless of whether that file is a directory?</comment>
        <if>if <condition>(<expr><call><name><name>r1</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> || <call><name><name>r2</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// don't want to compare directory contents for now</comment>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>r1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>text</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>s1</name> =<init> <expr><call><name><name>r1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>s2</name> =<init> <expr><call><name><name>r2</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>s1</name> != <name><name>Resource</name>.<name>UNKNOWN_SIZE</name></name> &amp;&amp; <name>s2</name> != <name><name>Resource</name>.<name>UNKNOWN_SIZE</name></name>
                    &amp;&amp; <name>s1</name> != <name>s2</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><call><name>compareContent</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call> == 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compare the content of two Resources. A nonexistent Resource's
     * content is "less than" that of an existing Resource; a directory-type
     * Resource's content is "less than" that of a file-type Resource.
     * @param r1 the Resource whose content is to be compared.
     * @param r2 the other Resource whose content is to be compared.
     * @param text true if the content is to be treated as text and
     *        differences in kind of line break are to be ignored.
     * @return a negative integer, zero, or a positive integer as the first
     *         argument is less than, equal to, or greater than the second.
     * @throws IOException if the Resources cannot be read.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareContent</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r1</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>r2</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>text</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>r1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>e1</name> =<init> <expr><call><name><name>r1</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>e2</name> =<init> <expr><call><name><name>r2</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<name>e1</name> || <name>e2</name>)</expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>e1</name> != <name>e2</name></expr>)</condition><then> <block>{
            <return>return <expr><name>e1</name> ? 1 : -1</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>d1</name> =<init> <expr><call><name><name>r1</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>d2</name> =<init> <expr><call><name><name>r2</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>d1</name> &amp;&amp; <name>d2</name></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>d1</name> || <name>d2</name></expr>)</condition><then> <block>{
            <return>return <expr><name>d1</name> ? -1 : 1</expr>;</return>
        }</block></then></if>
        <return>return <expr><name>text</name> ? <call><name>textCompare</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call> : <call><name>binaryCompare</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to turn any fileProvider into a basic
     * FileResource with the file's immediate parent as the basedir,
     * for tasks that need one.
     * @param fileProvider input
     * @return fileProvider if it is a FileResource instance, or a new
     * FileResource with fileProvider's file.
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FileResource</name></type> <name>asFileResource</name><parameter_list>(<param><decl><type><name>FileProvider</name></type> <name>fileProvider</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>fileProvider</name> <name>instanceof</name> <name>FileResource</name> || <name>fileProvider</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>FileResource</name>) <name>fileProvider</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>FileResource</name></type> <name>result</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><call><name><name>fileProvider</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name><name>Project</name>.<name>getProject</name></name><argument_list>(<argument><expr><name>fileProvider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Binary compares the contents of two Resources.
     * &lt;p&gt;
     * simple but sub-optimal comparision algorithm. written for working
     * rather than fast. Better would be a block read into buffers followed
     * by long comparisions apart from the final 1-7 bytes.
     * &lt;/p&gt;
     *
     * @param r1 the Resource whose content is to be compared.
     * @param r2 the other Resource whose content is to be compared.
     * @return a negative integer, zero, or a positive integer as the first
     *         argument is less than, equal to, or greater than the second.
     * @throws IOException if the Resources cannot be read.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>binaryCompare</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r1</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>r2</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in1</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in2</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>in1</name> = new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><call><name><name>r1</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>in2</name> = new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><call><name><name>r2</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>b1</name> =<init> <expr><call><name><name>in1</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>b1</name> != -1</expr>;</condition> <incr><expr><name>b1</name> = <call><name><name>in1</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>b2</name> =<init> <expr><call><name><name>in2</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>b1</name> != <name>b2</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>b1</name> &gt; <name>b2</name> ? 1 : -1</expr>;</return>
                }</block></then></if>
            }</block></for>
            <return>return <expr><call><name><name>in2</name>.<name>read</name></name><argument_list>()</argument_list></call> == -1 ? 0 : -1</expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Text compares the contents of two Resources.
     * Ignores different kinds of line endings.
     * @param r1 the Resource whose content is to be compared.
     * @param r2 the other Resource whose content is to be compared.
     * @return a negative integer, zero, or a positive integer as the first
     *         argument is less than, equal to, or greater than the second.
     * @throws IOException if the Resources cannot be read.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>textCompare</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r1</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>r2</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in1</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in2</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>in1</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>r1</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>in2</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>r2</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>expected</name> =<init> <expr><call><name><name>in1</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>expected</name> != <name>null</name></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>actual</name> =<init> <expr><call><name><name>in2</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>expected</name>.<name>equals</name></name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>actual</name> == <name>null</name></expr>)</condition><then> <block>{
                        <return>return <expr>1</expr>;</return>
                    }</block></then></if>
                    <return>return <expr><call><name><name>expected</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>expected</name> = <call><name><name>in1</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><call><name><name>in2</name>.<name>readLine</name></name><argument_list>()</argument_list></call> == <name>null</name> ? 0 : -1</expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Log which Resources (if any) have been modified in the future.
     * @param logTo the ProjectComponent to do the logging.
     * @param rc the collection of Resources to check.
     * @param granularity the timestamp granularity to use.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>logFuture</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>logTo</name></decl></param>,
                                  <param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>, <param><decl><type><name>long</name></type> <name>granularity</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>now</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> + <name>granularity</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>sel</name> =<init> <expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>setMillis</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name><name>TimeComparison</name>.<name>AFTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Restrict</name></type> <name>future</name> =<init> <expr>new <call><name>Restrict</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>future</name>.<name>add</name></name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>future</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>future</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>logTo</name>.<name>log</name></name><argument_list>(<argument><expr>"Warning: " + <call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call> + " modified in the future."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>resource</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>append</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>append</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Appendable</name></type> <name>a</name> =<init> <expr><call><name><name>resource</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>Appendable</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>a</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>a</name>.<name>getAppendOutputStream</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"Appendable OutputStream not available for non-appendable resource "
                    + <name>resource</name> + "; using plain OutputStream"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>resource</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class type="interface"><specifier>public</specifier> <specifier>static</specifier> interface <name>ResourceSelectorProvider</name> <block>{
        <function_decl><type><name>ResourceSelector</name></type> <name>getTargetSelectorForSource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>source</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>
}</block></class>
</unit>
