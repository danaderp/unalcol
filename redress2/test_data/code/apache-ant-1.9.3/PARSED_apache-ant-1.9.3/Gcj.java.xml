<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\compilers\Gcj.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>compilers</name></name>;</package>


<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 * The implementation of the gcj compiler.
 * This is primarily a cut-and-paste from the jikes.
 *
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> class <name>Gcj</name> <super><extends>extends <name>DefaultCompilerAdapter</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Performs a compile using the gcj compiler.
     * @return true if the compilation succeeded
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmd</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>attributes</name>.<name>log</name></name><argument_list>(<argument><expr>"Using gcj compiler"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cmd</name> = <call><name>setupGCJCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>firstFileName</name> =<init> <expr><call><name><name>cmd</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logAndAddFilesToCompile</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return
            <expr><call><name>executeExternalCompile</name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>firstFileName</name></expr></argument>)</argument_list></call> == 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set up the gcj commandline.
     * @return the command line
     */</comment>
    <function><type><specifier>protected</specifier> <name>Commandline</name></type> <name>setupGCJCommand</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmd</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>classpath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// gcj doesn't support bootclasspath dir (-bootclasspath)</comment>
        <comment type="line">// so we'll emulate it for compatibility and convenience.</comment>
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr><call><name>getBootClassPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>p</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>classpath</name>.<name>append</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// gcj doesn't support an extension dir (-extdir)</comment>
        <comment type="line">// so we'll emulate it for compatibility and convenience.</comment>
        <if>if <condition>(<expr><name>extdirs</name> != <name>null</name> || <name>includeJavaRuntime</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>classpath</name>.<name>addExtdirs</name></name><argument_list>(<argument><expr><name>extdirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>classpath</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>getCompileClasspath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Gcj has no option for source-path so we</comment>
        <comment type="line">// will add it to classpath.</comment>
        <if>if <condition>(<expr><name>compileSourcepath</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>classpath</name>.<name>append</name></name><argument_list>(<argument><expr><name>compileSourcepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>classpath</name>.<name>append</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>String</name></type> <name>exec</name> =<init> <expr><call><name>getJavac</name><argument_list>()</argument_list></call>.<call><name>getExecutable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><name>exec</name> == <name>null</name> ? "gcj" : <name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>destDir</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-d"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><name>destDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>!<call><name><name>destDir</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>destDir</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Can't make output directories. "
                                         + "Maybe permission is wrong. "</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>encoding</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"--encoding=" + <name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-g1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>optimize</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-O"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="javadoc">/**
         *  gcj should be set for generate class.
         * ... if no 'compile to native' argument is passed
         */</comment>
        <if>if <condition>(<expr>!<call><name>isNativeBuild</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-C"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>attributes</name>.<name>getSource</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>source</name> =<init> <expr><call><name><name>attributes</name>.<name>getSource</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-fsource=" + <name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>attributes</name>.<name>getTarget</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>target</name> =<init> <expr><call><name><name>attributes</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-ftarget=" + <name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>addCurrentCompilerArgs</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>cmd</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Whether any of the arguments given via &amp;lt;compilerarg&amp;gt;
     * implies that compilation to native code is requested.
     * @return true if compilation to native code is requested
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNativeBuild</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>nativeBuild</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>additionalArguments</name> =<init> <expr><call><name>getJavac</name><argument_list>()</argument_list></call>.<call><name>getCurrentCompilerArgs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>argsLength</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>!<name>nativeBuild</name> &amp;&amp; <name>argsLength</name> &lt; <name><name>additionalArguments</name>.<name>length</name></name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>conflictLength</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>!<name>nativeBuild</name>
                   &amp;&amp; <name>conflictLength</name> &lt; <name><name>CONFLICT_WITH_DASH_C</name>.<name>length</name></name></expr>)</condition> <block>{
                <expr_stmt><expr><name>nativeBuild</name> = (<name><name>additionalArguments</name><index>[<expr><name>argsLength</name></expr>]</index></name>.<call><name>startsWith</name>
                               <argument_list>(<argument><expr><name><name>CONFLICT_WITH_DASH_C</name><index>[<expr><name>conflictLength</name></expr>]</index></name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
                <expr_stmt><expr><name>conflictLength</name>++</expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>argsLength</name>++</expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>nativeBuild</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name> <index>[]</index></type> <name>CONFLICT_WITH_DASH_C</name> =<init> <expr><block>{
        <expr>"-o"</expr> , <expr>"--main="</expr>, <expr>"-D"</expr>, <expr>"-fjni"</expr>, <expr>"-L"</expr>
    }</block></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>
