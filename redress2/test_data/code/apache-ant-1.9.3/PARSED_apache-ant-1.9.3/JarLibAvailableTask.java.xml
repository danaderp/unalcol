<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\extension\JarLibAvailableTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>extension</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>Manifest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * Checks whether an extension is present in a fileset or an extensionSet.
 *
 * @ant.task name="jarlib-available"
 */</comment>
<class><specifier>public</specifier> class <name>JarLibAvailableTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <comment type="javadoc">/**
     * The library to display information about.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>libraryFile</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Filesets specifying all the librarys
     * to display information about.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Vector</name></type> <name>extensionFileSets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the property to set if extension is available.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>propertyName</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The extension that is required.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ExtensionAdapter</name></type> <name>requiredExtension</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of property to set if extensions are available.
     *
     * @param property The name of property to set if extensions is available.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>propertyName</name></name> = <name>property</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The JAR library to check.
     *
     * @param file The jar library to check.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>libraryFile</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the Extension looking for.
     *
     * @param extension Set the Extension looking for.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredExtension</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ExtensionAdapter</name></type> <name>extension</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>null</name> != <name>requiredExtension</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr>"Can not specify extension to "
                + "search for multiple times."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>requiredExtension</name> = <name>extension</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a set of extensions to search in.
     *
     * @param extensionSet a set of extensions to search in.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredExtensionSet</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ExtensionSet</name></type> <name>extensionSet</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>extensionFileSets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>extensionSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the task.
     *
     * @throws BuildException if something goes wrong.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>test</name> =<init> <expr><call><name><name>requiredExtension</name>.<name>toExtension</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check if list of files to check has been specified</comment>
        <if>if <condition>(<expr>!<call><name><name>extensionFileSets</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>extensionFileSets</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ExtensionSet</name></type> <name>extensionSet</name>
                    =<init> <expr>(<name>ExtensionSet</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name><index>[]</index></type> <name>extensions</name> =<init>
                    <expr><call><name><name>extensionSet</name>.<name>toExtensions</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>extensions</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>extension</name> =<init> <expr><name><name>extensions</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>extension</name>.<name>isCompatibleWith</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></while>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Manifest</name></type> <name>manifest</name> =<init> <expr><call><name><name>ExtensionUtil</name>.<name>getManifest</name></name><argument_list>(<argument><expr><name>libraryFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name><index>[]</index></type> <name>extensions</name> =<init> <expr><call><name><name>Extension</name>.<name>getAvailable</name></name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>extensions</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>extension</name> =<init> <expr><name><name>extensions</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>extension</name>.<name>isCompatibleWith</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Validate the tasks parameters.
     *
     * @throws BuildException if invalid parameters found
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>null</name> == <name>requiredExtension</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr>"Extension element must be specified."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> == <name>libraryFile</name> &amp;&amp; <call><name><name>extensionFileSets</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr>"File attribute not specified."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>null</name> != <name>libraryFile</name> &amp;&amp; !<call><name><name>libraryFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr>"File '" + <name>libraryFile</name> + "' does not exist."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>null</name> != <name>libraryFile</name> &amp;&amp; !<call><name><name>libraryFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr>"\'" + <name>libraryFile</name> + "\' is not a file."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
