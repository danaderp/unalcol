<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\EchoTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DefaultLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Test Java-dependent parts of the Echo task.
 */</comment>
<class><specifier>public</specifier> class <name>EchoTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>removeThis</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Create a new EchoTest.
     * @param name
     */</comment>
    <constructor><specifier>public</specifier> <name>EchoTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLogBlankEcho</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr>new <call><name>Project</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>EchoTestLogger</name></type> <name>logger</name> =<init> <expr>new <call><name>EchoTestLogger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Echo</name></type> <name>echo</name> =<init> <expr>new <call><name>Echo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>echo</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>echo</name>.<name>setTaskName</name></name><argument_list>(<argument><expr>"testLogBlankEcho"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>echo</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"[testLogBlankEcho] "</expr></argument>, <argument><expr><name><name>logger</name>.<name>lastLoggedMessage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLogUTF8Echo</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr>new <call><name>Project</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>EchoTestLogger</name></type> <name>logger</name> =<init> <expr>new <call><name>EchoTestLogger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Echo</name></type> <name>echo</name> =<init> <expr>new <call><name>Echo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>echo</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>echo</name>.<name>setTaskName</name></name><argument_list>(<argument><expr>"testLogUTF8Echo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>echo</name>.<name>setMessage</name></name><argument_list>(<argument><expr>"\u00e4\u00a9"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>removeThis</name> = new <call><name>File</name><argument_list>(<argument><expr>"abc.txt"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>echo</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>removeThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>echo</name>.<name>setEncoding</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>echo</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileUtils</name></type> <name>fu</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>x</name> =<init> <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>removeThis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"UTF-8"</expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr>"\u00e4\u00a9"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>exc</name></decl></param>) <block>{

        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>removeThis</name> != <name>null</name> &amp;&amp; <call><name><name>removeThis</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>removeThis</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>removeThis</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <class><specifier>private</specifier> class <name>EchoTestLogger</name> <super><extends>extends <name>DefaultLogger</name></extends></super> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>lastLoggedMessage</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Create a new EchoTestLogger.
         */</comment>
        <constructor><specifier>public</specifier> <name>EchoTestLogger</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>setMessageOutputLevel</name></name><argument_list>(<argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>setOutputPrintStream</name></name><argument_list>(<argument><expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>ByteArrayOutputStream</name><argument_list>(<argument><expr>256</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>setErrorPrintStream</name></name><argument_list>(<argument><expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>ByteArrayOutputStream</name><argument_list>(<argument><expr>256</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * {@inheritDoc}
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>lastLoggedMessage</name></name> = <name>message</name></expr>;</expr_stmt>
        }</block></function>
        
    }</block></class>
}</block></class>
</unit>
