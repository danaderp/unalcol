<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\SortFilter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;
 * Sort a file before and/or after the file.
 * &lt;/p&gt;
 *
 * &lt;p&gt;
 * Examples:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 *   &amp;lt;copy todir=&amp;quot;build&amp;quot;&amp;gt;
 *       &amp;lt;fileset dir=&amp;quot;input&amp;quot; includes=&amp;quot;*.txt&amp;quot;/&amp;gt;
 *       &amp;lt;filterchain&amp;gt;
 *           &amp;lt;sortfilter/&amp;gt;
 *       &amp;lt;/filterchain&amp;gt;
 *   &amp;lt;/copy&amp;gt;
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * Sort all files &lt;code&gt;*.txt&lt;/code&gt; from &lt;i&gt;src&lt;/i&gt; location and copy
 * them into &lt;i&gt;build&lt;/i&gt; location. The lines of each file are sorted
 * in ascendant order comparing the lines via the
 * &lt;code&gt;String.compareTo(Object o)&lt;/code&gt; method.
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 *   &amp;lt;copy todir=&amp;quot;build&amp;quot;&amp;gt;
 *       &amp;lt;fileset dir=&amp;quot;input&amp;quot; includes=&amp;quot;*.txt&amp;quot;/&amp;gt;
 *       &amp;lt;filterchain&amp;gt;
 *           &amp;lt;sortfilter reverse=&amp;quot;true&amp;quot;/&amp;gt;
 *       &amp;lt;/filterchain&amp;gt;
 *   &amp;lt;/copy&amp;gt;
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * Sort all files &lt;code&gt;*.txt&lt;/code&gt; from &lt;i&gt;src&lt;/i&gt; location into reverse
 * order and copy them into &lt;i&gt;build&lt;/i&gt; location. If reverse parameter has
 * value &lt;code&gt;true&lt;/code&gt; (default value), then the output line of the files
 * will be in ascendant order.
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 *   &amp;lt;copy todir=&amp;quot;build&amp;quot;&amp;gt;
 *       &amp;lt;fileset dir=&amp;quot;input&amp;quot; includes=&amp;quot;*.txt&amp;quot;/&amp;gt;
 *       &amp;lt;filterchain&amp;gt;
 *           &amp;lt;filterreader classname=&amp;quot;org.apache.tools.ant.filters.SortFilter&amp;quot;&amp;gt;
 *             &amp;lt;param name=&amp;quot;comparator&amp;quot; value=&amp;quot;org.apache.tools.ant.filters.EvenFirstCmp&amp;quot;/&amp;gt;
 *           &amp;lt;/filterreader&amp;gt;
 *       &amp;lt;/filterchain&amp;gt;
 *   &amp;lt;/copy&amp;gt;
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * Sort all files &lt;code&gt;*.txt&lt;/code&gt; from &lt;i&gt;src&lt;/i&gt; location using as
 * sorting criterium &lt;code&gt;EvenFirstCmp&lt;/code&gt; class, that sorts the file
 * lines putting even lines first then odd lines for example. The modified files
 * are copied into &lt;i&gt;build&lt;/i&gt; location. The &lt;code&gt;EvenFirstCmp&lt;/code&gt;,
 * has to an instanciable class via &lt;code&gt;Class.newInstance()&lt;/code&gt;,
 * therefore in case of inner class has to be &lt;em&gt;static&lt;/em&gt;. It also has to
 * implement &lt;code&gt;java.util.Comparator&lt;/code&gt; interface, for example:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 *         package org.apache.tools.ant.filters;
 *         ...(omitted)
 *           public final class EvenFirstCmp implements &amp;lt;b&amp;gt;Comparator&amp;lt;/b&amp;gt; {
 *             public int compare(Object o1, Object o2) {
 *             ...(omitted)
 *             }
 *           }
 * &lt;/pre&gt;
 *
 * &lt;p&gt;The example above is equivalent to:&lt;/p&gt;
 *
 * &lt;blockquote&gt;&lt;pre&gt;
 *   &amp;lt;componentdef name="evenfirst"
 *                 classname="org.apache.tools.ant.filters.EvenFirstCmp&amp;quot;/&amp;gt;
 *   &amp;lt;copy todir=&amp;quot;build&amp;quot;&amp;gt;
 *       &amp;lt;fileset dir=&amp;quot;input&amp;quot; includes=&amp;quot;*.txt&amp;quot;/&amp;gt;
 *       &amp;lt;filterchain&amp;gt;
 *           &amp;lt;sortfilter&amp;gt;
 *               &amp;lt;evenfirst/&amp;gt;
 *           &amp;lt;/sortfilter&amp;gt;
 *       &amp;lt;/filterchain&amp;gt;
 *   &amp;lt;/copy&amp;gt;
 * &lt;/pre&gt;&lt;/blockquote&gt;
 *
 * &lt;p&gt; If parameter &lt;code&gt;comparator&lt;/code&gt; is present, then
 * &lt;code&gt;reverse&lt;/code&gt; parameter will not be taken into account.  &lt;/p&gt;
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SortFilter</name> <super><extends>extends <name>BaseParamFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{

    <comment type="javadoc">/** Parameter name for reverse order. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>REVERSE_KEY</name> =<init> <expr>"reverse"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Parameter name for specifying the comparator criteria via class that
     * implement &lt;code&gt;java.util.Comparator&lt;/code&gt; interface.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPARATOR_KEY</name> =<init> <expr>"comparator"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Instance of comparator class to be used for sorting.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>?</name> <super>super <name>String</name></super></argument>&gt;</argument_list></name></type> <name>comparator</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Controls if the sorting process will be in ascendant/descendant order. If
     * If has value &lt;code&gt;true&lt;/code&gt;, then the line of the file will be
     * sorted on descendant order. Default value: &lt;code&gt;false&lt;/code&gt;. It will
     * be considered only if &lt;code&gt;comparator&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>reverse</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Stores the lines to be sorted.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lines</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Remaining line to be read from this filter, or &lt;code&gt;null&lt;/code&gt; if the
     * next call to &lt;code&gt;read()&lt;/code&gt; should read the original stream to
     * find the next matching line.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>SortFilter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in
     *            A Reader object providing the underlying stream. Must not be
     *            &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>SortFilter</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the next character in the filtered stream. If the desired number
     * of lines have already been read, the resulting stream is effectively at
     * an end. Otherwise, the next character from the underlying stream is read
     * and returned.
     *
     * @return the next character in the resulting stream, or -1 if the end of
     *         the resulting stream has been reached
     *
     * @exception IOException
     *                if the underlying stream throws an IOException during
     *                reading
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name>getInitialized</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setInitialized</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>line</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/*
             * We are on the state: "reading the current line", lines are
             * already sorted
             */</comment>
            <expr_stmt><expr><name>ch</name> = <call><name><name>line</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>line</name>.<name>length</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>line</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>line</name> = <call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>lines</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// We read all lines and sort them</comment>
                <expr_stmt><expr><name>lines</name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><expr><name>line</name> = <call><name>readLine</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>line</name> != <name>null</name></expr>;</condition> <incr><expr><name>line</name> = <call><name>readLine</name><argument_list>()</argument_list></call></expr></incr>) <block>{
                    <expr_stmt><expr><call><name><name>lines</name>.<name>add</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name>sort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>iterator</name> = <call><name><name>lines</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>line</name> = (<name>String</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>line</name> = <name>null</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>lines</name> = <name>null</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>iterator</name> = <name>null</name></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>line</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><name>ch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new SortReader using the passed in Reader for instantiation.
     *
     * @param rdr
     *            A Reader object providing the underlying stream. Must not be
     *            &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering the
     *         specified reader
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SortFilter</name></type> <name>newFilter</name> =<init> <expr>new <call><name>SortFilter</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setReverse</name></name><argument_list>(<argument><expr><call><name>isReverse</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setComparator</name></name><argument_list>(<argument><expr><call><name>getComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setInitialized</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the sorting process will be in reverse
     * order, otherwise the sorting process will be in ascendant order.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the sorting process will be in reverse
     *         order, otherwise the sorting process will be in ascendant order.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReverse</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>reverse</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the sorting process will be in ascendant (&lt;code&gt;reverse=false&lt;/code&gt;)
     * or to descendant (&lt;code&gt;reverse=true&lt;/code&gt;).
     *
     * @param reverse
     *            Boolean representing reverse ordering process.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReverse</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>reverse</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>reverse</name></name> = <name>reverse</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the comparator to be used for sorting.
     *
     * @return the comparator
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>?</name> <super>super <name>String</name></super></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>comparator</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the comparator to be used as sorting criterium.
     *
     * @param comparator
     *            the comparator to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComparator</name><parameter_list>(<param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>?</name> <super>super <name>String</name></super></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>comparator</name></name> = <name>comparator</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the comparator to be used as sorting criterion as nested element.
     *
     * @param comparator
     *            the comparator to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>?</name> <super>super <name>String</name></super></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>comparator</name></name> != <name>null</name> &amp;&amp; <name>comparator</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"can't have more than one comparator"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setComparator</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Scans the parameters list
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// get parameters</comment>
        <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><call><name>getParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>params</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>params</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>paramName</name> =<init> <expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>REVERSE_KEY</name>.<name>equals</name></name><argument_list>(<argument><expr><name>paramName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setReverse</name><argument_list>(<argument><expr><call><name><name>Boolean</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                               .<call><name>booleanValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <if>if <condition>(<expr><call><name><name>COMPARATOR_KEY</name>.<name>equals</name></name><argument_list>(<argument><expr><name>paramName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>className</name> =<init> <expr>(<name>String</name>) <name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
                        <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>?</name> <super>super <name>String</name></super></argument>&gt;</argument_list></name></type> <name>comparatorInstance</name> =<init> <expr><call>(<name><name>Comparator</name><argument_list>&lt;<argument><name>?</name> <super>super <name>String</name></super></argument>&gt;</argument_list></name>) <argument_list>(<argument><expr><call><name><name>Class</name>
                                .<name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>setComparator</name><argument_list>(<argument><expr><name>comparatorInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    }</block> <catch>catch (<param><decl><type><name>InstantiationException</name></type> <name>e</name></decl></param>) <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
                        <comment type="block">/*
                         * Probably a inner non-static class, this this case is
                         * not considered
                         */</comment>
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch> <catch>catch (<param><decl><type><name>ClassCastException</name></type> <name>e</name></decl></param>) <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Value of comparator attribute"
                                                 + " should implement"
                                                 + " java.util.Comparator"
                                                 + " interface"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch></try>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sorts the read lines (&lt;code&gt;lines&lt;/code&gt;)acording to the sorting
     * criteria defined by the user.
     *
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>sort</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>comparator</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>reverse</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s1</name></decl></param>, <param><decl><type><name>String</name></type> <name>s2</name></decl></param>)</parameter_list> <block>{
                            <return>return <expr>(-<call><name><name>s1</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call>)</expr>;</return>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
