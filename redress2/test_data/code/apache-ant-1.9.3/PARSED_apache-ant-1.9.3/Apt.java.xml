<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Apt.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>compilers</name>.<name>AptExternalCompilerAdapter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<comment type="javadoc">/**
 * Apt Task for running the Annotation processing tool for JDK 1.5.  It derives
 * from the existing Javac task, and forces the compiler based on whether we're
 * executing internally, or externally.
 *
 * @since Ant 1.7
 */</comment>


<class><specifier>public</specifier> class <name>Apt</name>
        <super><extends>extends <name>Javac</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>compile</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>factory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>factoryPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>options</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>Option</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>preprocessDir</name></decl>;</decl_stmt>
    <comment type="javadoc">/** The name of the apt tool. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EXECUTABLE_NAME</name> =<init> <expr>"apt"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** An warning message when ignoring compiler attribute. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_IGNORING_COMPILER_OPTION</name>
        =<init> <expr>"Ignoring compiler attribute for the APT task, as it is fixed"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** A warning message if used with java &lt; 1.5. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_WRONG_JAVA_VERSION</name>
        =<init> <expr>"Apt task requires Java 1.5+"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * exposed for debug messages
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WARNING_IGNORING_FORK</name> =<init>
        <expr>"Apt only runs in its own JVM; fork=false option ignored"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The nested option element.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Option</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

        <comment type="javadoc">/** Constructor for Option */</comment>
        <constructor><specifier>public</specifier> <name>Option</name><parameter_list>()</parameter_list> <block>{
            <comment type="line">//default</comment>
        }</block></constructor>

        <comment type="javadoc">/**
         * Get the name attribute.
         * @return the name attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the name attribute.
         * @param name the name of the option.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the value attribute.
         * @return the value attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>value</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the value attribute.
         * @param value the value of the option.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Constructor for Apt task.
     * This sets the apt compiler adapter as the compiler in the super class.
     */</comment>
    <constructor><specifier>public</specifier> <name>Apt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setCompiler</name></name><argument_list>(<argument><expr><name><name>AptExternalCompilerAdapter</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the name of the apt executable.
     *
     * @return the name of the executable.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAptExecutable</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>exe</name> =<init> <expr><call><name>getExecutable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>exe</name> != <name>null</name> ? <name>exe</name> :
            <call><name><name>JavaEnvUtils</name>.<name>getJdkExecutable</name></name><argument_list>(<argument><expr><name>EXECUTABLE_NAME</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the compiler.
     * This is not allowed and a warning log message is made.
     * @param compiler not used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompiler</name><parameter_list>(<param><decl><type><name>String</name></type> <name>compiler</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>ERROR_IGNORING_COMPILER_OPTION</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the fork attribute.
     * Non-forking APT is highly classpath dependent and appears to be too
     * brittle to work. The sole reason this attribute is retained
     * is the superclass does it
     * @param fork if false; warn the option is ignored.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFork</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>fork</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>fork</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>WARNING_IGNORING_FORK</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the compiler class name.
     * @return the compiler class name.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCompiler</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>super</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the compile option for the apt compiler.
     * If this is false the "-nocompile" argument will be used.
     * @return the value of the compile option.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>compile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the compile option for the apt compiler.
     * Default value is true.
     * @param compile if true set the compile option.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompile</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>compile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>compile</name></name> = <name>compile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the factory option for the apt compiler.
     * If this is non-null the "-factory" argument will be used.
     * @return the value of the factory option.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFactory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>factory</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the factory option for the apt compiler.
     * Default value is null.
     * @param factory the classname of the factory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFactory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>factory</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>factory</name></name> = <name>factory</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a reference to a path to the factoryPath attribute.
     * @param ref a reference to a path.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFactoryPathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>ref</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createFactoryPath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a path to the factoryPath attribute.
     * @return a path to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createFactoryPath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>factoryPath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factoryPath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>factoryPath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the factory path attribute.
     * If this is not null, the "-factorypath" argument will be used.
     * The default value is null.
     * @return the factory path attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>getFactoryPath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>factoryPath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a nested option.
     * @return an option to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>Option</name></type> <name>createOption</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Option</name></type> <name>opt</name> =<init> <expr>new <call><name>Option</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>options</name>.<name>add</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>opt</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the options to the compiler.
     * Each option will use '"-E" name ["=" value]' argument.
     * @return the options.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>getOptions</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>options</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the preprocessdir attribute.
     * This corresponds to the "-s" argument.
     * The default value is null.
     * @return the preprocessdir attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getPreprocessDir</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>preprocessDir</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the preprocessdir attribute.
     * @param preprocessDir where to place processor generated source files.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPreprocessDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>preprocessDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>preprocessDir</name></name> = <name>preprocessDir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Do the compilation.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>JavaEnvUtils</name>.<name>getJavaVersionNumber</name></name><argument_list>()</argument_list></call> &gt;= 18</expr>)</condition><then> <block>{
           <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"apt does not exist under Java 1.8 and higher"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
