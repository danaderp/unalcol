<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\SubAntTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildListener</name></name>;</import>


<class><specifier>public</specifier> class <name>SubAntTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>SubAntTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/subant.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testnodirs</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr>"testnodirs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"testnodirs"</expr></argument>, <argument><expr>"No sub-builds to iterate on"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// target must be specified</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testgenericantfile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>dir1</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dir2</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"subant/subant-test1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dir3</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"subant/subant-test2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>testBaseDirs</name><argument_list>(<argument><expr>"testgenericantfile"</expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>dir1</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                         <expr><call><name><name>dir2</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                         <expr><call><name><name>dir3</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>

                     }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testantfile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>dir1</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// basedir of subant/subant-test1/subant.xml is ..</comment>
        <comment type="line">// therefore we expect here the subant/subant-test1 subdirectory</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>dir2</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"subant/subant-test1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// basedir of subant/subant-test2/subant.xml is ..</comment>
        <comment type="line">// therefore we expect here the subant subdirectory</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>dir3</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"subant"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>testBaseDirs</name><argument_list>(<argument><expr>"testantfile"</expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>dir1</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                         <expr><call><name><name>dir2</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                         <expr><call><name><name>dir3</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>

                     }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleTargets</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"multipleTargets"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"test1-one"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"test1-two"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"test2-one"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"test2-two"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleTargetsOneDoesntExist_FOEfalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"multipleTargetsOneDoesntExist_FOEfalse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"Target \"three\" does not exist in the project \"subant\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleTargetsOneDoesntExist_FOEtrue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"multipleTargetsOneDoesntExist_FOEtrue"</expr></argument>, 
                                       <argument><expr>"Calling not existent target"</expr></argument>, 
                                       <argument><expr>"Target \"three\" does not exist in the project \"subant\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>testBaseDirs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>dirs</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>SubAntTest</name>.<name>BasedirChecker</name></name></type> <name>bc</name> =<init> <expr>new <call><name><name>SubAntTest</name>.<name>BasedirChecker</name></name><argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AssertionFailedError</name></type> <name>ae</name> =<init> <expr><call><name><name>bc</name>.<name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ae</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>ae</name></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>project</name>.<name>removeBuildListener</name></name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>private</specifier> class <name>BasedirChecker</name> <super><implements>implements <name>BuildListener</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>expectedBasedirs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>calls</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>AssertionFailedError</name></type> <name>error</name></decl>;</decl_stmt>

        <constructor><name>BasedirChecker</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>dirs</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>expectedBasedirs</name> = <name>dirs</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list><block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>error</name> == <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expectedBasedirs</name><index>[<expr><name>calls</name>++</expr>]</index></name></expr></argument>,
                            <argument><expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>AssertionFailedError</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><name>error</name> = <name>e</name></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <function><type><name>AssertionFailedError</name></type> <name>getError</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>error</name></expr>;</return>
        }</block></function>

    }</block></class>


}</block></class>
</unit>
