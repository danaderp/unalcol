<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\Enumerations.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>

<comment type="javadoc">/**
 * A couple of methods related to enumerations that might be useful.
 * This class should probably disappear once the required JDK is set to 1.2
 * instead of 1.1.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Enumerations</name> <block>{

        <constructor><specifier>private</specifier> <name>Enumerations</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>

        <comment type="javadoc">/**
         * creates an enumeration from an array of objects.
         * @param       array   the array of object to enumerate.
         * @return the enumeration over the array of objects.
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Enumeration</name></type> <name>fromArray</name><parameter_list>(<param><decl><type><name><name>Object</name><index>[]</index></name></type> <name>array</name></decl></param>)</parameter_list> <block>{
                <return>return <expr>new <call><name>ArrayEnumeration</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
        * creates an enumeration from an array of enumeration. The created enumeration
        * will sequentially enumerate over all elements of each enumeration and skip
        * &lt;tt&gt;null&lt;/tt&gt; enumeration elements in the array.
        * @param        enums   the array of enumerations.
        * @return the enumeration over the array of enumerations.
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Enumeration</name></type> <name>fromCompound</name><parameter_list>(<param><decl><type><name><name>Enumeration</name><index>[]</index></name></type> <name>enums</name></decl></param>)</parameter_list> <block>{
                <return>return <expr>new <call><name>CompoundEnumeration</name><argument_list>(<argument><expr><name>enums</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

}</block></class>


<comment type="javadoc">/**
 * Convenient enumeration over an array of objects.
 */</comment>
<class>class <name>ArrayEnumeration</name> <super><implements>implements <name>Enumeration</name></implements></super> <block>{

        <comment type="javadoc">/** object array */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name><index>[]</index></type> <name>array</name></decl>;</decl_stmt>

        <comment type="javadoc">/** current index */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>pos</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Initialize a new enumeration that wraps an array.
         * @param       array   the array of object to enumerate.
         */</comment>
        <constructor><specifier>public</specifier> <name>ArrayEnumeration</name><parameter_list>(<param><decl><type><name><name>Object</name><index>[]</index></name></type> <name>array</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>array</name></name> = <name>array</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>pos</name></name> = 0</expr>;</expr_stmt>
        }</block></constructor>
        <comment type="javadoc">/**
         * Tests if this enumeration contains more elements.
         *
         * @return  &lt;code&gt;true&lt;/code&gt; if and only if this enumeration object
         *           contains at least one more element to provide;
         *          &lt;code&gt;false&lt;/code&gt; otherwise.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasMoreElements</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr>(<name>pos</name> &lt; <name><name>array</name>.<name>length</name></name>)</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the next element of this enumeration if this enumeration
         * object has at least one more element to provide.
         *
         * @return     the next element of this enumeration.
         * @throws  NoSuchElementException  if no more elements exist.
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>nextElement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchElementException</name></expr></argument></throws> <block>{
                <if>if <condition>(<expr><call><name>hasMoreElements</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><name><name>array</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>pos</name>++</expr>;</expr_stmt>
                        <return>return <expr><name>o</name></expr>;</return>
                }</block></then></if>
                <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
}</block></class>
<comment type="javadoc">/**
 * Convenient enumeration over an array of enumeration. For example:
 * &lt;pre&gt;
 * Enumeration e1 = v1.elements();
 * while (e1.hasMoreElements()) {
 *    // do something
 * }
 * Enumeration e2 = v2.elements();
 * while (e2.hasMoreElements()) {
 *    // do the same thing
 * }
 * &lt;/pre&gt;
 * can be written as:
 * &lt;pre&gt;
 * Enumeration[] enums = { v1.elements(), v2.elements() };
 * Enumeration e = Enumerations.fromCompound(enums);
 * while (e.hasMoreElements()) {
 *    // do something
 * }
 * &lt;/pre&gt;
 * Note that the enumeration will skip null elements in the array. The following is
 * thus possible:
 * &lt;pre&gt;
 * Enumeration[] enums = { v1.elements(), null, v2.elements() }; // a null enumeration in the array
 * Enumeration e = Enumerations.fromCompound(enums);
 * while (e.hasMoreElements()) {
 *    // do something
 * }
 * &lt;/pre&gt;
 */</comment>
 <class>class <name>CompoundEnumeration</name> <super><implements>implements <name>Enumeration</name></implements></super> <block>{

        <comment type="javadoc">/** enumeration array */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Enumeration</name><index>[]</index></type> <name>enumArray</name></decl>;</decl_stmt>

        <comment type="javadoc">/** index in the enums array */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>index</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CompoundEnumeration</name><parameter_list>(<param><decl><type><name><name>Enumeration</name><index>[]</index></name></type> <name>enumarray</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>enumArray</name></name> = <name>enumarray</name></expr>;</expr_stmt>
    }</block></constructor>

        <comment type="javadoc">/**
         * Tests if this enumeration contains more elements.
         *
         * @return  &lt;code&gt;true&lt;/code&gt; if and only if this enumeration object
         *           contains at least one more element to provide;
         *          &lt;code&gt;false&lt;/code&gt; otherwise.
         */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasMoreElements</name><parameter_list>()</parameter_list> <block>{
                <while>while <condition>(<expr><name>index</name> &lt; <name><name>enumArray</name>.<name>length</name></name></expr>)</condition> <block>{
                        <if>if <condition>(<expr><name><name>enumArray</name><index>[<expr><name>index</name></expr>]</index></name> != <name>null</name> &amp;&amp; <name><name>enumArray</name><index>[<expr><name>index</name></expr>]</index></name>.<call><name>hasMoreElements</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                                <return>return <expr>true</expr>;</return>
                        }</block></then></if>
                        <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
                }</block></while>
                <return>return <expr>false</expr>;</return>
    }</block></function>

        <comment type="javadoc">/**
         * Returns the next element of this enumeration if this enumeration
         * object has at least one more element to provide.
         *
         * @return     the next element of this enumeration.
         * @throws  NoSuchElementException  if no more elements exist.
         */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>nextElement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchElementException</name></expr></argument></throws> <block>{
                <if>if <condition>(<expr><call><name>hasMoreElements</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr><name><name>enumArray</name><index>[<expr><name>index</name></expr>]</index></name>.<call><name>nextElement</name><argument_list>()</argument_list></call></expr>;</return>
                }</block></then></if>
                <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>


</unit>
