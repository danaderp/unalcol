<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\FileResource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceFactory</name></name>;</import>

<comment type="javadoc">/**
 * A Resource representation of a File.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>FileResource</name> <super><extends>extends <name>Resource</name></extends> <implements>implements <name>Touchable</name>, <name>FileProvider</name>,
        <name>ResourceFactory</name>, <name>Appendable</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NULL_FILE</name>
        =<init> <expr><call><name><name>Resource</name>.<name>getMagicNumber</name></name><argument_list>(<argument><expr>"null file".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>baseDir</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResource</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new FileResource using the specified basedir and relative name.
     * @param b      the basedir as File.
     * @param name   the relative filename.
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResource</name><parameter_list>(<param><decl><type><name>File</name></type> <name>b</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>baseDir</name></name> = <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new FileResource from a File.
     * @param f the File represented.
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResource</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create a new FileResource.
     * @param p Project
     * @param f File represented
     * @since Ant 1.8
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResource</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>, <param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProject</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for Ant attribute introspection.
     * @param p the Project against which to resolve &lt;code&gt;s&lt;/code&gt;.
     * @param s the absolute or Project-relative filename as a String.
     * @see org.apache.tools.ant.IntrospectionHelper
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResource</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>, <param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the File for this FileResource.
     * @param f the File to be represented.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>file</name> = <name>f</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>f</name> != <name>null</name> &amp;&amp; (<call><name>getBaseDir</name><argument_list>()</argument_list></call> == <name>null</name> || !<call><name><name>FILE_UTILS</name>.<name>isLeadingPath</name></name><argument_list>(<argument><expr><call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setBaseDir</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the file represented by this FileResource.
     * @return the File.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>FileResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getFile</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <synchronized>synchronized (<expr><name>this</name></expr>) <block>{
            <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">//try to resolve file set via basedir/name property setters:</comment>
                <decl_stmt><decl><type><name>File</name></type> <name>d</name> =<init> <expr><call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>n</name> =<init> <expr><call><name><name>super</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setFile</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></synchronized>
        <return>return <expr><name>file</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the basedir for this FileResource.
     * @param b the basedir as File.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>baseDir</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the basedir to which the name is relative.
     * @return the basedir as File.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getBaseDir</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>FileResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>baseDir</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Overrides the super version.
     * @param r the Reference to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>file</name> != <name>null</name> || <name>baseDir</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the name of this FileResource.  If the basedir is set,
     * the name will be relative to that.  Otherwise the basename
     * only will be returned.
     * @return the name of this resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>b</name> =<init> <expr><call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>b</name> == <name>null</name> ? <call><name>getNotNullFile</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
            : <call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>getNotNullFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether this file exists.
     * @return true if this resource exists.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isExists</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isReference</name><argument_list>()</argument_list></call> ? ((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>isExists</name><argument_list>()</argument_list></call>
            : <call><name>getNotNullFile</name><argument_list>()</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the modification time in milliseconds since 01.01.1970 .
     * @return 0 if the resource does not exist.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastModified</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isReference</name><argument_list>()</argument_list></call>
            ? ((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getLastModified</name><argument_list>()</argument_list></call>
            : <call><name>getNotNullFile</name><argument_list>()</argument_list></call>.<call><name>lastModified</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether the resource is a directory.
     * @return boolean flag indicating if the resource is a directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDirectory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isReference</name><argument_list>()</argument_list></call> ? ((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>isDirectory</name><argument_list>()</argument_list></call>
            : <call><name>getNotNullFile</name><argument_list>()</argument_list></call>.<call><name>isDirectory</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the size of this Resource.
     * @return the size, as a long, 0 if the Resource does not exist.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isReference</name><argument_list>()</argument_list></call> ? ((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getSize</name><argument_list>()</argument_list></call>
            : <call><name>getNotNullFile</name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return an InputStream for reading the contents of this Resource.
     * @return an InputStream object.
     * @throws IOException if an error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>isReference</name><argument_list>()</argument_list></call>
            ? ((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getInputStream</name><argument_list>()</argument_list></call>
            : new <call><name>FileInputStream</name><argument_list>(<argument><expr><call><name>getNotNullFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an OutputStream for the Resource.
     * @return an OutputStream to which content can be written.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if OutputStreams are not
     *         supported for this Resource type.
     */</comment>
    <function><type><specifier>public</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>FileResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getOutputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>getOutputStream</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>OutputStream</name></type> <name>getAppendOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>FileResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getAppendOutputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>getOutputStream</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>append</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name>getNotNullFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call> &amp;&amp; !<name>append</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>f</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>p</name> =<init> <expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>p</name> != <name>null</name> &amp;&amp; !(<call><name><name>p</name>.<name>exists</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>p</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><name>append</name> ? new <call><name>FileOutputStream</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call> : new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compare this FileResource to another Resource.
     * @param another the other Resource against which to compare.
     * @return a negative integer, zero, or a positive integer as this FileResource
     *         is less than, equal to, or greater than the specified Resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>another</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>compareTo</name><argument_list>(<argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>FileProvider</name></type> <name>otherFP</name> =<init> <expr><call><name><name>another</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>otherFP</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>f</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>File</name></type> <name>of</name> =<init> <expr><call><name><name>otherFP</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>of</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>1</expr>;</return>
            }</block></then></if>
            <return>return <expr><call><name><name>f</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>of</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compare another Object to this FileResource for equality.
     * @param another the other Object to compare.
     * @return true if another is a FileResource representing the same file.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>another</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>another</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getCheckedRef</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<call><name><name>another</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>FileResource</name></type> <name>otherfr</name> =<init> <expr>(<name>FileResource</name>) <name>another</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getFile</name><argument_list>()</argument_list></call> == <name>null</name>
            ? <call><name><name>otherfr</name>.<name>getFile</name></name><argument_list>()</argument_list></call> == <name>null</name>
            : <call><name>getFile</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>otherfr</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the hash code for this Resource.
     * @return hash code as int.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getCheckedRef</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>MAGIC</name> * (<call><name>getFile</name><argument_list>()</argument_list></call> == <name>null</name> ? <name>NULL_FILE</name> : <call><name>getFile</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the string representation of this Resource.
     * @return this FileResource formatted as a String.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getCheckedRef</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>"(unbound file resource)"</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>absolutePath</name> =<init> <expr><call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>absolutePath</name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Fulfill the ResourceCollection contract.
     * @return whether this Resource is a FileResource.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFilesystemOnly</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>FileResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>isFilesystemOnly</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Implement the Touchable interface.
     * @param modTime new last modification time.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>touch</name><parameter_list>(<param><decl><type><name>long</name></type> <name>modTime</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>FileResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>touch</name><argument_list>(<argument><expr><name>modTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>getNotNullFile</name><argument_list>()</argument_list></call>.<call><name>setLastModified</name><argument_list>(<argument><expr><name>modTime</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to change file modification time"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the file represented by this FileResource, ensuring it is not null.
     * @return the not-null File.
     * @throws BuildException if file is null.
     */</comment>
    <function><type><specifier>protected</specifier> <name>File</name></type> <name>getNotNullFile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getFile</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"file attribute is null!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getFile</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a new resource that matches a relative or absolute path.
     * If the current instance has a compatible baseDir attribute, it is copied.
     * @param path relative/absolute path to a resource
     * @return a new resource of type FileResource
     * @throws BuildException if desired
     * @since Ant1.8
     */</comment>
    <function><type><specifier>public</specifier> <name>Resource</name></type> <name>getResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>newfile</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><call><name>getFile</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileResource</name></type> <name>fileResource</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>newfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>FILE_UTILS</name>.<name>isLeadingPath</name></name><argument_list>(<argument><expr><call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newfile</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fileResource</name>.<name>setBaseDir</name></name><argument_list>(<argument><expr><call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>fileResource</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
