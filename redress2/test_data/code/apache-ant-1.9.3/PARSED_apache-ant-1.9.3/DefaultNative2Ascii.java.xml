<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\native2ascii\DefaultNative2Ascii.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>native2ascii</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>Native2Ascii</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * encapsulates the handling common to diffent Native2Asciiadapter
 * implementations.
 *
 * @since Ant 1.6.3
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DefaultNative2Ascii</name> <super><implements>implements <name>Native2AsciiAdapter</name></implements></super> <block>{

    <comment type="javadoc">/** No-arg constructor. */</comment>
    <constructor><specifier>public</specifier> <name>DefaultNative2Ascii</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Splits the task into setting up the command line switches
     * @param args the native 2 ascii arguments.
     * @param srcFile the source file.
     * @param destFile the destination file.
     * @return run if the conversion was successful.
     * @throws BuildException if there is a problem.
     * (delegated to {@link #setup setup}), adding the file names
     * (delegated to {@link #addFiles addFiles}) and running the tool
     * (delegated to {@link #run run}).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>convert</name><parameter_list>(<param><decl><type><name>Native2Ascii</name></type> <name>args</name></decl></param>, <param><decl><type><name>File</name></type> <name>srcFile</name></decl></param>,
                                 <param><decl><type><name>File</name></type> <name>destFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmd</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setup</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addFiles</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>srcFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>run</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets up the initial command line.
     *
     * &lt;p&gt;only the -encoding argument and nested arg elements get
     * handled here.&lt;/p&gt;
     *
     * @param cmd Command line to add to
     * @param args provides the user-setting and access to Ant's
     * logging system.
     * @throws BuildException if there was a problem.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setup</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>Native2Ascii</name></type> <name>args</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>args</name>.<name>getEncoding</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>args</name>.<name>getEncoding</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>addArguments</name></name><argument_list>(<argument><expr><call><name><name>args</name>.<name>getCurrentArgs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds source and dest files to the command line.
     *
     * &lt;p&gt;This implementation adds them without any leading
     * qualifiers, source first.&lt;/p&gt;
     *
     * @param cmd Command line to add to
     * @param log provides access to Ant's logging system.
     * @param src the source file
     * @param dest the destination file
     * @throws BuildException if there was a problem.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addFiles</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>ProjectComponent</name></type> <name>log</name></decl></param>, <param><decl><type><name>File</name></type> <name>src</name></decl></param>,
                            <param><decl><type><name>File</name></type> <name>dest</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the command.
     *
     * @param cmd Command line to execute
     * @param log provides access to Ant's logging system.
     * @return whether execution was successful
     * @throws BuildException if there was a problem.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>run</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>ProjectComponent</name></type> <name>log</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws>;</function_decl>
}</block></class>
</unit>
