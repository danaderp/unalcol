<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\optional\image\Rotate.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name></name>;</package>

<import>import <name><name>javax</name>.<name>media</name>.<name>jai</name>.<name>PlanarImage</name></name>;</import>
<import>import <name><name>javax</name>.<name>media</name>.<name>jai</name>.<name>InterpolationNearest</name></name>;</import>
<import>import <name><name>javax</name>.<name>media</name>.<name>jai</name>.<name>JAI</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>renderable</name>.<name>ParameterBlock</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>BufferedImage</name></name>;</import>

<comment type="javadoc">/**
 * ImageOperation to rotate an image by a certain degree
 *
 * @see org.apache.tools.ant.taskdefs.optional.image.Image
 */</comment>
<class><specifier>public</specifier> class <name>Rotate</name> <super><extends>extends <name>TransformOperation</name></extends> <implements>implements <name>DrawOperation</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>HALF_CIRCLE</name> =<init> <expr>180.0F</expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>angle</name> =<init> <expr>0.0F</expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Sets the angle of rotation in degrees.
     * @param ang The angle at which to rotate the image
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAngle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ang</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>angle</name> = <call><name><name>Float</name>.<name>parseFloat</name></name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Rotate an image.
     * @param image the image to rotate.
     * @return the rotated image.
     */</comment>
    <function><type><specifier>public</specifier> <name>PlanarImage</name></type> <name>performRotate</name><parameter_list>(<param><decl><type><name>PlanarImage</name></type> <name>image</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>tAngle</name> =<init> <expr><call>(<name>float</name>) <argument_list>(<argument><expr><name>angle</name> * (<name><name>Math</name>.<name>PI</name></name> / <name>HALF_CIRCLE</name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ParameterBlock</name></type> <name>pb</name> =<init> <expr>new <call><name>ParameterBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pb</name>.<name>addSource</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pb</name>.<name>add</name></name><argument_list>(<argument><expr>0.0F</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pb</name>.<name>add</name></name><argument_list>(<argument><expr>0.0F</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pb</name>.<name>add</name></name><argument_list>(<argument><expr><name>tAngle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pb</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>InterpolationNearest</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>JAI</name>.<name>create</name></name><argument_list>(<argument><expr>"Rotate"</expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Performs the image rotation when being handled as a TransformOperation.
     * @param image The image to perform the transformation on.
     * @return the transformed image.
     */</comment>
    <function><type><specifier>public</specifier> <name>PlanarImage</name></type> <name>executeTransformOperation</name><parameter_list>(<param><decl><type><name>PlanarImage</name></type> <name>image</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>bi</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>instructions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ImageOperation</name></type> <name>instr</name> =<init> <expr>((<name>ImageOperation</name>) <call><name><name>instructions</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>instr</name> <name>instanceof</name> <name>DrawOperation</name></expr>)</condition><then> <block>{
                <comment type="line">// If this TransformOperation has DrawOperation children</comment>
                <comment type="line">// then Rotate the first child and return.</comment>
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Execing Draws"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>PlanarImage</name></type> <name>op</name> =<init> <expr>((<name>DrawOperation</name>) <name>instr</name>).<call><name>executeDrawOperation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>image</name> = <call><name>performRotate</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>image</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><name>instr</name> <name>instanceof</name> <name>TransformOperation</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>bi</name> = <call><name><name>image</name>.<name>getAsBufferedImage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Execing Transforms"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>image</name> = ((<name>TransformOperation</name>) <name>instr</name>)
                    .<call><name>executeTransformOperation</name><argument_list>(<argument><expr><call><name><name>PlanarImage</name>.<name>wrapRenderedImage</name></name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>bi</name> = <call><name><name>image</name>.<name>getAsBufferedImage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Execing as TransformOperation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>image</name> = <call><name>performRotate</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>image</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Performs the image rotation when being handled as a DrawOperation.
     *  It absolutely requires that there be a DrawOperation nested beneath it,
     *  but only the FIRST DrawOperation will be handled since it can only return
     *  ONE image.
     * @return the image.
     */</comment>
    <function><type><specifier>public</specifier> <name>PlanarImage</name></type> <name>executeDrawOperation</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>instructions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ImageOperation</name></type> <name>instr</name> =<init> <expr>((<name>ImageOperation</name>) <call><name><name>instructions</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>instr</name> <name>instanceof</name> <name>DrawOperation</name></expr>)</condition><then> <block>{
                <comment type="line">// If this TransformOperation has DrawOperation children</comment>
                <comment type="line">// then Rotate the first child and return.</comment>
                <decl_stmt><decl><type><name>PlanarImage</name></type> <name>op</name> =<init> <expr>((<name>DrawOperation</name>) <name>instr</name>).<call><name>executeDrawOperation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>op</name> = <call><name>performRotate</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>op</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
