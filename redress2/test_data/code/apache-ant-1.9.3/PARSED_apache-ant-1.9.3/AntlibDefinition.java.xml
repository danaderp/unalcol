<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\AntlibDefinition.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * Base class for tasks that that can be used in antlibs.
 * For handling uri and class loading.
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>AntlibDefinition</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>uri</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>antlibClassLoader</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The URI for this definition.
     * If the URI is "antlib:org.apache.tools.ant",
     * (this is the default uri)
     * the uri will be set to "".
     * URIs that start with "ant:" are reserved
     * and are not allowed in this context.
     * @param uri the namespace URI
     * @throws BuildException if a reserved URI is used
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setURI</name><parameter_list>(<param><decl><type><name>String</name></type> <name>uri</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>uri</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>ANT_CORE_URI</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>uri</name> = ""</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>uri</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"ant:"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Attempt to use a reserved URI " + <name>uri</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>uri</name></name> = <name>uri</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The URI for this definition.
     * @return The URI for this definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getURI</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>uri</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the class loader of the loading object
     *
     * @param classLoader a &lt;code&gt;ClassLoader&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAntlibClassLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>classLoader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>antlibClassLoader</name></name> = <name>classLoader</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The current antlib classloader
     * @return the antlib classloader for the definition, this
     *         is null if the definition is not used in an antlib.
     */</comment>
    <function><type><specifier>public</specifier> <name>ClassLoader</name></type> <name>getAntlibClassLoader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>antlibClassLoader</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
