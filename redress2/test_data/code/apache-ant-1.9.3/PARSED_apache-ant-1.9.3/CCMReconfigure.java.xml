<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ccm\CCMReconfigure.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ccm</name></name>;</package>


<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>


<comment type="javadoc">/**
 * Task allows to reconfigure a project, recursively or not
 */</comment>
<class><specifier>public</specifier> class <name>CCMReconfigure</name> <super><extends>extends <name>Continuus</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ccmProject</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>recurse</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for CCMReconfigure. */</comment>
    <constructor><specifier>public</specifier> <name>CCMReconfigure</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setCcmAction</name><argument_list>(<argument><expr><name>COMMAND_RECONFIGURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * Executes the task.
     * &lt;p&gt;
     * Builds a command line to execute ccm and then calls Exec's run method
     * to execute the command line.
     * &lt;/p&gt;
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>commandLine</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="line">// build the command line from what we got the format</comment>
        <comment type="line">// as specified in the CCM.EXE help</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getCcmCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getCcmAction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkOptions</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> = <call><name>run</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Execute</name>.<name>isFailure</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed executing: " + <call><name><name>commandLine</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Check the command line options.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkOptions</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><call><name>isRecurse</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_RECURSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if> <comment type="line">// end of if ()</comment>

        <if>if <condition>(<expr><call><name>isVerbose</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if> <comment type="line">// end of if ()</comment>

        <if>if <condition>(<expr><call><name>getCcmProject</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_PROJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getCcmProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Get the value of project.
     * @return value of project.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCcmProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ccmProject</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the ccm project on which the operation is applied.
     * @param v  Value to assign to project.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCcmProject</name><parameter_list>(<param><decl><type><name>String</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ccmProject</name></name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get the value of recurse.
     * @return value of recurse.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRecurse</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>recurse</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, recurse on subproject (default false).
     *
     * @param v  Value to assign to recurse.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRecurse</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>recurse</name></name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get the value of verbose.
     * @return value of verbose.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isVerbose</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>verbose</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, do a verbose reconfigure operation (default false).
     * @param v  Value to assign to verbose.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * /recurse --
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_RECURSE</name> =<init> <expr>"/recurse"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * /recurse --
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_VERBOSE</name> =<init> <expr>"/verbose"</expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     *  /project flag -- target project
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_PROJECT</name> =<init> <expr>"/project"</expr></init></decl>;</decl_stmt>

}</block></class>

</unit>
