<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\TestProcess.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<comment type="javadoc">/**
 * Interactive Testcase for Processdestroyer.
 *
 */</comment>
<class><specifier>public</specifier> class <name>TestProcess</name>
    <super><implements>implements <name>Runnable</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>run</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>done</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<name>done</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"shutting down TestProcess"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>run</name> = false</expr>;</expr_stmt>

            <synchronized>synchronized(<expr><name>this</name></expr>)
            <block>{
                <while>while <condition>(<expr>!<name>done</name></expr>)</condition>
                <block>{
                    <try>try <block>{ <expr_stmt><expr><call><name>wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{}</block></catch></try>
                }</block></while>
            }</block></synchronized>

            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"TestProcess shut down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 5 &amp;&amp; <name>run</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try>try <block>{ <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>2000</expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{}</block></catch></try>
        }</block></for>

        <synchronized>synchronized(<expr><name>this</name></expr>)
        <block>{
            <expr_stmt><expr><name>done</name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></synchronized>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Thread</name></type> <name>getShutdownHook</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>TestProcessShutdownHook</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> class <name>TestProcessShutdownHook</name>
        <super><extends>extends <name>Thread</name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>TestProcess</name></type> <name>tp</name> =<init> <expr>new <call><name>TestProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr>"TestProcess thread"</expr></argument>)</argument_list></call>.<call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>addShutdownHook</name><argument_list>(<argument><expr><call><name><name>tp</name>.<name>getShutdownHook</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
