<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\zip\ZipOutputStreamTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<class><specifier>public</specifier> class <name>ZipOutputStreamTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
    
    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ZipLong</name></type> <name>zl</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Constructor
     */</comment>	
    <constructor><specifier>public</specifier> <name>ZipOutputStreamTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
	
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>time</name> = new <call><name>Date</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cal</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>year</name> =<init> <expr><call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>month</name> =<init> <expr><call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>value</name> =<init>  <expr>((<name>year</name> - 1980) &lt;&lt; 25)
            |         (<name>month</name> &lt;&lt; 21)
            |	      (<call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call> &lt;&lt; 16)
            |         (<call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call> &lt;&lt; 11)
            |         (<call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr></argument>)</argument_list></call> &lt;&lt; 5)
            |         (<call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>SECOND</name></name></expr></argument>)</argument_list></call> &gt;&gt; 1)</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>byte</name><index>[<expr>4</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>value</name> &amp; 0xFF)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>value</name> &amp; 0xFF00) &gt;&gt; 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>value</name> &amp; 0xFF0000) &gt;&gt; 16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>3</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>value</name> &amp; 0xFF000000L) &gt;&gt; 24</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> = new <call><name>ZipLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testZipLong</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipLong</name></type> <name>test</name> =<init> <expr><call><name><name>ZipOutputStream</name>.<name>toDosTime</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>test</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>zl</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAdjustToLong</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>(<name>long</name>) <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>,
                     <argument><expr><call><name><name>ZipOutputStream</name>.<name>adjustToLong</name></name><argument_list>(<argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>((<name>long</name>) <name><name>Integer</name>.<name>MAX_VALUE</name></name>) + 1</expr></argument>,
                     <argument><expr><call><name><name>ZipOutputStream</name>.<name>adjustToLong</name></name><argument_list>(<argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2 * ((<name>long</name>) <name><name>Integer</name>.<name>MAX_VALUE</name></name>)</expr></argument>,
                     <argument><expr><call><name><name>ZipOutputStream</name>.<name>adjustToLong</name></name><argument_list>(<argument><expr>2 * <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
