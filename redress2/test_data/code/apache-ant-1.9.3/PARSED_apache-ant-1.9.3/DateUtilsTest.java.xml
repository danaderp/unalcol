<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\util\DateUtilsTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * TestCase for DateUtils.
 *
 */</comment>
<class><specifier>public</specifier> class <name>DateUtilsTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>DateUtilsTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testElapsedTime</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr><call><name><name>DateUtils</name>.<name>formatElapsedTime</name></name><argument_list>(<argument><expr>50*1000</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"50 seconds"</expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> = <call><name><name>DateUtils</name>.<name>formatElapsedTime</name></name><argument_list>(<argument><expr>65*1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1 minute 5 seconds"</expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> = <call><name><name>DateUtils</name>.<name>formatElapsedTime</name></name><argument_list>(<argument><expr>120*1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2 minutes 0 seconds"</expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> = <call><name><name>DateUtils</name>.<name>formatElapsedTime</name></name><argument_list>(<argument><expr>121*1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2 minutes 1 second"</expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// https://issues.apache.org/bugzilla/show_bug.cgi?id=44659</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLongElapsedTime</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2926 minutes 13 seconds"</expr></argument>,
                     <argument><expr><call><name><name>DateUtils</name>.<name>formatElapsedTime</name></name><argument_list>(<argument><expr>1000 * 175573</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"153722867280912 minutes 55 seconds"</expr></argument>,
                     <argument><expr><call><name><name>DateUtils</name>.<name>formatElapsedTime</name></name><argument_list>(<argument><expr><name><name>Long</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDateTimeISO</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>timeZone</name> =<init> <expr><call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr>"GMT+1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cal</name>.<name>set</name></name><argument_list>(<argument><expr>2002</expr></argument>,<argument><expr>1</expr></argument>,<argument><expr>23</expr></argument>,<argument><expr>10</expr></argument>,<argument><expr>11</expr></argument>,<argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr><call><name><name>DateUtils</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>cal</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>DateUtils</name>.<name>ISO8601_DATETIME_PATTERN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2002-02-23T09:11:12"</expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDateISO</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>timeZone</name> =<init> <expr><call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr>"GMT"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cal</name>.<name>set</name></name><argument_list>(<argument><expr>2002</expr></argument>,<argument><expr>1</expr></argument>,<argument><expr>23</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr><call><name><name>DateUtils</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>cal</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>DateUtils</name>.<name>ISO8601_DATE_PATTERN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2002-02-23"</expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTimeISODate</name><parameter_list>()</parameter_list><block>{
        <comment type="line">// make sure that elapsed time in set via date works</comment>
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>timeZone</name> =<init> <expr><call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr>"GMT+1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cal</name>.<name>set</name></name><argument_list>(<argument><expr>2002</expr></argument>,<argument><expr>1</expr></argument>,<argument><expr>23</expr></argument>, <argument><expr>21</expr></argument>, <argument><expr>11</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr><call><name><name>DateUtils</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>cal</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>DateUtils</name>.<name>ISO8601_TIME_PATTERN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"20:11:12"</expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTimeISO</name><parameter_list>()</parameter_list><block>{
        <comment type="line">// make sure that elapsed time in ms works</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>ms</name> =<init> <expr>(20*3600 + 11*60 + 12)*1000</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr><call><name><name>DateUtils</name>.<name>format</name></name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
                <argument><expr><name><name>DateUtils</name>.<name>ISO8601_TIME_PATTERN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"20:11:12"</expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPhaseOfMoon</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>timeZone</name> =<init> <expr><call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr>"GMT"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// should be full moon</comment>
        <expr_stmt><expr><call><name><name>cal</name>.<name>set</name></name><argument_list>(<argument><expr>2002</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>27</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>DateUtils</name>.<name>getPhaseOfMoon</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// should be new moon</comment>
        <expr_stmt><expr><call><name><name>cal</name>.<name>set</name></name><argument_list>(<argument><expr>2002</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>DateUtils</name>.<name>getPhaseOfMoon</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
