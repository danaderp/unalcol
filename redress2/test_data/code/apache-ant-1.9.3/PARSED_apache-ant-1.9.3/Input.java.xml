<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Input.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>DefaultInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>GreedyInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>InputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>InputRequest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>MultipleChoiceInputRequest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>PropertyFileInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>SecureInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * Reads an input line from the console.
 *
 * @since Ant 1.5
 *
 * @ant.task category="control"
 */</comment>
<class><specifier>public</specifier> class <name>Input</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Represents an InputHandler.
     */</comment>
    <class><specifier>public</specifier> class <name>Handler</name> <super><extends>extends <name>DefBase</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>refid</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>HandlerType</name></type> <name>type</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>classname</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Specify that the handler is a reference on the project;
         * this allows the use of a custom inputhandler.
         * @param refid the String refid.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>String</name></type> <name>refid</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>refid</name></name> = <name>refid</name></expr>;</expr_stmt>
        }</block></function>
        <comment type="javadoc">/**
         * Get the refid of this Handler.
         * @return String refid.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getRefid</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>refid</name></expr>;</return>
        }</block></function>
        <comment type="javadoc">/**
         * Set the InputHandler classname.
         * @param classname the String classname.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassname</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>classname</name></name> = <name>classname</name></expr>;</expr_stmt>
        }</block></function>
        <comment type="javadoc">/**
         * Get the classname of the InputHandler.
         * @return String classname.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getClassname</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>classname</name></expr>;</return>
        }</block></function>
        <comment type="javadoc">/**
         * Set the handler type.
         * @param type a HandlerType.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>HandlerType</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        }</block></function>
        <comment type="javadoc">/**
         * Get the handler type.
         * @return a HandlerType object.
         */</comment>
        <function><type><specifier>public</specifier> <name>HandlerType</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>type</name></expr>;</return>
        }</block></function>
        <function><type><specifier>private</specifier> <name>InputHandler</name></type> <name>getInputHandler</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>type</name> != <name>null</name></expr>)</condition><then> <block>{
               <return>return <expr><call><name><name>type</name>.<name>getInputHandler</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>refid</name> != <name>null</name></expr>)</condition><then> <block>{
               <try>try <block>{
                   <return>return <expr><call>(<name>InputHandler</name>) <argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr><name>refid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
               }</block> <catch>catch (<param><decl><type><name>ClassCastException</name></type> <name>e</name></decl></param>) <block>{
                   <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                       <argument><expr><name>refid</name> + " does not denote an InputHandler"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
               }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>classname</name> != <name>null</name></expr>)</condition><then> <block>{
               <return>return <expr><call>(<name>InputHandler</name>) <argument_list>(<argument><expr><call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>,
                   <argument><expr><call><name>createLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>InputHandler</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Must specify refid, classname or type"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * EnumeratedAttribute representing the built-in input handler types:
     * "default", "propertyfile", "greedy", "secure" (since Ant 1.8).
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>HandlerType</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALUES</name> =<init> <expr><block>{ <expr>"default"</expr>, <expr>"propertyfile"</expr>, <expr>"greedy"</expr>, <expr>"secure"</expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>InputHandler</name><index>[]</index></type> <name>HANDLERS</name>
            =<init> <expr><block>{ <expr>new <call><name>DefaultInputHandler</name><argument_list>()</argument_list></call></expr>,
               <expr>new <call><name>PropertyFileInputHandler</name><argument_list>()</argument_list></call></expr>,
               <expr>new <call><name>GreedyInputHandler</name><argument_list>()</argument_list></call></expr>,
               <expr>new <call><name>SecureInputHandler</name><argument_list>()</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** {@inheritDoc} */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALUES</name></expr>;</return>
        }</block></function>
        <function><type><specifier>private</specifier> <name>InputHandler</name></type> <name>getInputHandler</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>HANDLERS</name><index>[<expr><call><name>getIndex</name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>validargs</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>addproperty</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>defaultvalue</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Handler</name></type> <name>handler</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>messageAttribute</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Defines valid input parameters as comma separated strings. If set, input
     * task will reject any input not defined as accepted and requires the user
     * to reenter it. Validargs are case sensitive. If you want 'a' and 'A' to
     * be accepted you need to define both values as accepted arguments.
     *
     * @param validargs A comma separated String defining valid input args.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValidargs</name> <parameter_list>(<param><decl><type><name>String</name></type> <name>validargs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>validargs</name></name> = <name>validargs</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Defines the name of a property to be created from input. Behaviour is
     * according to property task which means that existing properties
     * cannot be overridden.
     *
     * @param addproperty Name for the property to be created from input
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAddproperty</name> <parameter_list>(<param><decl><type><name>String</name></type> <name>addproperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>addproperty</name></name> = <name>addproperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the Message which gets displayed to the user during the build run.
     * @param message The message to be displayed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessage</name> <parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>message</name></name> = <name>message</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>messageAttribute</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Defines the default value of the property to be created from input.
     * Property value will be set to default if not input is received.
     *
     * @param defaultvalue Default value for the property if no input
     * is received
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultvalue</name> <parameter_list>(<param><decl><type><name>String</name></type> <name>defaultvalue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>defaultvalue</name></name> = <name>defaultvalue</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a multiline message.
     * @param msg The message to be displayed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>messageAttribute</name> &amp;&amp; "".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>msg</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>message</name> += <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * No arg constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>Input</name> <parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Actual method executed by ant.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name> <parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>addproperty</name> != <name>null</name>
            &amp;&amp; <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name>addproperty</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"skipping " + <call><name>getTaskName</name><argument_list>()</argument_list></call> + " as property " + <name>addproperty</name>
                + " has already been set."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>InputRequest</name></type> <name>request</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>validargs</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>accept</name> =<init> <expr><call><name><name>StringUtils</name>.<name>split</name></name><argument_list>(<argument><expr><name>validargs</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>request</name> = new <call><name>MultipleChoiceInputRequest</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>accept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>request</name> = new <call><name>InputRequest</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>request</name>.<name>setDefaultValue</name></name><argument_list>(<argument><expr><name>defaultvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InputHandler</name></type> <name>h</name> =<init> <expr><name>handler</name> == <name>null</name>
            ? <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getInputHandler</name><argument_list>()</argument_list></call>
            : <call><name><name>handler</name>.<name>getInputHandler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>h</name>.<name>handleInput</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name><name>request</name>.<name>getInput</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name>value</name> == <name>null</name> || <call><name><name>value</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> == 0)
            &amp;&amp; <name>defaultvalue</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = <name>defaultvalue</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>addproperty</name> != <name>null</name> &amp;&amp; <name>value</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>addproperty</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Create a nested handler element.
     * @return a Handler for this Input task.
     */</comment>
    <function><type><specifier>public</specifier> <name>Handler</name></type> <name>createHandler</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>handler</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Cannot define &gt; 1 nested input handler"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>handler</name> = new <call><name>Handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>handler</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
