<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\bzip2\BlockSortTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>bzip2</name></name>;</package>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertArrayEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>

<class><specifier>public</specifier> class <name>BlockSortTest</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>FIXTURE</name> =<init> <expr><block>{ <expr>0</expr>, <expr>1</expr>, <expr>(<name>byte</name>) 252</expr>, <expr>(<name>byte</name>) 253</expr>, <expr>(<name>byte</name>) 255</expr>,
                                            <expr>(<name>byte</name>) 254</expr>, <expr>3</expr>, <expr>2</expr>, <expr>(<name>byte</name>) 128</expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
      Burrows-Wheeler transform of fixture the manual way:

      * build the matrix

      0, 1, 252, 253, 255, 254, 3, 2, 128
      1, 252, 253, 255, 254, 3, 2, 128, 0
      252, 253, 255, 254, 3, 2, 128, 0, 1
      253, 255, 254, 3, 2, 128, 0, 1, 252
      255, 254, 3, 2, 128, 0, 1, 252, 253
      254, 3, 2, 128, 0, 1, 252, 253, 255
      3, 2, 128, 0, 1, 252, 253, 255, 254
      2, 128, 0, 1, 252, 253, 255, 254, 3
      128, 0, 1, 252, 253, 255, 254, 3, 2

      * sort it

      0, 1, 252, 253, 255, 254, 3, 2, 128
      1, 252, 253, 255, 254, 3, 2, 128, 0
      2, 128, 0, 1, 252, 253, 255, 254, 3
      3, 2, 128, 0, 1, 252, 253, 255, 254
      128, 0, 1, 252, 253, 255, 254, 3, 2
      252, 253, 255, 254, 3, 2, 128, 0, 1
      253, 255, 254, 3, 2, 128, 0, 1, 252
      254, 3, 2, 128, 0, 1, 252, 253, 255
      255, 254, 3, 2, 128, 0, 1, 252, 253

      * grab last column

      128, 0, 3, 254, 2, 1, 252, 255, 253

        and the original line has been 0
    */</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>FIXTURE_BWT</name> =<init> <expr><block>{ <expr>(<name>byte</name>) 128</expr>, <expr>0</expr>, <expr>3</expr>, <expr>(<name>byte</name>) 254</expr>, <expr>2</expr>, <expr>1</expr>, 
                                                <expr>(<name>byte</name>) 252</expr>, <expr>(<name>byte</name>) 255</expr>, <expr>(<name>byte</name>) 253</expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name><index>[]</index></type> <name>FIXTURE_SORTED</name> =<init> <expr><block>{
        <expr>0</expr>, <expr>1</expr>, <expr>7</expr>, <expr>6</expr>, <expr>8</expr>, <expr>2</expr>, <expr>3</expr>, <expr>5</expr>, <expr>4</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>FIXTURE2</name> =<init> <expr><block>{ 
        <expr>'C'</expr>, <expr>'o'</expr>, <expr>'m'</expr>, <expr>'m'</expr>, <expr>'o'</expr>, <expr>'n'</expr>, <expr>'s'</expr>, <expr>' '</expr>, <expr>'C'</expr>, <expr>'o'</expr>, <expr>'m'</expr>, <expr>'p'</expr>, <expr>'r'</expr>, <expr>'e'</expr>, <expr>'s'</expr>, <expr>'s'</expr>, 
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>FIXTURE2_BWT</name> =<init> <expr><block>{
        <expr>'s'</expr>, <expr>'s'</expr>, <expr>' '</expr>, <expr>'r'</expr>, <expr>'o'</expr>, <expr>'m'</expr>, <expr>'o'</expr>, <expr>'o'</expr>, <expr>'C'</expr>, <expr>'C'</expr>, <expr>'m'</expr>, <expr>'m'</expr>, <expr>'p'</expr>, <expr>'n'</expr>, <expr>'s'</expr>, <expr>'e'</expr>, 
    }</block></expr></init></decl>;</decl_stmt>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSortFixture</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DS</name></type> <name>ds</name> =<init> <expr><call><name>setUpFixture</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>s</name>.<name>blockSort</name></name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>FIXTURE</name>.<name>length</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFixtureSorted</name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>ds</name>.<name>data</name>.<name>origPtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSortFixtureMainSort</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DS</name></type> <name>ds</name> =<init> <expr><call><name>setUpFixture</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>s</name>.<name>mainSort</name></name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>FIXTURE</name>.<name>length</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFixtureSorted</name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSortFixtureFallbackSort</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DS</name></type> <name>ds</name> =<init> <expr><call><name>setUpFixture</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>s</name>.<name>fallbackSort</name></name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>FIXTURE</name>.<name>length</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFixtureSorted</name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSortFixture2</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DS</name></type> <name>ds</name> =<init> <expr><call><name>setUpFixture2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>s</name>.<name>blockSort</name></name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>FIXTURE2</name>.<name>length</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFixture2Sorted</name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>ds</name>.<name>data</name>.<name>origPtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSortFixture2MainSort</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DS</name></type> <name>ds</name> =<init> <expr><call><name>setUpFixture2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>s</name>.<name>mainSort</name></name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>FIXTURE2</name>.<name>length</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFixture2Sorted</name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSortFixture2FallbackSort</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DS</name></type> <name>ds</name> =<init> <expr><call><name>setUpFixture2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>s</name>.<name>fallbackSort</name></name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>FIXTURE2</name>.<name>length</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFixture2Sorted</name><argument_list>(<argument><expr><name><name>ds</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testFallbackSort</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>CBZip2OutputStream</name>.<name>Data</name></name></type> <name>data</name> =<init> <expr>new <call><name><name>CBZip2OutputStream</name>.<name>Data</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BlockSort</name></type> <name>s</name> =<init> <expr>new <call><name>BlockSort</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>fmap</name> =<init> <expr>new <name><name>int</name><index>[<expr><name><name>FIXTURE</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>fallbackSort</name></name><argument_list>(<argument><expr><name>fmap</name></expr></argument>, <argument><expr><name>FIXTURE</name></expr></argument>, <argument><expr><name><name>FIXTURE</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>FIXTURE_SORTED</name></expr></argument>, <argument><expr><name>fmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>DS</name></type> <name>setUpFixture</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>setUpFixture</name><argument_list>(<argument><expr><name>FIXTURE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertFixtureSorted</name><parameter_list>(<param><decl><type><name><name>CBZip2OutputStream</name>.<name>Data</name></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFixtureSorted</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIXTURE</name></expr></argument>, <argument><expr><name>FIXTURE_BWT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>DS</name></type> <name>setUpFixture2</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>setUpFixture</name><argument_list>(<argument><expr><name>FIXTURE2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertFixture2Sorted</name><parameter_list>(<param><decl><type><name><name>CBZip2OutputStream</name>.<name>Data</name></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFixtureSorted</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIXTURE2</name></expr></argument>, <argument><expr><name>FIXTURE2_BWT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>DS</name></type> <name>setUpFixture</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fixture</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>CBZip2OutputStream</name>.<name>Data</name></name></type> <name>data</name> =<init> <expr>new <call><name><name>CBZip2OutputStream</name>.<name>Data</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>fixture</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>data</name>.<name>block</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>fixture</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>DS</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>new <call><name>BlockSort</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertFixtureSorted</name><parameter_list>(<param><decl><type><name><name>CBZip2OutputStream</name>.<name>Data</name></name></type> <name>data</name></decl></param>,
                                     <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fixture</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fixtureBwt</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>fixture</name><index>[<expr><name><name>fixture</name>.<name>length</name></name> - 1</expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name>.<name>block</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>fixture</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>fixtureBwt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name>.<name>block</name><index>[<expr><name><name>data</name>.<name>fmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>DS</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>CBZip2OutputStream</name>.<name>Data</name></name></type> <name>data</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BlockSort</name></type> <name>s</name></decl>;</decl_stmt>
        <constructor><name>DS</name><parameter_list>(<param><decl><type><name><name>CBZip2OutputStream</name>.<name>Data</name></name></type> <name>data</name></decl></param>, <param><decl><type><name>BlockSort</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
}</block></class>
</unit>
