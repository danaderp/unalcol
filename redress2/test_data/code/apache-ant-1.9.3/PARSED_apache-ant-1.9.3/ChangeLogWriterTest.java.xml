<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\cvslib\ChangeLogWriterTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>cvslib</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JAXPUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>XMLReader</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>InputSource</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>ContentHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>Locator</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>Attributes</name></name>;</import>

<comment type="javadoc">/**
 *  Test for the cvslib ChangeLogWriter
 */</comment>
<class><specifier>public</specifier> class <name>ChangeLogWriterTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>ChangeLogWriter</name></type> <name>writer</name> =<init> <expr>new <call><name>ChangeLogWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonUTF8Characters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>CVSEntry</name></type> <name>entry</name> =<init> <expr>new <call><name>CVSEntry</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Se\u00f1orita"</expr></argument>, <argument><expr>"2003 &lt; 2004 &amp;&amp; 3 &gt; 5"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entry</name>.<name>addFile</name></name><argument_list>(<argument><expr>"Medicare &amp; review.doc"</expr></argument>, <argument><expr>"1.1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name>.<name>addFile</name></name><argument_list>(<argument><expr>"El\u00e8ments de style"</expr></argument>, <argument><expr>"1.2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CVSEntry</name><index>[]</index></type> <name>entries</name> =<init> <expr><block>{ <expr><name>entry</name></expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>output</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>pwriter</name> =<init> <expr>new <call><name>PrintWriter</name><argument_list>(<argument><expr>new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>writer</name>.<name>printChangeLog</name></name><argument_list>(<argument><expr><name>pwriter</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// make sure that the parsing does not break</comment>
        <decl_stmt><decl><type><name>XMLReader</name></type> <name>xmlReader</name> =<init> <expr><call><name><name>JAXPUtils</name>.<name>getXMLReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>input</name> =<init> <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>output</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>xmlReader</name>.<name>setContentHandler</name></name><argument_list>(<argument><expr>new <call><name>NullContentHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xmlReader</name>.<name>parse</name></name><argument_list>(<argument><expr>new <call><name>InputSource</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NullContentHandler</name> <super><implements>implements <name>ContentHandler</name></implements></super> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>endDocument</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>startDocument</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>characters</name><parameter_list>(<param><decl><type><name>char</name></type> <name><name>ch</name><index>[]</index></name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>debug</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>ignorableWhitespace</name><parameter_list>(<param><decl><type><name>char</name></type> <name><name>ch</name><index>[]</index></name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>endPrefixMapping</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>skippedEntity</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDocumentLocator</name><parameter_list>(<param><decl><type><name>Locator</name></type> <name>locator</name></decl></param>)</parameter_list> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>processingInstruction</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>startPrefixMapping</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>, <param><decl><type><name>String</name></type> <name>uri</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>endElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>namespaceURI</name></decl></param>, <param><decl><type><name>String</name></type> <name>localName</name></decl></param>, <param><decl><type><name>String</name></type> <name>qName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>startElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>namespaceURI</name></decl></param>, <param><decl><type><name>String</name></type> <name>localName</name></decl></param>, <param><decl><type><name>String</name></type> <name>qName</name></decl></param>, <param><decl><type><name>Attributes</name></type> <name>atts</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        }</block></function>
    }</block></class>
}</block></class>
</unit>
