<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\TarFileSet.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * A TarFileSet is a FileSet with extra attributes useful in the context of
 * Tar/Jar tasks.
 *
 * A TarFileSet extends FileSets with the ability to extract a subset of the
 * entries of a Tar file for inclusion in another Tar file.  It also includes
 * a prefix attribute which is prepended to each entry in the output Tar file.
 *
 */</comment>
<class><specifier>public</specifier> class <name>TarFileSet</name> <super><extends>extends <name>ArchiveFileSet</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>userNameSet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>groupNameSet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>userIdSet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>groupIdSet</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>userName</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>groupName</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>    <name>uid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>    <name>gid</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for TarFileSet */</comment>
    <constructor><specifier>public</specifier> <name>TarFileSet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor using a fileset argument.
     * @param fileset the fileset to use
     */</comment>
    <constructor><specifier>protected</specifier> <name>TarFileSet</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fileset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor using a tarfileset argument.
     * @param fileset the tarfileset to use
     */</comment>
    <constructor><specifier>protected</specifier> <name>TarFileSet</name><parameter_list>(<param><decl><type><name>TarFileSet</name></type> <name>fileset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * The username for the tar entry
     * This is not the same as the UID.
     * @param userName the user name for the tar entry.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUserName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkTarFileSetAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>userNameSet</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>userName</name></name> = <name>userName</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the user name for the tar entry
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUserName</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>TarFileSet</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getUserName</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>userName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return whether the user name has been explicitly set.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasUserNameBeenSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>userNameSet</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The uid for the tar entry
     * This is not the same as the User name.
     * @param uid the id of the user for the tar entry.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUid</name><parameter_list>(<param><decl><type><name>int</name></type> <name>uid</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkTarFileSetAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>userIdSet</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>uid</name></name> = <name>uid</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the uid for the tar entry
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getUid</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>TarFileSet</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getUid</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>uid</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return whether the user id has been explicitly set.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasUserIdBeenSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>userIdSet</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The groupname for the tar entry; optional, default=""
     * This is not the same as the GID.
     * @param groupName the group name string.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGroup</name><parameter_list>(<param><decl><type><name>String</name></type> <name>groupName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkTarFileSetAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>groupNameSet</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>groupName</name></name> = <name>groupName</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the group name string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getGroup</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>TarFileSet</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getGroup</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>groupName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return whether the group name has been explicitly set.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasGroupBeenSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>groupNameSet</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The GID for the tar entry; optional, default="0"
     * This is not the same as the group name.
     * @param gid the group id.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGid</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gid</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkTarFileSetAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>groupIdSet</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gid</name></name> = <name>gid</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the group identifier.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getGid</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>TarFileSet</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getGid</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>gid</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return whether the group id has been explicitly set.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasGroupIdBeenSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>groupIdSet</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a new scanner.
     * @return the created scanner.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ArchiveScanner</name></type> <name>newArchiveScanner</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>TarScanner</name></type> <name>zs</name> =<init> <expr>new <call><name>TarScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>zs</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Makes this instance in effect a reference to another instance.
     *
     * &lt;p&gt;You must not set another attribute or nest elements inside
     * this element if you make it a reference.&lt;/p&gt;
     * @param r the &lt;code&gt;Reference&lt;/code&gt; to use.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>userNameSet</name> || <name>userIdSet</name> || <name>groupNameSet</name> || <name>groupIdSet</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A TarFileset accepts another TarFileSet or a FileSet as reference
     * FileSets are often used by the war task for the lib attribute
     * @param p the project to use
     * @return the abstract fileset instance
     */</comment>
    <function><type><specifier>protected</specifier> <name>AbstractFileSet</name></type> <name>getRef</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getRefid</name><argument_list>()</argument_list></call>.<call><name>getReferencedObject</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>TarFileSet</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>AbstractFileSet</name>) <name>o</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>FileSet</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TarFileSet</name></type> <name>zfs</name> =<init> <expr>new <call><name>TarFileSet</name><argument_list>(<argument><expr>(<name>FileSet</name>) <name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>configureFileSet</name><argument_list>(<argument><expr><name>zfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>zfs</name></expr>;</return>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr><call><name>getRefid</name><argument_list>()</argument_list></call>.<call><name>getRefId</name><argument_list>()</argument_list></call> + " doesn\'t denote a tarfileset or a fileset"</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Configure a fileset based on this fileset.
     * If the fileset is a TarFileSet copy in the tarfileset
     * specific attributes.
     * @param zfs the archive fileset to configure.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>configureFileSet</name><parameter_list>(<param><decl><type><name>ArchiveFileSet</name></type> <name>zfs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>configureFileSet</name></name><argument_list>(<argument><expr><name>zfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>zfs</name> <name>instanceof</name> <name>TarFileSet</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TarFileSet</name></type> <name>tfs</name> =<init> <expr>(<name>TarFileSet</name>) <name>zfs</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tfs</name>.<name>setUserName</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tfs</name>.<name>setGroup</name></name><argument_list>(<argument><expr><name>groupName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tfs</name>.<name>setUid</name></name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tfs</name>.<name>setGid</name></name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Return a TarFileSet that has the same properties
     * as this one.
     * @return the cloned tarFileSet
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>TarFileSet</name>) <call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * A check attributes for TarFileSet.
     * If there is a reference, and
     * it is a TarFileSet, the tar fileset attributes
     * cannot be used.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkTarFileSetAttributesAllowed</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> == <name>null</name>
            || (<call><name>isReference</name><argument_list>()</argument_list></call>
                &amp;&amp; (<call><name>getRefid</name><argument_list>()</argument_list></call>.<call><name>getReferencedObject</name><argument_list>(
                        <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <name>instanceof</name> <name>TarFileSet</name>))</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>checkAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
