<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\zip\NioZipEncoding.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>CharBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>Charset</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CharsetEncoder</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CoderResult</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CodingErrorAction</name></name>;</import>

<comment type="javadoc">/**
 * A ZipEncoding, which uses a java.nio {@link
 * java.nio.charset.Charset Charset} to encode names.
 *
 * &lt;p&gt;This implementation works for all cases under java-1.5 or
 * later. However, in java-1.4, some charsets don't have a java.nio
 * implementation, most notably the default ZIP encoding Cp437.&lt;/p&gt;
 * 
 * &lt;p&gt;The methods of this class are reentrant.&lt;/p&gt;
 */</comment>
<class>class <name>NioZipEncoding</name> <super><implements>implements <name>ZipEncoding</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct an NIO based zip encoding, which wraps the given
     * charset.
     * 
     * @param charset The NIO charset to wrap.
     */</comment>
    <constructor><specifier>public</specifier> <name>NioZipEncoding</name><parameter_list>(<param><decl><type><name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>charset</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @see
     * org.apache.tools.zip.ZipEncoding#canEncode(java.lang.String)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canEncode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CharsetEncoder</name></type> <name>enc</name> =<init> <expr><call><name><name>this</name>.<name>charset</name>.<name>newEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>enc</name>.<name>onMalformedInput</name></name><argument_list>(<argument><expr><name><name>CodingErrorAction</name>.<name>REPORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>enc</name>.<name>onUnmappableCharacter</name></name><argument_list>(<argument><expr><name><name>CodingErrorAction</name>.<name>REPORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>enc</name>.<name>canEncode</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see
     * org.apache.tools.zip.ZipEncoding#encode(java.lang.String)
     */</comment>
    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CharsetEncoder</name></type> <name>enc</name> =<init> <expr><call><name><name>this</name>.<name>charset</name>.<name>newEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>enc</name>.<name>onMalformedInput</name></name><argument_list>(<argument><expr><name><name>CodingErrorAction</name>.<name>REPORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>enc</name>.<name>onUnmappableCharacter</name></name><argument_list>(<argument><expr><name><name>CodingErrorAction</name>.<name>REPORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CharBuffer</name></type> <name>cb</name> =<init> <expr><call><name><name>CharBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>out</name> =<init> <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call>
                                             + (<call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> + 1) / 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>cb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>CoderResult</name></type> <name>res</name> =<init> <expr><call><name><name>enc</name>.<name>encode</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>out</name></expr></argument>,<argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>res</name>.<name>isUnmappable</name></name><argument_list>()</argument_list></call> || <call><name><name>res</name>.<name>isMalformed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

                <comment type="line">// write the unmappable characters in utf-16</comment>
                <comment type="line">// pseudo-URL encoding style to ByteBuffer.</comment>
                <if>if <condition>(<expr><call><name><name>res</name>.<name>length</name></name><argument_list>()</argument_list></call> * 6 &gt; <call><name><name>out</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>out</name> = <call><name><name>ZipEncodingHelper</name>.<name>growBuffer</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name><name>out</name>.<name>position</name></name><argument_list>()</argument_list></call>
                                                       + <call><name><name>res</name>.<name>length</name></name><argument_list>()</argument_list></call> * 6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>res</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
                    <expr_stmt><expr><call><name><name>ZipEncodingHelper</name>.<name>appendSurrogate</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><call><name><name>cb</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>

            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>res</name>.<name>isOverflow</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

                <expr_stmt><expr><name>out</name> = <call><name><name>ZipEncodingHelper</name>.<name>growBuffer</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>res</name>.<name>isUnderflow</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

                <expr_stmt><expr><call><name><name>enc</name>.<name>flush</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            }</block></then></if></else></if></else></if>
        }</block></while>

        <expr_stmt><expr><call><name><name>out</name>.<name>limit</name></name><argument_list>(<argument><expr><call><name><name>out</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>rewind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see
     * org.apache.tools.zip.ZipEncoding#decode(byte[])
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>this</name>.<name>charset</name>.<name>newDecoder</name></name><argument_list>()</argument_list></call>
            .<call><name>onMalformedInput</name><argument_list>(<argument><expr><name><name>CodingErrorAction</name>.<name>REPORT</name></name></expr></argument>)</argument_list></call>
            .<call><name>onUnmappableCharacter</name><argument_list>(<argument><expr><name><name>CodingErrorAction</name>.<name>REPORT</name></name></expr></argument>)</argument_list></call>
            .<call><name>decode</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
