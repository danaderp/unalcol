<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\tar\TarRoundTripTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<class><specifier>public</specifier> class <name>TarRoundTripTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LONG_NAME</name>
        =<init> <expr>"this/path/name/contains/more/than/one/hundred/characters/in/order/"
            + "to/test/the/GNU/long/file/name/capability/round/tripped"</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TarRoundTripTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * test round-tripping long (GNU) entries
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLongRoundTrippingGNU</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testLongRoundTripping</name><argument_list>(<argument><expr><name><name>TarOutputStream</name>.<name>LONGFILE_GNU</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test round-tripping long (POSIX) entries
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLongRoundTrippingPOSIX</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testLongRoundTripping</name><argument_list>(<argument><expr><name><name>TarOutputStream</name>.<name>LONGFILE_POSIX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testLongRoundTripping</name><parameter_list>(<param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>TarEntry</name></type> <name>original</name> =<init> <expr>new <call><name>TarEntry</name><argument_list>(<argument><expr><name>LONG_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"over 100 chars"</expr></argument>, <argument><expr><call><name><name>LONG_NAME</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"original name"</expr></argument>, <argument><expr><name>LONG_NAME</name></expr></argument>, <argument><expr><call><name><name>original</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>buff</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TarOutputStream</name></type> <name>tos</name> =<init> <expr>new <call><name>TarOutputStream</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tos</name>.<name>setLongFileMode</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tos</name>.<name>putNextEntry</name></name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tos</name>.<name>closeEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TarInputStream</name></type> <name>tis</name>
            =<init> <expr>new <call><name>TarInputStream</name><argument_list>(<argument><expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>buff</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TarEntry</name></type> <name>tripped</name> =<init> <expr><call><name><name>tis</name>.<name>getNextEntry</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"round-tripped name"</expr></argument>, <argument><expr><name>LONG_NAME</name></expr></argument>, <argument><expr><call><name><name>tripped</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"no more entries"</expr></argument>, <argument><expr><call><name><name>tis</name>.<name>getNextEntry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>


</unit>
