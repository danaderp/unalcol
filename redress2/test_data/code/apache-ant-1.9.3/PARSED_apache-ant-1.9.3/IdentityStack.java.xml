<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\IdentityStack.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Stack</name></name>;</import>

<comment type="javadoc">/**
 * Identity Stack.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name><name>IdentityStack</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Stack</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5555522620060077046L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get an IdentityStack containing the contents of the specified Stack.
     * @param s the Stack to copy; ignored if null.
     * @return an IdentityStack instance.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list> <name><name>IdentityStack</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>getInstance</name><parameter_list>(<param><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>s</name> <name>instanceof</name> <name>IdentityStack</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name><name>IdentityStack</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name>) <name>s</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>IdentityStack</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>result</name> =<init> <expr>new <call><name><name>IdentityStack</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>IdentityStack</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new IdentityStack with the specified Object
     * as the bottom element.
     * @param o the bottom element.
     */</comment>
    <constructor><specifier>public</specifier> <name>IdentityStack</name><parameter_list>(<param><decl><type><name>E</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>push</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Override methods that use &lt;code&gt;.equals()&lt;/code&gt; comparisons on elements.
     * @param o the Object to search for.
     * @return true if the stack contains the object.
     * @see java.util.Vector#contains(Object)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>indexOf</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Override methods that use &lt;code&gt;.equals()&lt;/code&gt; comparisons on elements.
     * @param o   the Object to search for.
     * @param pos the position from which to search.
     * @return the position of the object, -1 if not found.
     * @see java.util.Vector#indexOf(Object, int)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>indexOf</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>pos</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>o</name></expr>)</condition><then> <block>{
                <return>return <expr><name>i</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>-1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Override methods that use &lt;code&gt;.equals()&lt;/code&gt; comparisons on elements.
     * @param o   the Object to search for.
     * @param pos the position from which to search (backward).
     * @return the position of the object, -1 if not found.
     * @see java.util.Vector#indexOf(Object, int)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>lastIndexOf</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>pos</name></expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>o</name></expr>)</condition><then> <block>{
                <return>return <expr><name>i</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>-1</expr>;</return>
    }</block></function>

}</block></class>
</unit>
