<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\optional\image\Scale.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>

<import>import <name><name>javax</name>.<name>media</name>.<name>jai</name>.<name>JAI</name></name>;</import>
<import>import <name><name>javax</name>.<name>media</name>.<name>jai</name>.<name>PlanarImage</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>renderable</name>.<name>ParameterBlock</name></name>;</import>

<comment type="javadoc">/**
 *
 * @see org.apache.tools.ant.taskdefs.optional.image.Image
 */</comment>
<class><specifier>public</specifier> class <name>Scale</name> <super><extends>extends <name>TransformOperation</name></extends> <implements>implements <name>DrawOperation</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HUNDRED</name> =<init> <expr>100</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>widthStr</name> =<init> <expr>"100%"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>heightStr</name> =<init> <expr>"100%"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>xPercent</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>yPercent</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>proportions</name> =<init> <expr>"ignore"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Enumerated class for proportions attribute. */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ProportionsAttribute</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/** {@inheritDoc}. */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"ignore"</expr>, <expr>"width"</expr>, <expr>"height"</expr>, <expr>"cover"</expr>, <expr>"fit"</expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     *  Sets the behaviour regarding the image proportions.
     * @param pa the enumerated value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProportions</name><parameter_list>(<param><decl><type><name>ProportionsAttribute</name></type> <name>pa</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>proportions</name> = <call><name><name>pa</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the width of the image, either as an integer or a %.
     * Defaults to 100%.
     * @param width the value to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWidth</name><parameter_list>(<param><decl><type><name>String</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>widthStr</name> = <name>width</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Sets the height of the image, either as an integer or a %.  Defaults to 100%.
     * @param height the value to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHeight</name><parameter_list>(<param><decl><type><name>String</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>heightStr</name> = <name>height</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the width.
     * @return the value converted from the width string.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>width</name> =<init> <expr>0.0F</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>percIndex</name> =<init> <expr><call><name><name>widthStr</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'%'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>percIndex</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>width</name> = <call><name><name>Float</name>.<name>parseFloat</name></name><argument_list>(<argument><expr><call><name><name>widthStr</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>percIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xPercent</name> = true</expr>;</expr_stmt>
            <return>return <expr><name>width</name> / <name>HUNDRED</name></expr>;</return>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>xPercent</name> = false</expr>;</expr_stmt>
            <return>return <expr><call><name><name>Float</name>.<name>parseFloat</name></name><argument_list>(<argument><expr><name>widthStr</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the height.
     * @return the value converted from the height string.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>percIndex</name> =<init> <expr><call><name><name>heightStr</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'%'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>percIndex</name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>height</name> =<init> <expr><call><name><name>Float</name>.<name>parseFloat</name></name><argument_list>(<argument><expr><call><name><name>heightStr</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>percIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>yPercent</name> = true</expr>;</expr_stmt>
            <return>return <expr><name>height</name> / <name>HUNDRED</name></expr>;</return>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>yPercent</name> = false</expr>;</expr_stmt>
            <return>return <expr><call><name><name>Float</name>.<name>parseFloat</name></name><argument_list>(<argument><expr><name>heightStr</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Scale an image.
     * @param image the image to scale.
     * @return the scaled image.
     */</comment>
    <function><type><specifier>public</specifier> <name>PlanarImage</name></type> <name>performScale</name><parameter_list>(<param><decl><type><name>PlanarImage</name></type> <name>image</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ParameterBlock</name></type> <name>pb</name> =<init> <expr>new <call><name>ParameterBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pb</name>.<name>addSource</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>xFl</name> =<init> <expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>yFl</name> =<init> <expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name>xPercent</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xFl</name> = (<name>xFl</name> / <call><name><name>image</name>.<name>getWidth</name></name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>yPercent</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>yFl</name> = (<name>yFl</name> / <call><name><name>image</name>.<name>getHeight</name></name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>"width".<call><name>equals</name><argument_list>(<argument><expr><name>proportions</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>yFl</name> = <name>xFl</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>"height".<call><name>equals</name><argument_list>(<argument><expr><name>proportions</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xFl</name> = <name>yFl</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>"fit".<call><name>equals</name><argument_list>(<argument><expr><name>proportions</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>yFl</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xFl</name></expr></argument>, <argument><expr><name>yFl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xFl</name> = <name>yFl</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>"cover".<call><name>equals</name><argument_list>(<argument><expr><name>proportions</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>yFl</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>xFl</name></expr></argument>, <argument><expr><name>yFl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xFl</name> = <name>yFl</name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if>

        <expr_stmt><expr><call><name><name>pb</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>Float</name><argument_list>(<argument><expr><name>xFl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pb</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>Float</name><argument_list>(<argument><expr><name>yFl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"\tScaling to " + (<name>xFl</name> * <name>HUNDRED</name>) + "% x "
            + (<name>yFl</name> * <name>HUNDRED</name>) + "%"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>JAI</name>.<name>create</name></name><argument_list>(<argument><expr>"scale"</expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>PlanarImage</name></type> <name>executeTransformOperation</name><parameter_list>(<param><decl><type><name>PlanarImage</name></type> <name>image</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>bi</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>instructions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ImageOperation</name></type> <name>instr</name> =<init> <expr>((<name>ImageOperation</name>) <call><name><name>instructions</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>instr</name> <name>instanceof</name> <name>DrawOperation</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>performScale</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><name>instr</name> <name>instanceof</name> <name>TransformOperation</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>bi</name> = <call><name><name>image</name>.<name>getAsBufferedImage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>image</name> = ((<name>TransformOperation</name>) <name>instr</name>)
                    .<call><name>executeTransformOperation</name><argument_list>(<argument><expr><call><name><name>PlanarImage</name>.<name>wrapRenderedImage</name></name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>bi</name> = <call><name><name>image</name>.<name>getAsBufferedImage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>
        <return>return <expr><call><name>performScale</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>PlanarImage</name></type> <name>executeDrawOperation</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>instructions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ImageOperation</name></type> <name>instr</name> =<init> <expr>((<name>ImageOperation</name>) <call><name><name>instructions</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>instr</name> <name>instanceof</name> <name>DrawOperation</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>PlanarImage</name></type> <name>image</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <comment type="line">// If this TransformOperation has DrawOperation children</comment>
                <comment type="line">// then Rotate the first child and return.</comment>
                <expr_stmt><expr><call><name>performScale</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>image</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
