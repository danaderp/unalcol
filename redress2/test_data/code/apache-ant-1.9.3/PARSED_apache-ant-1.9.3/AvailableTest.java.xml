<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\AvailableTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 * JUnit test for the Available task/condition.
 */</comment>
<class><specifier>public</specifier> class <name>AvailableTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>AvailableTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/available.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Nothing specified -&gt; Fail</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test1"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Only property specified -&gt; Fail</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test2"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Only file specified -&gt; Fail</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test3"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// file doesn't exist -&gt; property 'test' == null</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test4</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call> == <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// file does exist -&gt; property 'test' == 'true'</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test5</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// resource doesn't exist -&gt; property 'test' == null</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test6</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test6"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call> == <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// resource does exist -&gt; property 'test' == 'true'</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test7</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test7"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// class doesn't exist -&gt; property 'test' == null</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test8</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call> == <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// class does exist -&gt; property 'test' == 'true'</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test9</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test9"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// All three specified and all three exist -&gt; true</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test10</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test10"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// All three specified but class missing -&gt; null</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test11</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test11"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Specified property-name is "" -&gt; true</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test12</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test12"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Specified file is "" -&gt; invalid files do not exist</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test13</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test13"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Specified file is "" actually a directory, so it should pass</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test13b</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test13b"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Specified resource is "" -&gt; can such a thing exist?</comment>
    <comment type="block">/*
     * returns non null IBM JDK 1.3 Linux
     */</comment>
<comment type="line">//    public void test14() {</comment>
<comment type="line">//        executeTarget("test14");</comment>
<comment type="line">//        assertEquals(project.getProperty("test"), null);</comment>
<comment type="line">//    }</comment>

    <comment type="line">// Specified class is "" -&gt; can not exist</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test15</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test15"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Specified dir is "" -&gt; this is the current directory and should</comment>
    <comment type="line">// always exist</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test16</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test16"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Specified dir is "../taskdefs" -&gt; should exist since it's the</comment>
    <comment type="line">// location of the buildfile used...</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test17</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test17"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Specified dir is "../this_dir_should_never_exist" -&gt; null</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test18</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test18"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Invalid type specified</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test19</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test19"</expr></argument>, <argument><expr>"Invalid value for type attribute."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Core class that exists in system classpath is ignored</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test20</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test20"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Core class that exists in system classpath is ignored, but found in specified classpath</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test21</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test21"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Core class that exists in system classpath is not ignored with ignoresystemclass="false"</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test22</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test22"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Core class that exists in system classpath is not ignored with default ignoresystemclasses value</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test23</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test23"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Class is found in specified classpath</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test24</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test24"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// File is not found in specified filepath</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSearchInPathNotThere</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"searchInPathNotThere"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// File is not found in specified filepath</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSearchInPathIsThere</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"searchInPathIsThere"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// test when file begins with basedir twice</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDoubleBasedir</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDoubleBasedir"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// test for searching parents</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSearchParents</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"search-parents"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="line">// test for not searching parents</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSearchParentsNot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"search-parents-not"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
