<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\DefaultExcludesTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>DefaultExcludesTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>DefaultExcludesTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/defaultexcludes.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Output the default excludes</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>expected</name> =<init> <expr><block>{
                          <expr>"**/*~"</expr>,
                          <expr>"**/#*#"</expr>,
                          <expr>"**/.#*"</expr>,
                          <expr>"**/%*%"</expr>,
                          <expr>"**/._*"</expr>,
                          <expr>"**/CVS"</expr>,
                          <expr>"**/CVS/**"</expr>,
                          <expr>"**/.cvsignore"</expr>,
                          <expr>"**/SCCS"</expr>,
                          <expr>"**/SCCS/**"</expr>,
                          <expr>"**/vssver.scc"</expr>,
                          <expr>"**/.svn"</expr>,
                          <expr>"**/.svn/**"</expr>,
                          <expr>"**/.git"</expr>,
                          <expr>"**/.git/**"</expr>,
                          <expr>"**/.gitattributes"</expr>,
                          <expr>"**/.gitignore"</expr>,
                          <expr>"**/.gitmodules"</expr>,
                          <expr>"**/.hg"</expr>,
                          <expr>"**/.hg/**"</expr>,
                          <expr>"**/.hgignore"</expr>,
                          <expr>"**/.hgsub"</expr>,
                          <expr>"**/.hgsubstate"</expr>,
                          <expr>"**/.hgtags"</expr>,
                          <expr>"**/.bzr"</expr>,
                          <expr>"**/.bzr/**"</expr>,
                          <expr>"**/.bzrignore"</expr>,
                          <expr>"**/.DS_Store"</expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr>"test1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"current default excludes"</expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>DirectoryScanner</name>.<name>getDefaultExcludes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// adding something to the excludes'</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>expected</name> =<init> <expr><block>{
                          <expr>"**/*~"</expr>,
                          <expr>"**/#*#"</expr>,
                          <expr>"**/.#*"</expr>,
                          <expr>"**/%*%"</expr>,
                          <expr>"**/._*"</expr>,
                          <expr>"**/CVS"</expr>,
                          <expr>"**/CVS/**"</expr>,
                          <expr>"**/.cvsignore"</expr>,
                          <expr>"**/SCCS"</expr>,
                          <expr>"**/SCCS/**"</expr>,
                          <expr>"**/vssver.scc"</expr>,
                          <expr>"**/.svn"</expr>,
                          <expr>"**/.svn/**"</expr>,
                          <expr>"**/.git"</expr>,
                          <expr>"**/.git/**"</expr>,
                          <expr>"**/.gitattributes"</expr>,
                          <expr>"**/.gitignore"</expr>,
                          <expr>"**/.gitmodules"</expr>,
                          <expr>"**/.hg"</expr>,
                          <expr>"**/.hg/**"</expr>,
                          <expr>"**/.hgignore"</expr>,
                          <expr>"**/.hgsub"</expr>,
                          <expr>"**/.hgsubstate"</expr>,
                          <expr>"**/.hgtags"</expr>,
                          <expr>"**/.bzr"</expr>,
                          <expr>"**/.bzr/**"</expr>,
                          <expr>"**/.bzrignore"</expr>,
                          <expr>"**/.DS_Store"</expr>,
                          <expr>"foo"</expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr>"test2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"current default excludes"</expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>DirectoryScanner</name>.<name>getDefaultExcludes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// removing something from the defaults</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>expected</name> =<init> <expr><block>{
                          <expr>"**/*~"</expr>,
                          <expr>"**/#*#"</expr>,
                          <expr>"**/.#*"</expr>,
                          <expr>"**/%*%"</expr>,
                          <expr>"**/._*"</expr>,
                          <comment type="line">//CVS missing</comment>
                          <expr>"**/CVS/**"</expr>,
                          <expr>"**/.cvsignore"</expr>,
                          <expr>"**/SCCS"</expr>,
                          <expr>"**/SCCS/**"</expr>,
                          <expr>"**/vssver.scc"</expr>,
                          <expr>"**/.svn"</expr>,
                          <expr>"**/.svn/**"</expr>,
                          <expr>"**/.git"</expr>,
                          <expr>"**/.git/**"</expr>,
                          <expr>"**/.gitattributes"</expr>,
                          <expr>"**/.gitignore"</expr>,
                          <expr>"**/.gitmodules"</expr>,
                          <expr>"**/.hg"</expr>,
                          <expr>"**/.hg/**"</expr>,
                          <expr>"**/.hgignore"</expr>,
                          <expr>"**/.hgsub"</expr>,
                          <expr>"**/.hgsubstate"</expr>,
                          <expr>"**/.hgtags"</expr>,
                          <expr>"**/.bzr"</expr>,
                          <expr>"**/.bzr/**"</expr>,
                          <expr>"**/.bzrignore"</expr>,
                          <expr>"**/.DS_Store"</expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr>"test3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"current default excludes"</expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>DirectoryScanner</name>.<name>getDefaultExcludes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>expected</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>actual</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// check that both arrays have the same size</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>message</name> + " : string array length match"</expr></argument>, <argument><expr><name><name>expected</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>actual</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>expected</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr>!<name>found</name> &amp;&amp; <name>i</name> &lt; <name><name>actual</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>found</name> |= <name><name>expected</name><index>[<expr><name>counter</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>message</name> + " : didn't find element "
                       + <name><name>expected</name><index>[<expr><name>counter</name></expr>]</index></name> + " in array match"</expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>
}</block></class>
</unit>
