<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\PropertyFileCLITest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<class><specifier>public</specifier> class <name>PropertyFileCLITest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPropertyResolution</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>FileUtils</name></type> <name>fu</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>props</name> =<init> <expr><call><name><name>fu</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"propertyfilecli"</expr></argument>, <argument><expr>".properties"</expr></argument>,
                                       <argument><expr><name>null</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>build</name> =<init> <expr><call><name><name>fu</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"propertyfilecli"</expr></argument>, <argument><expr>".xml"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>true</expr></argument>,
                                       <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>log</name> =<init> <expr><call><name><name>fu</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"propertyfilecli"</expr></argument>, <argument><expr>".log"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>true</expr></argument>,
                                     <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileWriter</name></type> <name>fw</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileReader</name></type> <name>fr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>fw</name> = new <call><name>FileWriter</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fw</name>.<name>write</name></name><argument_list>(<argument><expr>"w=world\nmessage=Hello, ${w}\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fw</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fw</name> = new <call><name>FileWriter</name><argument_list>(<argument><expr><name>build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fw</name>.<name>write</name></name><argument_list>(<argument><expr>"&lt;project&gt;&lt;echo&gt;${message}&lt;/echo&gt;&lt;/project&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fw</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fw</name> = <name>null</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Main</name></type> <name>m</name> =<init> <expr>new <call><name>NoExitMain</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>startAnt</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
                    <expr>"-propertyfile"</expr>, <expr><call><name><name>props</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                    <expr>"-f"</expr>, <expr><call><name><name>build</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                    <expr>"-l"</expr>, <expr><call><name><name>log</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>
                }</block></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>l</name> =<init> <expr><call><name><name>FileUtils</name>.<name>safeReadFully</name></name><argument_list>(<argument><expr><name>fr</name> = new <call><name>FileReader</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expected log to contain 'Hello, world' but was " + <name>l</name></expr></argument>,
                       <argument><expr><call><name><name>l</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"Hello, world"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>NoExitMain</name> <super><extends>extends <name>Main</name></extends></super> <block>{
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>exit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>exitCode</name></decl></param>)</parameter_list> <block>{
        }</block></function>
    }</block></class>
}</block></class>
</unit>
