<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ProcessDestroyerTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<comment type="block">/*
 * Created on Feb 19, 2003
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>


<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>ProcessDestroyerTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Constructor for ProcessDestroyerTest.
     * @param arg0
     */</comment>
    <constructor><specifier>public</specifier> <name>ProcessDestroyerTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testProcessDestroyer</name><parameter_list>()</parameter_list><block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>ProcessDestroyer</name></type> <name>processDestroyer</name> =<init> <expr>new <call><name>ProcessDestroyer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Process</name></type> <name>process</name> =<init>
                <expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>exec</name><argument_list>(
                    <argument><expr>"java -cp "
                        + <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.class.path"</expr></argument>)</argument_list></call>
                        + " "
                        + <call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Not registered as shutdown hook"</expr></argument>,
                        <argument><expr><call><name><name>processDestroyer</name>.<name>isAddedAsShutdownHook</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>processDestroyer</name>.<name>add</name></name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Registered as shutdown hook"</expr></argument>,
                       <argument><expr><call><name><name>processDestroyer</name>.<name>isAddedAsShutdownHook</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>process</name>.<name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>processDestroyer</name>.<name>remove</name></name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>

            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Not registered as shutdown hook"</expr></argument>,
                        <argument><expr><call><name><name>processDestroyer</name>.<name>isAddedAsShutdownHook</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr>new <call><name>ProcessDestroyerTest</name><argument_list>(<argument><expr>"testProcessDestroyer"</expr></argument>)</argument_list></call>.<call><name>testProcessDestroyer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try<block>{
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>60000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block><catch>catch(<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>)<block>{
            <expr_stmt><expr><call><name><name>ie</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
