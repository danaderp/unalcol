<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\FileScanner.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<comment type="javadoc">/**
 * An interface used to describe the actions required of any type of
 * directory scanner.
 *
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>FileScanner</name> <block>{
    <comment type="javadoc">/**
     * Adds default exclusions to the current exclusions set.
     */</comment>
    <function_decl><type><name>void</name></type> <name>addDefaultExcludes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Returns the base directory to be scanned.
     * This is the directory which is scanned recursively.
     *
     * @return the base directory to be scanned
     */</comment>
    <function_decl><type><name>File</name></type> <name>getBasedir</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Returns the names of the directories which matched at least one of the
     * include patterns and at least one of the exclude patterns.
     * The names are relative to the base directory.
     *
     * @return the names of the directories which matched at least one of the
     * include patterns and at least one of the exclude patterns.
     */</comment>
    <function_decl><type><name>String</name><index>[]</index></type> <name>getExcludedDirectories</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Returns the names of the files which matched at least one of the
     * include patterns and at least one of the exclude patterns.
     * The names are relative to the base directory.
     *
     * @return the names of the files which matched at least one of the
     *         include patterns and at least one of the exclude patterns.
     *
     */</comment>
    <function_decl><type><name>String</name><index>[]</index></type> <name>getExcludedFiles</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Returns the names of the directories which matched at least one of the
     * include patterns and none of the exclude patterns.
     * The names are relative to the base directory.
     *
     * @return the names of the directories which matched at least one of the
     * include patterns and none of the exclude patterns.
     */</comment>
    <function_decl><type><name>String</name><index>[]</index></type> <name>getIncludedDirectories</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Returns the names of the files which matched at least one of the
     * include patterns and none of the exclude patterns.
     * The names are relative to the base directory.
     *
     * @return the names of the files which matched at least one of the
     *         include patterns and none of the exclude patterns.
     */</comment>
    <function_decl><type><name>String</name><index>[]</index></type> <name>getIncludedFiles</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Returns the names of the directories which matched none of the include
     * patterns. The names are relative to the base directory.
     *
     * @return the names of the directories which matched none of the include
     * patterns.
     */</comment>
    <function_decl><type><name>String</name><index>[]</index></type> <name>getNotIncludedDirectories</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Returns the names of the files which matched none of the include
     * patterns. The names are relative to the base directory.
     *
     * @return the names of the files which matched none of the include
     *         patterns.
     */</comment>
    <function_decl><type><name>String</name><index>[]</index></type> <name>getNotIncludedFiles</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Scans the base directory for files which match at least one include
     * pattern and don't match any exclude patterns.
     *
     * @exception IllegalStateException if the base directory was set
     *            incorrectly (i.e. if it is &lt;code&gt;null&lt;/code&gt;, doesn't exist,
     *            or isn't a directory).
     */</comment>
    <function_decl><type><name>void</name></type> <name>scan</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IllegalStateException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Sets the base directory to be scanned. This is the directory which is
     * scanned recursively. All '/' and '\' characters should be replaced by
     * &lt;code&gt;File.separatorChar&lt;/code&gt;, so the separator used need not match
     * &lt;code&gt;File.separatorChar&lt;/code&gt;.
     *
     * @param basedir The base directory to scan.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setBasedir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>basedir</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Sets the base directory to be scanned. This is the directory which is
     * scanned recursively.
     *
     * @param basedir The base directory for scanning.
     *                Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setBasedir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>basedir</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Sets the list of exclude patterns to use.
     *
     * @param excludes A list of exclude patterns.
     *                 May be &lt;code&gt;null&lt;/code&gt;, indicating that no files
     *                 should be excluded. If a non-&lt;code&gt;null&lt;/code&gt; list is
     *                 given, all elements must be non-&lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setExcludes</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>excludes</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Sets the list of include patterns to use.
     *
     * @param includes A list of include patterns.
     *                 May be &lt;code&gt;null&lt;/code&gt;, indicating that all files
     *                 should be included. If a non-&lt;code&gt;null&lt;/code&gt;
     *                 list is given, all elements must be
     * non-&lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setIncludes</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>includes</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Sets whether or not the file system should be regarded as case sensitive.
     *
     * @param isCaseSensitive whether or not the file system should be
     *                        regarded as a case sensitive one
     */</comment>
    <function_decl><type><name>void</name></type> <name>setCaseSensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>isCaseSensitive</name></decl></param>)</parameter_list>;</function_decl>
}</block></class>
</unit>
