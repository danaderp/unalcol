<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\launch\Launcher.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>launch</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URLClassLoader</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>




<comment type="javadoc">/**
 * This is a launcher for Ant.
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>Launcher</name> <block>{

    <comment type="javadoc">/**
     * The Ant Home (installation) Directory property.
     * {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ANTHOME_PROPERTY</name> =<init> <expr>"ant.home"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The Ant Library Directory property.
     * {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ANTLIBDIR_PROPERTY</name> =<init> <expr>"ant.library.dir"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The directory name of the per-user ant directory.
     * {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ANT_PRIVATEDIR</name> =<init> <expr>".ant"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of a per-user library directory.
     * {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ANT_PRIVATELIB</name> =<init> <expr>"lib"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * launch diagnostics flag; for debugging trouble at launch time.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>launchDiag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The location of a per-user library directory.
     * &lt;p&gt;
     * It's value is the concatenation of {@link #ANT_PRIVATEDIR}
     * with {@link #ANT_PRIVATELIB}, with an appropriate file separator
     * in between. For example, on Unix, it's &lt;code&gt;.ant/lib&lt;/code&gt;.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USER_LIBDIR</name> =<init>
        <expr><name>ANT_PRIVATEDIR</name> + <name><name>File</name>.<name>separatorChar</name></name> + <name>ANT_PRIVATELIB</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The startup class that is to be run.
     * {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MAIN_CLASS</name> =<init> <expr>"org.apache.tools.ant.Main"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * System property with user home directory.
     * {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USER_HOMEDIR</name> =<init> <expr>"user.home"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * System property with application classpath.
     * {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_CLASS_PATH</name> =<init> <expr>"java.class.path"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Exit code on trouble
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXIT_CODE_ERROR</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Entry point for starting command line Ant.
     *
     * @param  args commandline arguments
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>exitCode</name></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>Launcher</name></type> <name>launcher</name> =<init> <expr>new <call><name>Launcher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>exitCode</name> = <call><name><name>launcher</name>.<name>run</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>LaunchException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><name>exitCode</name> = <name>EXIT_CODE_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><name>exitCode</name> = <name>EXIT_CODE_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <if>if <condition>(<expr><name>exitCode</name> != 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>launchDiag</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Exit code: "+<name>exitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr><name>exitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Add a CLASSPATH or -lib to lib path urls.
     * Only filesystem resources are supported.
     *
     * @param path        the classpath or lib path to add to the libPathULRLs
     * @param getJars     if true and a path is a directory, add the jars in
     *                    the directory to the path urls
     * @param libPathURLs the list of paths to add to
     * @throws MalformedURLException if we can't create a URL
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>getJars</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>libPathURLs</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokenizer</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>File</name>.<name>pathSeparator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tokenizer</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>elementName</name> =<init> <expr><call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>element</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>elementName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>elementName</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'%'</expr></argument>)</argument_list></call> != -1 &amp;&amp; !<call><name><name>element</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><name>getJars</name> &amp;&amp; <call><name><name>element</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// add any jars in the directory</comment>
                <decl_stmt><decl><type><name>URL</name><index>[]</index></type> <name>dirURLs</name> =<init> <expr><call><name><name>Locator</name>.<name>getLocationURLs</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>dirURLs</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
                    <if>if <condition>(<expr><name>launchDiag</name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"adding library JAR: " + <name><name>dirURLs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                    <expr_stmt><expr><call><name><name>libPathURLs</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>dirURLs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>

            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr><call><name><name>Locator</name>.<name>fileToURL</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>launchDiag</name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"adding library URL: " + <name>url</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>}</block></then></if>
            <expr_stmt><expr><call><name><name>libPathURLs</name>.<name>add</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Run the launcher to launch Ant.
     *
     * @param args the command line arguments
     * @return an exit code. As the normal ant main calls exit when it ends,
     *         this is for handling failures at bind-time
     * @throws MalformedURLException if the URLs required for the classloader
     *            cannot be created.
     * @throws LaunchException for launching problems
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>run</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>LaunchException</name></expr></argument>, <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>antHomeProperty</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>ANTHOME_PROPERTY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>antHome</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>sourceJar</name> =<init> <expr><call><name><name>Locator</name>.<name>getClassSource</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>jarDir</name> =<init> <expr><call><name><name>sourceJar</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mainClassname</name> =<init> <expr><name>MAIN_CLASS</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>antHomeProperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>antHome</name> = new <call><name>File</name><argument_list>(<argument><expr><name>antHomeProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>antHome</name> == <name>null</name> || !<call><name><name>antHome</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>antHome</name> = <call><name><name>jarDir</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ANTHOME_PROPERTY</name></expr></argument>, <argument><expr><call><name><name>antHome</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>antHome</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>LaunchException</name><argument_list>(<argument><expr>"Ant home is set incorrectly or "
                + "ant could not be located (estimated value="+<call><name><name>antHome</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>+")"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>libPaths</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cpString</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>argList</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>newArgs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type>  <name>noUserLib</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type>  <name>noClassPath</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>args</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"-lib"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>i</name> == <name><name>args</name>.<name>length</name></name> - 1</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>LaunchException</name><argument_list>(<argument><expr>"The -lib argument must "
                        + "be followed by a library location"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>libPaths</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>++<name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"-cp"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>i</name> == <name><name>args</name>.<name>length</name></name> - 1</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>LaunchException</name><argument_list>(<argument><expr>"The -cp argument must "
                        + "be followed by a classpath expression"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <if>if <condition>(<expr><name>cpString</name> != <name>null</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>LaunchException</name><argument_list>(<argument><expr>"The -cp argument must "
                        + "not be repeated"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><name>cpString</name> = <name><name>args</name><index>[<expr>++<name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"--nouserlib"</expr></argument>)</argument_list></call> || <name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"-nouserlib"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>noUserLib</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"--launchdiag"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>launchDiag</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"--noclasspath"</expr></argument>)</argument_list></call> || <name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"-noclasspath"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>noClassPath</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"-main"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>i</name> == <name><name>args</name>.<name>length</name></name> - 1</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>LaunchException</name><argument_list>(<argument><expr>"The -main argument must "
                            + "be followed by a library location"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><name>mainClassname</name> = <name><name>args</name><index>[<expr>++<name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>argList</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></for>

        <expr_stmt><expr><call><name>logPath</name><argument_list>(<argument><expr>"Launcher JAR"</expr></argument>,<argument><expr><name>sourceJar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>logPath</name><argument_list>(<argument><expr>"Launcher JAR directory"</expr></argument>, <argument><expr><call><name><name>sourceJar</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>logPath</name><argument_list>(<argument><expr>"java.home"</expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.home"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//decide whether to copy the existing arg set, or</comment>
        <comment type="line">//build a new one from the list of all args excluding the special</comment>
        <comment type="line">//operations that only we handle</comment>
        <if>if <condition>(<expr><call><name><name>argList</name>.<name>size</name></name><argument_list>()</argument_list></call> == <name><name>args</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>newArgs</name> = <name>args</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>newArgs</name> = (<name><name>String</name><index>[]</index></name>) <call><name><name>argList</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr><call><name><name>argList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>URL</name><index>[]</index></type> <name>libURLs</name>    =<init> <expr><call><name>getLibPathURLs</name><argument_list>(
            <argument><expr><name>noClassPath</name> ? <name>null</name> : <name>cpString</name></expr></argument>, <argument><expr><name>libPaths</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>URL</name><index>[]</index></type> <name>systemURLs</name> =<init> <expr><call><name>getSystemURLs</name><argument_list>(<argument><expr><name>jarDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>URL</name><index>[]</index></type> <name>userURLs</name>   =<init> <expr><name>noUserLib</name> ? new <name><name>URL</name><index>[<expr>0</expr>]</index></name> : <call><name>getUserURLs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>toolsJAR</name> =<init> <expr><call><name><name>Locator</name>.<name>getToolsJar</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logPath</name><argument_list>(<argument><expr>"tools.jar"</expr></argument>,<argument><expr><name>toolsJAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>URL</name><index>[]</index></type> <name>jars</name> =<init> <expr><call><name>getJarArray</name><argument_list>(
            <argument><expr><name>libURLs</name></expr></argument>, <argument><expr><name>userURLs</name></expr></argument>, <argument><expr><name>systemURLs</name></expr></argument>, <argument><expr><name>toolsJAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// now update the class.path property</comment>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>baseClassPath</name>
            =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>JAVA_CLASS_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>baseClassPath</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>baseClassPath</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call>
                == <name><name>File</name>.<name>pathSeparatorChar</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>baseClassPath</name>.<name>setLength</name></name><argument_list>(<argument><expr><call><name><name>baseClassPath</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>jars</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>baseClassPath</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>pathSeparatorChar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>baseClassPath</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>Locator</name>.<name>fromURI</name></name><argument_list>(<argument><expr><name><name>jars</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>JAVA_CLASS_PATH</name></expr></argument>, <argument><expr><call><name><name>baseClassPath</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>URLClassLoader</name></type> <name>loader</name> =<init> <expr>new <call><name>URLClassLoader</name><argument_list>(<argument><expr><name>jars</name></expr></argument>, <argument><expr><name><name>Launcher</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>setContextClassLoader</name><argument_list>(<argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>mainClass</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>exitCode</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Throwable</name></type> <name>thrown</name>=<init><expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>mainClass</name> = <call><name><name>loader</name>.<name>loadClass</name></name><argument_list>(<argument><expr><name>mainClassname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AntMain</name></type> <name>main</name> =<init> <expr>(<name>AntMain</name>) <call><name><name>mainClass</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>main</name>.<name>startAnt</name></name><argument_list>(<argument><expr><name>newArgs</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>InstantiationException</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(
                <argument><expr>"Incompatible version of " + <name>mainClassname</name> + " detected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>mainJar</name> =<init> <expr><call><name><name>Locator</name>.<name>getClassSource</name></name><argument_list>(<argument><expr><name>mainClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(
                <argument><expr>"Location of this class " + <name>mainJar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>thrown</name> = <name>ex</name></expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(
                    <argument><expr>"Failed to locate" + <name>mainClassname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>thrown</name> = <name>cnfe</name></expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>t</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>thrown</name>=<name>t</name></expr>;</expr_stmt>
        }</block></catch></try>
        <if>if<condition>(<expr><name>thrown</name>!=<name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>ANTHOME_PROPERTY</name>+": "+<call><name><name>antHome</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Classpath: " + <call><name><name>baseClassPath</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Launcher JAR: " + <call><name><name>sourceJar</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Launcher Directory: " + <call><name><name>jarDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>exitCode</name> = <name>EXIT_CODE_ERROR</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>exitCode</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the list of -lib entries and -cp entry into
     * a URL array.
     * @param cpString the classpath string
     * @param libPaths the list of -lib entries.
     * @return an array of URLs.
     * @throws MalformedURLException if the URLs  cannot be created.
     */</comment>
    <function><type><specifier>private</specifier> <name>URL</name><index>[]</index></type> <name>getLibPathURLs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cpString</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>libPaths</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>libPathURLs</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>URL</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>cpString</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addPath</name><argument_list>(<argument><expr><name>cpString</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>libPathURLs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><decl><type><name>String</name></type> <name>libPath</name> :<range> <expr><name>libPaths</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>addPath</name><argument_list>(<argument><expr><name>libPath</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>libPathURLs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><call><name><name>libPathURLs</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>URL</name><index>[<expr><call><name><name>libPathURLs</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the jar files in ANT_HOME/lib.
     * determine ant library directory for system jars: use property
     * or default using location of ant-launcher.jar
     * @param antLauncherDir the dir that ant-launcher ran from
     * @return the URLs
     * @throws MalformedURLException if the URLs cannot be created.
     */</comment>
    <function><type><specifier>private</specifier> <name>URL</name><index>[]</index></type> <name>getSystemURLs</name><parameter_list>(<param><decl><type><name>File</name></type> <name>antLauncherDir</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>antLibDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>antLibDirProperty</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>ANTLIBDIR_PROPERTY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>antLibDirProperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>antLibDir</name> = new <call><name>File</name><argument_list>(<argument><expr><name>antLibDirProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>(<name>antLibDir</name> == <name>null</name>) || !<call><name><name>antLibDir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>antLibDir</name> = <name>antLauncherDir</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ANTLIBDIR_PROPERTY</name></expr></argument>, <argument><expr><call><name><name>antLibDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>Locator</name>.<name>getLocationURLs</name></name><argument_list>(<argument><expr><name>antLibDir</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the jar files in user.home/.ant/lib
     * @return the URLS from the user's lib dir
     * @throws MalformedURLException if the URLs cannot be created.
     */</comment>
    <function><type><specifier>private</specifier> <name>URL</name><index>[]</index></type> <name>getUserURLs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>userLibDir</name>
            =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>USER_HOMEDIR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>USER_LIBDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>Locator</name>.<name>getLocationURLs</name></name><argument_list>(<argument><expr><name>userLibDir</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Combine the various jar sources into a single array of jars.
     * @param libJars the jars specified in -lib command line options
     * @param userJars the jars in ~/.ant/lib
     * @param systemJars the jars in $ANT_HOME/lib
     * @param toolsJar   the tools.jar file
     * @return a combined array
     * @throws MalformedURLException if there is a problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>URL</name><index>[]</index></type> <name>getJarArray</name> <parameter_list>(
        <param><decl><type><name><name>URL</name><index>[]</index></name></type> <name>libJars</name></decl></param>, <param><decl><type><name><name>URL</name><index>[]</index></name></type> <name>userJars</name></decl></param>, <param><decl><type><name><name>URL</name><index>[]</index></name></type> <name>systemJars</name></decl></param>, <param><decl><type><name>File</name></type> <name>toolsJar</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>numJars</name> =<init> <expr><name><name>libJars</name>.<name>length</name></name> + <name><name>userJars</name>.<name>length</name></name> + <name><name>systemJars</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>toolsJar</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>numJars</name>++</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>URL</name><index>[]</index></type> <name>jars</name> =<init> <expr>new <name><name>URL</name><index>[<expr><name>numJars</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>libJars</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>jars</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>libJars</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>userJars</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>jars</name></expr></argument>, <argument><expr><name><name>libJars</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>userJars</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>systemJars</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>jars</name></expr></argument>, <argument><expr><name><name>userJars</name>.<name>length</name></name> + <name><name>libJars</name>.<name>length</name></name></expr></argument>,
            <argument><expr><name><name>systemJars</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>toolsJar</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>jars</name><index>[<expr><name><name>jars</name>.<name>length</name></name> - 1</expr>]</index></name> = <call><name><name>Locator</name>.<name>fileToURL</name></name><argument_list>(<argument><expr><name>toolsJar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>jars</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * set a system property, optionally log what is going on
     * @param name property name
     * @param value value
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>launchDiag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Setting \"" + <name>name</name> + "\" to \"" + <name>value</name> + "\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>System</name>.<name>setProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>,<param><decl><type><name>File</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>launchDiag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>name</name>+"= \""+<name>path</name>+"\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
