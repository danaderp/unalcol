<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\ImportTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelperRepository</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>URLResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * Task to import another build file into the current project.
 * &lt;p&gt;
 * It must be 'top level'. On execution it will read another Ant file
 * into the same Project.
 * &lt;/p&gt;
 * &lt;p&gt;
 * &lt;b&gt;Important&lt;/b&gt;: Trying to understand how relative file references
 * resolved in deep/complex build hierarchies - such as what happens
 * when an imported file imports another file can be difficult. Use absolute references for
 * enhanced build file stability, especially in the imported files.
 * &lt;/p&gt;
 * &lt;p&gt;Examples:&lt;/p&gt;
 * &lt;pre&gt;
 * &amp;lt;import file="../common-targets.xml"/&amp;gt;
 * &lt;/pre&gt;
 * &lt;p&gt;Import targets from a file in a parent directory.&lt;/p&gt;
 * &lt;pre&gt;
 * &amp;lt;import file="${deploy-platform}.xml"/&amp;gt;
 * &lt;/pre&gt;
 * &lt;p&gt;Import the project defined by the property &lt;code&gt;deploy-platform&lt;/code&gt;.&lt;/p&gt;
 *
 * @since Ant1.6
 * @ant.task category="control"
 */</comment>
<class><specifier>public</specifier> class <name>ImportTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>optional</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>targetPrefix</name> =<init> <expr><name><name>ProjectHelper</name>.<name>USE_PROJECT_NAME_AS_TARGET_PREFIX</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>prefixSeparator</name> =<init> <expr>"."</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Union</name></type> <name>resources</name> =<init> <expr>new <call><name>Union</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ImportTask</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>resources</name>.<name>setCache</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * sets the optional attribute
     *
     * @param optional if true ignore files that are not present,
     *                 default is false
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptional</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>optional</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>optional</name></name> = <name>optional</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * the name of the file to import. How relative paths are resolved is still
     * in flux: use absolute paths for safety.
     * @param file the name of the file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// I don't think we can use File - different rules</comment>
        <comment type="line">// for relative paths.</comment>
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The prefix to use when prefixing the imported target names.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>targetPrefix</name> = <name>prefix</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The separator to use between prefix and target name, default is
     * ".".
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrefixSeparator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>prefixSeparator</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The resource to import.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>resources</name>.<name>add</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>file</name> == <name>null</name> &amp;&amp; <call><name><name>resources</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"import requires file attribute or"
                                     + " at least one nested resource"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call> == <name>null</name>
            || !"".<call><name>equals</name><argument_list>(<argument><expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"import only allowed as a top-level task"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>ProjectHelper</name></type> <name>helper</name> =<init>
                <expr>(<name>ProjectHelper</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.
                    <call><name>getReference</name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>PROJECTHELPER_REFERENCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>helper</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// this happens if the projecthelper was not registered with the project.</comment>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"import requires support in ProjectHelper"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>importStack</name> =<init> <expr><call><name><name>helper</name>.<name>getImportStack</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>importStack</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <comment type="line">// this happens if ant is used with a project</comment>
            <comment type="line">// helper that doesn't set the import.</comment>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"import requires support in ProjectHelper"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getLocation</name><argument_list>()</argument_list></call> == <name>null</name> || <call><name>getLocation</name><argument_list>()</argument_list></call>.<call><name>getFileName</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to get location of import task"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>Union</name></type> <name>resourcesToImport</name> =<init> <expr>new <call><name>Union</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Resource</name></type> <name>fromFileAttribute</name> =<init> <expr><call><name>getFileAttributeResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fromFileAttribute</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>resources</name>.<name>add</name></name><argument_list>(<argument><expr><name>fromFileAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resourcesToImport</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>importResource</name><argument_list>(<argument><expr><name>helper</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>importResource</name><parameter_list>(<param><decl><type><name>ProjectHelper</name></type> <name>helper</name></decl></param>,
                                <param><decl><type><name>Resource</name></type> <name>importedResource</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>importStack</name> =<init> <expr><call><name><name>helper</name>.<name>getImportStack</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Importing file " + <name>importedResource</name> + " from "
                         + <call><name>getLocation</name><argument_list>()</argument_list></call>.<call><name>getFileName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name><name>importedResource</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init>
                <expr>"Cannot find " + <name>importedResource</name> + " imported from "
                + <call><name>getLocation</name><argument_list>()</argument_list></call>.<call><name>getFileName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>optional</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>importedFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileProvider</name></type> <name>fp</name> =<init> <expr><call><name><name>importedResource</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fp</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>importedFile</name> = <call><name><name>fp</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>isInIncludeMode</name><argument_list>()</argument_list></call> &amp;&amp;
            (<call><name><name>importStack</name>.<name>contains</name></name><argument_list>(<argument><expr><name>importedResource</name></expr></argument>)</argument_list></call>
             || (<name>importedFile</name> != <name>null</name> &amp;&amp; <call><name><name>importStack</name>.<name>contains</name></name><argument_list>(<argument><expr><name>importedFile</name></expr></argument>)</argument_list></call>)
             )</expr>
            )</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(
                <argument><expr>"Skipped already imported file:\n   "
                + <name>importedResource</name> + "\n"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// nested invocations are possible like an imported file</comment>
        <comment type="line">// importing another one</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>oldPrefix</name> =<init> <expr><call><name><name>ProjectHelper</name>.<name>getCurrentTargetPrefix</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>oldIncludeMode</name> =<init> <expr><call><name><name>ProjectHelper</name>.<name>isInIncludeMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>oldSep</name> =<init> <expr><call><name><name>ProjectHelper</name>.<name>getCurrentPrefixSeparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>prefix</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>isInIncludeMode</name><argument_list>()</argument_list></call> &amp;&amp; <name>oldPrefix</name> != <name>null</name>
                &amp;&amp; <name>targetPrefix</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>prefix</name> = <name>oldPrefix</name> + <name>oldSep</name> + <name>targetPrefix</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>isInIncludeMode</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>prefix</name> = <name>targetPrefix</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>ProjectHelper</name>.<name>USE_PROJECT_NAME_AS_TARGET_PREFIX</name>.<name>equals</name></name><argument_list>(<argument><expr><name>targetPrefix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>prefix</name> = <name>targetPrefix</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>prefix</name> = <name>oldPrefix</name></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if>
            <expr_stmt><expr><call><name>setProjectHelperProps</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefixSeparator</name></expr></argument>,
                                  <argument><expr><call><name>isInIncludeMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ProjectHelper</name></type> <name>subHelper</name> =<init> <expr><call><name><name>ProjectHelperRepository</name>.<name>getInstance</name></name><argument_list>()</argument_list></call>.<call><name>getProjectHelperForBuildFile</name><argument_list>(
                    <argument><expr><name>importedResource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// push current stacks into the sub helper</comment>
            <expr_stmt><expr><call><name><name>subHelper</name>.<name>getImportStack</name></name><argument_list>()</argument_list></call>.<call><name>addAll</name><argument_list>(<argument><expr><call><name><name>helper</name>.<name>getImportStack</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>subHelper</name>.<name>getExtensionStack</name></name><argument_list>()</argument_list></call>.<call><name>addAll</name><argument_list>(<argument><expr><call><name><name>helper</name>.<name>getExtensionStack</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addReference</name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>PROJECTHELPER_REFERENCE</name></name></expr></argument>, <argument><expr><name>subHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>subHelper</name>.<name>parse</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>importedResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// push back the stack from the sub helper to the main one</comment>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addReference</name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>PROJECTHELPER_REFERENCE</name></name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>helper</name>.<name>getImportStack</name></name><argument_list>()</argument_list></call>.<call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>helper</name>.<name>getImportStack</name></name><argument_list>()</argument_list></call>.<call><name>addAll</name><argument_list>(<argument><expr><call><name><name>subHelper</name>.<name>getImportStack</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>helper</name>.<name>getExtensionStack</name></name><argument_list>()</argument_list></call>.<call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>helper</name>.<name>getExtensionStack</name></name><argument_list>()</argument_list></call>.<call><name>addAll</name><argument_list>(<argument><expr><call><name><name>subHelper</name>.<name>getExtensionStack</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr><call><name><name>ProjectHelper</name>.<name>addLocationToBuildException</name></name><argument_list>(
                <argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name>setProjectHelperProps</name><argument_list>(<argument><expr><name>oldPrefix</name></expr></argument>, <argument><expr><name>oldSep</name></expr></argument>, <argument><expr><name>oldIncludeMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Resource</name></type> <name>getFileAttributeResource</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Paths are relative to the build file they're imported from,</comment>
        <comment type="line">// *not* the current directory (same as entity includes).</comment>

        <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>buildFile</name> =<init>
                <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call>.<call><name>getFileName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getAbsoluteFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>buildFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>buildFileParent</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>buildFile</name>.<name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>importedFile</name> =<init>
                    <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>buildFileParent</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>importedFile</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <comment type="line">// maybe this import tasks is inside an imported URL?</comment>
            <try>try <block>{
                <decl_stmt><decl><type><name>URL</name></type> <name>buildFileURL</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call>.<call><name>getFileName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>URL</name></type> <name>importedFile</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr><name>buildFileURL</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr>new <call><name>URLResource</name><argument_list>(<argument><expr><name>importedFile</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>ex</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>ex</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"failed to resolve " + <name>file</name>
                                     + " relative to "
                                     + <call><name>getLocation</name><argument_list>()</argument_list></call>.<call><name>getFileName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Whether the task is in include (as opposed to import) mode.
     *
     * &lt;p&gt;In include mode included targets are only known by their
     * prefixed names and their depends lists get rewritten so that
     * all dependencies get the prefix as well.&lt;/p&gt;
     *
     * &lt;p&gt;In import mode imported targets are known by an adorned as
     * well as a prefixed name and the unadorned target may be
     * overwritten in the importing build file.  The depends list of
     * the imported targets is not modified at all.&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isInIncludeMode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"include".<call><name>equals</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a bunch of Thread-local ProjectHelper properties.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>setProjectHelperProps</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>,
                                              <param><decl><type><name>String</name></type> <name>prefixSep</name></decl></param>,
                                              <param><decl><type><name>boolean</name></type> <name>inIncludeMode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ProjectHelper</name>.<name>setCurrentTargetPrefix</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ProjectHelper</name>.<name>setCurrentPrefixSeparator</name></name><argument_list>(<argument><expr><name>prefixSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ProjectHelper</name>.<name>setInIncludeMode</name></name><argument_list>(<argument><expr><name>inIncludeMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
