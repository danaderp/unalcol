<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\depend\JarFileIterator.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipInputStream</name></name>;</import>

<comment type="javadoc">/**
 * A class file iterator which iterates through the contents of a Java jar
 * file.
 *
 */</comment>
<class><specifier>public</specifier> class <name>JarFileIterator</name> <super><implements>implements <name>ClassFileIterator</name></implements></super> <block>{
    <comment type="javadoc">/** The jar stream from the jar file being iterated over*/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ZipInputStream</name></type> <name>jarStream</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct an iterator over a jar stream
     *
     * @param stream the basic input stream from which the Jar is received
     * @exception IOException if the jar stream cannot be created
     */</comment>
    <constructor><specifier>public</specifier> <name>JarFileIterator</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>jarStream</name> = new <call><name>ZipInputStream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the next ClassFile object from the jar
     *
     * @return a ClassFile object describing the class from the jar
     */</comment>
    <function><type><specifier>public</specifier> <name>ClassFile</name></type> <name>getNextClassFile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>jarEntry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClassFile</name></type> <name>nextElement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>jarEntry</name> = <call><name><name>jarStream</name>.<name>getNextEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><name>nextElement</name> == <name>null</name> &amp;&amp; <name>jarEntry</name> != <name>null</name></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>entryName</name> =<init> <expr><call><name><name>jarEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr>!<call><name><name>jarEntry</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>entryName</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                    <comment type="line">// create a data input stream from the jar input stream</comment>
                    <decl_stmt><decl><type><name>ClassFile</name></type> <name>javaClass</name> =<init> <expr>new <call><name>ClassFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>javaClass</name>.<name>read</name></name><argument_list>(<argument><expr><name>jarStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>nextElement</name> = <name>javaClass</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{

                    <expr_stmt><expr><name>jarEntry</name> = <call><name><name>jarStream</name>.<name>getNextEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr><call><name><name>e</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>message</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>text</name> += ": " + <name>message</name></expr>;</expr_stmt>
            }</block></then></if>

            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Problem reading JAR file: " + <name>text</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <return>return <expr><name>nextElement</name></expr>;</return>
    }</block></function>

}</block></class>

</unit>
