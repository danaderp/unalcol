<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\JavacTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>compilers</name>.<name>CompilerAdapter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>compilers</name>.<name>CompilerAdapterFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>compilers</name>.<name>Javac13</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>compilers</name>.<name>JavacExternal</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * Testcase for &lt;javac&gt;.
 *
 */</comment>
<class><specifier>public</specifier> class <name>JavacTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Javac</name></type> <name>javac</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>JavacTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>javac</name> = new <call><name>Javac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test setting the name of the javac executable.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testForkedExecutableName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"no fork means no executable"</expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getJavacExecutable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"build.compiler"</expr></argument>, <argument><expr>"modern"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"no fork means no executable"</expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getJavacExecutable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>javac</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"normal fork"</expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getJavacExecutable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"name should contain \"javac\""</expr></argument>,
                   <argument><expr><call><name><name>javac</name>.<name>getJavacExecutable</name></name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"javac"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"build.compiler"</expr></argument>, <argument><expr>"extJavac"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setFork</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"fork via property"</expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getJavacExecutable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"name should contain \"javac\""</expr></argument>,
                   <argument><expr><call><name><name>javac</name>.<name>getJavacExecutable</name></name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"javac"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"build.compiler"</expr></argument>, <argument><expr>"whatever"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"no fork and not extJavac means no executable"</expr></argument>,
                   <argument><expr><call><name><name>javac</name>.<name>getJavacExecutable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>myJavac</name> =<init> <expr>"Slartibartfast"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><name>myJavac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>myJavac</name></expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getJavacExecutable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test nested compiler args.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCompilerArg</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>args</name> =<init> <expr><call><name><name>javac</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no args"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Javac</name>.<name>ImplementationSpecificArgument</name></name></type> <name>arg</name> =<init> <expr><call><name><name>javac</name>.<name>createCompilerArg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>ford</name> =<init> <expr>"Ford"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>prefect</name> =<init> <expr>"Prefect"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>testArg</name> =<init> <expr><name>ford</name> + " " + <name>prefect</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>arg</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>testArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> = <call><name><name>javac</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"unconditional single arg"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>testArg</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>arg</name>.<name>setCompiler</name></name><argument_list>(<argument><expr>"jikes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> = <call><name><name>javac</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"implementation is jikes but build.compiler is null"</expr></argument>,
                     <argument><expr>0</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"build.compiler"</expr></argument>, <argument><expr>"jvc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> = <call><name><name>javac</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"implementation is jikes but build.compiler is jvc"</expr></argument>,
                     <argument><expr>0</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"build.compiler"</expr></argument>, <argument><expr>"jikes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> = <call><name><name>javac</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"both are jikes"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>testArg</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>arg</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>testArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> = <call><name><name>javac</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"split at space"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>ford</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>prefect</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test nested compiler args in the fork="true" and
     * implementation="extJavac" case.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCompilerArgForForkAndExtJavac</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Javac</name>.<name>ImplementationSpecificArgument</name></name></type> <name>arg</name> =<init> <expr><call><name><name>javac</name>.<name>createCompilerArg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>ford</name> =<init> <expr>"Ford"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>prefect</name> =<init> <expr>"Prefect"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>testArg</name> =<init> <expr><name>ford</name> + " " + <name>prefect</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>arg</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>testArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>arg</name>.<name>setCompiler</name></name><argument_list>(<argument><expr>"extJavac"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>args</name> =<init> <expr><call><name><name>javac</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"both are forked javac"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>testArg</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test compiler attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCompilerAttribute</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// check defaults</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>compiler</name> =<init> <expr><call><name><name>javac</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"build.compiler"</expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"build.compiler"</expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"default value"</expr></argument>,
                       <argument><expr>"javac1.1".<call><name>equals</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call>
                       || "javac1.2".<call><name>equals</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call>
                       || "javac1.3".<call><name>equals</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call>
                       || "javac1.4".<call><name>equals</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call>
                       || "javac1.5".<call><name>equals</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call>
                       || "classic".<call><name>equals</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>javac</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>javac</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"extJavac"</expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getCompilerVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check build.compiler provides defaults</comment>
        <expr_stmt><expr><name>javac</name> = new <call><name>Javac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// setUserProperty to override system properties</comment>
        <expr_stmt><expr><call><name><name>project</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"build.compiler"</expr></argument>, <argument><expr>"jikes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compiler</name> = <call><name><name>javac</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"jikes"</expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>javac</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compiler</name> = <call><name><name>javac</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"jikes"</expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check attribute overrides build.compiler</comment>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setFork</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setCompiler</name></name><argument_list>(<argument><expr>"jvc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compiler</name> = <call><name><name>javac</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"jvc"</expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>javac</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compiler</name> = <call><name><name>javac</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"jvc"</expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCompilerAdapter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>javac</name>.<name>setCompiler</name></name><argument_list>(<argument><expr>"javac1.4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>javac</name>.<name>setDepend</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CompilerAdapter</name></type> <name>adapter</name> =<init>
            <expr><call><name><name>CompilerAdapterFactory</name>.<name>getCompiler</name></name><argument_list>(<argument><expr><call><name><name>javac</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>javac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>adapter</name> <name>instanceof</name> <name>Javac13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>javac</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>adapter</name> =
            <call><name><name>CompilerAdapterFactory</name>.<name>getCompiler</name></name><argument_list>(<argument><expr><call><name><name>javac</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>javac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>adapter</name> <name>instanceof</name> <name>JavacExternal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSourceNoDefault</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>javac</name>.<name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSourceWithDefault</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>project</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr>"ant.build.javac.source"</expr></argument>, <argument><expr>"1.4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1.4"</expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSourceOverridesDefault</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>project</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr>"ant.build.javac.source"</expr></argument>, <argument><expr>"1.4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setSource</name></name><argument_list>(<argument><expr>"1.5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1.5"</expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTargetNoDefault</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>javac</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTargetWithDefault</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>project</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr>"ant.build.javac.target"</expr></argument>, <argument><expr>"1.4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1.4"</expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTargetOverridesDefault</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>project</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr>"ant.build.javac.target"</expr></argument>, <argument><expr>"1.4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>javac</name>.<name>setTarget</name></name><argument_list>(<argument><expr>"1.5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1.5"</expr></argument>, <argument><expr><call><name><name>javac</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
