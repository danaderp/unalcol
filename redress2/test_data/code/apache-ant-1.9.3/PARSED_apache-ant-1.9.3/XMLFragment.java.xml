<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\XMLFragment.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Document</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>DocumentFragment</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Element</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Node</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Text</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DynamicElementNS</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DynamicConfiguratorNS</name></name>;</import>

<comment type="javadoc">/**
 * Use this class as a nested element if you want to get a literal DOM
 * fragment of something nested into your task/type.
 *
 * &lt;p&gt;This is useful for tasks that want to deal with the "real" XML
 * from the build file instead of objects.&lt;/p&gt;
 *
 * &lt;p&gt;Code heavily influenced by code written by Dominique Devienne.&lt;/p&gt;
 *
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>XMLFragment</name> <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>DynamicElementNS</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Document</name></type> <name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DocumentFragment</name></type> <name>fragment</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for XMLFragment object.
     */</comment>
    <constructor><specifier>public</specifier> <name>XMLFragment</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>doc</name> = <call><name><name>JAXPUtils</name>.<name>getDocumentBuilder</name></name><argument_list>()</argument_list></call>.<call><name>newDocument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fragment</name> = <call><name><name>doc</name>.<name>createDocumentFragment</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @return the DocumentFragment that corresponds to the nested
     *          structure.
     */</comment>
    <function><type><specifier>public</specifier> <name>DocumentFragment</name></type> <name>getFragment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>fragment</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add nested text, expanding properties as we go
     * @param s the text to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addText</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a nested element.
     * @param uri the uri of the nested element
     * @param name the localname of the nested element
     * @param qName the qualified name of the nested element
     * @return an object that the element is applied to
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>createDynamicElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>uri</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>qName</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Element</name></type> <name>e</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>uri</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>e</name> = <call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>e</name> = <call><name><name>doc</name>.<name>createElementNS</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>qName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>fragment</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>Child</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add text to a node.
     * @param n node
     * @param s value
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>Node</name></type> <name>n</name></decl></param>, <param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>s</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//only text nodes that are non null after property expansion are added</comment>
        <if>if <condition>(<expr><name>s</name> != <name>null</name> &amp;&amp; !<call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Text</name></type> <name>t</name> =<init> <expr><call><name><name>doc</name>.<name>createTextNode</name></name><argument_list>(<argument><expr><call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>n</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * An object to handle (recursively) nested elements.
     */</comment>
    <class><specifier>public</specifier> class <name>Child</name> <super><implements>implements <name>DynamicConfiguratorNS</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Element</name></type> <name>e</name></decl>;</decl_stmt>

        <constructor><name>Child</name><parameter_list>(<param><decl><type><name>Element</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>e</name></name> = <name>e</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Add nested text.
         * @param s the text to add
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>XMLFragment</name>.<name>this</name>.<name>addText</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Sets the attribute
         * @param uri the uri of the attribute
         * @param name the localname of the attribute
         * @param qName the qualified name of the attribute
         * @param value the value of the attribute
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDynamicAttribute</name><parameter_list>(
            <param><decl><type><name>String</name></type> <name>uri</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>qName</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>uri</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>setAttributeNS</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>qName</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="javadoc">/**
         * Creates a nested element.
         * @param uri the uri of the nested element
         * @param name the localname of the nested element
         * @param qName the qualified name of the nested element
         * @return an object that the element is applied to
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>createDynamicElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>uri</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>qName</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Element</name></type> <name>e2</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>uri</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>e2</name> = <call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>e2</name> = <call><name><name>doc</name>.<name>createElementNS</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>qName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>e</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>new <call><name>Child</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
