<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\IsLastModified.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Touch</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>

<comment type="javadoc">/**
 * Condition that makes assertions about the last modified date of a
 * resource.
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>IsLastModified</name> <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>millis</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>dateTime</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Touch</name>.<name>DateFormatFactory</name></name></type> <name>dfFactory</name> =<init> <expr><name><name>Touch</name>.<name>DEFAULT_DF_FACTORY</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resource</name></type> <name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CompareMode</name></type> <name>mode</name> =<init> <expr><name><name>CompareMode</name>.<name>EQUALS</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the new modification time of file(s) touched
     * in milliseconds since midnight Jan 1 1970.
     * @param millis the &lt;code&gt;long&lt;/code&gt; timestamp to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMillis</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>millis</name></name> = <name>millis</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the new modification time of file(s) touched
     * in the format &amp;quot;MM/DD/YYYY HH:MM AM &lt;i&gt;or&lt;/i&gt; PM&amp;quot;
     * or &amp;quot;MM/DD/YYYY HH:MM:SS AM &lt;i&gt;or&lt;/i&gt; PM&amp;quot;.
     * @param dateTime the &lt;code&gt;String&lt;/code&gt; date in the specified format.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDatetime</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dateTime</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dateTime</name></name> = <name>dateTime</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the format of the datetime attribute.
     * @param pattern the &lt;code&gt;SimpleDateFormat&lt;/code&gt;-compatible
     * format pattern.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>dfFactory</name> = new <class><super><name><name>Touch</name>.<name>DateFormatFactory</name></name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getPrimaryFormat</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
            <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getFallbackFormat</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The resource to test.
     * @param r the resource to test
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>resource</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"only one resource can be tested"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>resource</name> = <name>r</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The type of comparison to test.
     * @param mode the mode of comparison.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMode</name><parameter_list>(<param><decl><type><name>CompareMode</name></type> <name>mode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>mode</name></name> = <name>mode</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Argument validation.
     * @throws BuildException if the required attributes are not supplied or
     * if there is an inconsistency in the attributes.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>millis</name> &gt;= 0 &amp;&amp; <name>dateTime</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one of dateTime and millis can be"
                                     + " set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>millis</name> &lt; 0 &amp;&amp; <name>dateTime</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"millis or dateTime is required"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>resource</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"resource is required"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Calculate timestamp as millis either based on millis or
     * dateTime (and pattern) attribute.
     * @return time in milliseconds
     * @throws BuildException if the date cannot be parsed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>long</name></type> <name>getMillis</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>millis</name> &gt;= 0</expr>)</condition><then> <block>{
            <return>return <expr><name>millis</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>"now".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>df</name> =<init> <expr><call><name><name>dfFactory</name>.<name>getPrimaryFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ParseException</name></type> <name>pe</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <return>return <expr><call><name><name>df</name>.<name>parse</name></name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>peOne</name></decl></param>) <block>{
            <expr_stmt><expr><name>df</name> = <call><name><name>dfFactory</name>.<name>getFallbackFormat</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>df</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pe</name> = <name>peOne</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <try>try <block>{
                    <return>return <expr><call><name><name>df</name>.<name>parse</name></name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
                }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>peTwo</name></decl></param>) <block>{
                    <expr_stmt><expr><name>pe</name> = <name>peTwo</name></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></else></if>
        }</block></catch></try>
        <if>if <condition>(<expr><name>pe</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>pe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="block">/* NOTREACHED */</comment>
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * evaluate the condition
     * @return true or false depending on the compoarison mode and the time of the resource
     * @throws BuildException
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>expected</name> =<init> <expr><call><name>getMillis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>actual</name> =<init> <expr><call><name><name>resource</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"expected timestamp: " + <name>expected</name> + " (" + new <call><name>Date</name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call> + ")"
            + ", actual timestamp: " + <name>actual</name> + " (" + new <call><name>Date</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call> + ")"</expr></argument> ,
            <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>CompareMode</name>.<name>EQUALS_TEXT</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>mode</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>expected</name> == <name>actual</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>CompareMode</name>.<name>BEFORE_TEXT</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>mode</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>expected</name> &gt; <name>actual</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>CompareMode</name>.<name>NOT_BEFORE_TEXT</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>mode</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>expected</name> &lt;= <name>actual</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>CompareMode</name>.<name>AFTER_TEXT</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>mode</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>expected</name> &lt; <name>actual</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>CompareMode</name>.<name>NOT_AFTER_TEXT</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>mode</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>expected</name> &gt;= <name>actual</name></expr>;</return>
        }</block></then></if>
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unknown mode " + <call><name><name>mode</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * describes comparison modes.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>CompareMode</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EQUALS_TEXT</name> =<init> <expr>"equals"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BEFORE_TEXT</name> =<init> <expr>"before"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AFTER_TEXT</name> =<init> <expr>"after"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NOT_BEFORE_TEXT</name> =<init> <expr>"not-before"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NOT_AFTER_TEXT</name> =<init> <expr>"not-after"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CompareMode</name></type> <name>EQUALS</name> =<init> <expr>new <call><name>CompareMode</name><argument_list>(<argument><expr><name>EQUALS_TEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * creates a CompareMode instance of type equals
         */</comment>
        <constructor><specifier>public</specifier> <name>CompareMode</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>EQUALS_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * creates a comparemode instance
         * @param s one of the authorized values for comparemode
         */</comment>
        <constructor><specifier>public</specifier> <name>CompareMode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{
                <expr><name>EQUALS_TEXT</name></expr>, <expr><name>BEFORE_TEXT</name></expr>, <expr><name>AFTER_TEXT</name></expr>, <expr><name>NOT_BEFORE_TEXT</name></expr>,
                <expr><name>NOT_AFTER_TEXT</name></expr>,
            }</block></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
