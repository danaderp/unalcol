<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\RegularExpression.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>Regexp</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpFactory</name></name>;</import>

<comment type="javadoc">/**
 * A regular expression datatype.  Keeps an instance of the
 * compiled expression for speed purposes.  This compiled
 * expression is lazily evaluated (it is compiled the first
 * time it is needed).  The syntax is the dependent on which
 * regular expression type you are using.  The system property
 * "ant.regexp.regexpimpl" will be the classname of the implementation
 * that will be used.
 *
 * &lt;pre&gt;
 * Available implementations:
 *
 *   org.apache.tools.ant.util.regexp.Jdk14RegexpRegexp (default)
 *        Based on the JDK's built-in regular expression package
 *
 *   org.apache.tools.ant.util.regexp.JakartaOroRegexp
 *        Based on the jakarta-oro package
 *
 *   org.apache.tools.ant.util.regexp.JakartaRegexpRegexp
 *        Based on the jakarta-regexp package
 * &lt;/pre&gt;
 *
 * &lt;pre&gt;
 *   &amp;lt;regexp [ [id="id"] pattern="expression" | refid="id" ]
 *   /&amp;gt;
 * &lt;/pre&gt;
 *
 * @see org.apache.oro.text.regex.Perl5Compiler
 * @see org.apache.regexp.RE
 * @see java.util.regex.Pattern
 *
 * @see org.apache.tools.ant.util.regexp.Regexp
 *
 * @ant.datatype name="regexp"
 */</comment>
<class><specifier>public</specifier> class <name>RegularExpression</name> <super><extends>extends <name>DataType</name></extends></super> <block>{
    <comment type="javadoc">/** Name of this data type */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATA_TYPE_NAME</name> =<init> <expr>"regexp"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>alreadyInit</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="line">// The regular expression factory</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RegexpFactory</name></type> <name>FACTORY</name> =<init> <expr>new <call><name>RegexpFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Regexp</name></type> <name>regexp</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// temporary variable</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>myPattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>setPatternPending</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * default constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>RegularExpression</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>alreadyInit</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>regexp</name></name> = <call><name><name>FACTORY</name>.<name>newRegexp</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>alreadyInit</name> = true</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>setPatternPending</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>regexp</name>.<name>setPattern</name></name><argument_list>(<argument><expr><name>myPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>setPatternPending</name> = false</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <comment type="javadoc">/**
     * sets the regular expression pattern
     * @param pattern regular expression pattern
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>regexp</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>myPattern</name> = <name>pattern</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>setPatternPending</name> = true</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>regexp</name>.<name>setPattern</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/***
     * Gets the pattern string for this RegularExpression in the
     * given project.
     * @param p project
     * @return pattern
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPattern</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>.<call><name>getPattern</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>setPattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>regexp</name>.<name>getPattern</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * provides a reference to the Regexp contained in this
     * @param p  project
     * @return   Regexp instance associated with this RegularExpression instance
     */</comment>
    <function><type><specifier>public</specifier> <name>Regexp</name></type> <name>getRegexp</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>.<call><name>getRegexp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>setPattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>this</name>.<name>regexp</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/***
     * Get the RegularExpression this reference refers to in
     * the given project.  Check for circular references too
     * @param p project
     * @return resolved RegularExpression instance
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularExpression</name></type> <name>getRef</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>RegularExpression</name>) <call><name>getCheckedRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
