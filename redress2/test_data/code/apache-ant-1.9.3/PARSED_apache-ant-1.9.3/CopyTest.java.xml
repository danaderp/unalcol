<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\CopyTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<comment type="javadoc">/**
 * Tests FileSet using the Copy task.
 *
 */</comment>
<class><specifier>public</specifier> class <name>CopyTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CopyTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/copy.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"copytest1.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>( <expr>!<call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Copy failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"copytest1dir/copy.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>( <expr>!<call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Copy failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file3</name>  =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"copytest3.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file3a</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"copytest3a.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3a</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file3b</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"copytest3b.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3b</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file3c</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"copytest3c.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3c</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//file length checks rely on touch generating a zero byte file</comment>
        <if>if<condition>(<expr><call><name><name>file3</name>.<name>length</name></name><argument_list>()</argument_list></call>==0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"could not overwrite an existing, older file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name><name>file3c</name>.<name>length</name></name><argument_list>()</argument_list></call>!=0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"could not force overwrite an existing, newer file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name><name>file3b</name>.<name>length</name></name><argument_list>()</argument_list></call>==0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"unexpectedly overwrote an existing, newer file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">//file time checks for java1.2+</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3a</name>.<name>lastModified</name></name><argument_list>()</argument_list></call>==<call><name><name>file3</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3c</name>.<name>lastModified</name></name><argument_list>()</argument_list></call>&lt;<call><name><name>file3a</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterTest</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"filtertest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>getOutput</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"loop in tokens"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInfiniteFilter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"infinitetest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>getOutput</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"loop in tokens"</expr></argument>)</argument_list></call> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterSet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilterSet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name>  =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"copy.filterset.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>check</name>  =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"expected/copy.filterset.filtered"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>tmp</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterChain</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilterChain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name>  =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"copy.filterchain.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>check</name>  =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"expected/copy.filterset.filtered"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>tmp</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSingleFileFileset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test_single_file_fileset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name>  =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>,
                                        <argument><expr>"copytest_single_file_fileset.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSingleFilePath</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test_single_file_path"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name>  =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>,
                                        <argument><expr>"copytest_single_file_path.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTranscoding</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testTranscoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f1</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"copy/expected/utf-8"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f2</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"copytest1.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMissingFileIgnore</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testMissingFileIgnore"</expr></argument>,
                            <argument><expr>"Warning: Could not find file "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMissingFileBail</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testMissingFileBail"</expr></argument>, <argument><expr>"not-there doesn't exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>getBuildException</name><argument_list>()</argument_list></call>.<call><name>getMessage</name><argument_list>()</argument_list></call>
                   .<call><name>startsWith</name><argument_list>(<argument><expr>"Warning: Could not find file "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMissingDirIgnore</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testMissingDirIgnore"</expr></argument>, <argument><expr>"Warning: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMissingDirBail</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testMissingDirBail"</expr></argument>, <argument><expr>"not-there doesn't exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>getBuildException</name><argument_list>()</argument_list></call>.<call><name>getMessage</name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>" does not exist."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileResourcePlain</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFileResourcePlain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file1</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file1.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file2</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file2.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file3</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file3.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file1</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file2</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>_testFileResourceWithMapper</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFileResourceWithMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file1</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file1.txt.bak"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file2</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file2.txt.bak"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file3</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file3.txt.bak"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file1</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file2</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileResourceWithFilter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFileResourceWithFilter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file1</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/fileNR.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file1</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>file1Content</name> =<init> <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr>new <call><name>FileReader</name><argument_list>(<argument><expr><name>file1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"This is file 42"</expr></argument>, <argument><expr><name>file1Content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// no-op: not a real business error</comment>
        }</block></catch></try>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPathAsResource</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testPathAsResource"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file1</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file1.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file2</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file2.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file3</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file3.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file1</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file2</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testZipfileset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testZipfileset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file1</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file1.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file2</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file2.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file3</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"to.dir"</expr></argument>)</argument_list></call>+"/file3.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file1</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file2</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>file3</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDirset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDirset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>_testResourcePlain</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testResourcePlain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>_testResourcePlainWithMapper</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testResourcePlainWithMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>_testResourcePlainWithFilter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testResourcePlainWithFilter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>_testOnlineResources</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testOnlineResources"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
