<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\util\DeweyDecimalTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>.*;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>("ResultOfObjectAllocationIgnored")</argument_list></annotation>
<specifier>public</specifier> class <name>DeweyDecimalTest</name> <block>{

    <function><type><annotation>@<name>Test</name></annotation> <specifier>public</specifier> <name>void</name></type> <name>parse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>, <argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected=NumberFormatException.class)</argument_list></annotation> <specifier>public</specifier> <name>void</name></type> <name>misparseEmpty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1..2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected=NumberFormatException.class)</argument_list></annotation> <specifier>public</specifier> <name>void</name></type> <name>misparseNonNumeric</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3-beta-5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected=NumberFormatException.class)</argument_list></annotation> <specifier>public</specifier> <name>void</name></type> <name>misparseFinalDot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// TODO initial dots, empty string, null, negative numbers, ...</comment>

    <function><type><annotation>@<name>Test</name></annotation> <specifier>public</specifier> <name>void</name></type> <name>testHashCode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation> <specifier>public</specifier> <name>void</name></type> <name>testEquals</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.0"</expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2"</expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.0"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation> <specifier>public</specifier> <name>void</name></type> <name>compareTo</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2"</expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.1.4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.3"</expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.2.9"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.0"</expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2"</expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr>"1.2.0"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// TODO isGreaterThan, ...</comment>

}</block></class>
</unit>
