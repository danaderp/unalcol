<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\zip\UTF8ZipFilesTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>CRC32</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<class><specifier>public</specifier> class <name>UTF8ZipFilesTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UTF_8</name> =<init> <expr>"utf-8"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CP437</name> =<init> <expr>"cp437"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>US_ASCII</name> =<init> <expr>"US-ASCII"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ASCII_TXT</name> =<init> <expr>"ascii.txt"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EURO_FOR_DOLLAR_TXT</name> =<init> <expr>"\u20AC_for_Dollar.txt"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OIL_BARREL_TXT</name> =<init> <expr>"\u00D6lf\u00E4sser.txt"</expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUtf8FileRoundtripExplicitUnicodeExtra</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testFileRoundtrip</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUtf8FileRoundtripNoEFSExplicitUnicodeExtra</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testFileRoundtrip</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCP437FileRoundtripExplicitUnicodeExtra</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testFileRoundtrip</name><argument_list>(<argument><expr><name>CP437</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testASCIIFileRoundtripExplicitUnicodeExtra</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testFileRoundtrip</name><argument_list>(<argument><expr><name>US_ASCII</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUtf8FileRoundtripImplicitUnicodeExtra</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testFileRoundtrip</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUtf8FileRoundtripNoEFSImplicitUnicodeExtra</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testFileRoundtrip</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCP437FileRoundtripImplicitUnicodeExtra</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testFileRoundtrip</name><argument_list>(<argument><expr><name>CP437</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testASCIIFileRoundtripImplicitUnicodeExtra</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testFileRoundtrip</name><argument_list>(<argument><expr><name>US_ASCII</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testZipFileReadsUnicodeFields</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"unicode-test"</expr></argument>, <argument><expr>".zip"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>createTestFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>US_ASCII</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>zf</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>US_ASCII</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertCanRead</name><argument_list>(<argument><expr><name>zf</name></expr></argument>, <argument><expr><name>ASCII_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertCanRead</name><argument_list>(<argument><expr><name>zf</name></expr></argument>, <argument><expr><name>EURO_FOR_DOLLAR_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertCanRead</name><argument_list>(<argument><expr><name>zf</name></expr></argument>, <argument><expr><name>OIL_BARREL_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>ZipFile</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>file</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>testFileRoundtrip</name><parameter_list>(<param><decl><type><name>String</name></type> <name>encoding</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>withEFS</name></decl></param>,
                                          <param><decl><type><name>boolean</name></type> <name>withExplicitUnicodeExtra</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr><name>encoding</name> + "-test"</expr></argument>, <argument><expr>".zip"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>createTestFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>withEFS</name></expr></argument>, <argument><expr><name>withExplicitUnicodeExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>file</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>createTestFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>String</name></type> <name>encoding</name></decl></param>,
                                       <param><decl><type><name>boolean</name></type> <name>withEFS</name></decl></param>,
                                       <param><decl><type><name>boolean</name></type> <name>withExplicitUnicodeExtra</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>ZipEncoding</name></type> <name>zipEncoding</name> =<init> <expr><call><name><name>ZipEncodingHelper</name>.<name>getZipEncoding</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ZipOutputStream</name></type> <name>zos</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>zos</name> = new <call><name>ZipOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zos</name>.<name>setEncoding</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zos</name>.<name>setUseLanguageEncodingFlag</name></name><argument_list>(<argument><expr><name>withEFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zos</name>.<name>setCreateUnicodeExtraFields</name></name><argument_list>(<argument><expr><name>withExplicitUnicodeExtra</name> ? 
                                            <name><name>ZipOutputStream</name>
                                            .<name>UnicodeExtraFieldPolicy</name>.<name>NEVER</name></name>
                                            : <name><name>ZipOutputStream</name>
                                            .<name>UnicodeExtraFieldPolicy</name>.<name>ALWAYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr><name>OIL_BARREL_TXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>withExplicitUnicodeExtra</name>
                &amp;&amp; !<call><name><name>zipEncoding</name>.<name>canEncode</name></name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>en</name> =<init> <expr><call><name><name>zipEncoding</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>ze</name>.<name>addExtraField</name></name><argument_list>(<argument><expr>new <call><name>UnicodePathExtraField</name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>en</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>en</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>en</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>zos</name>.<name>putNextEntry</name></name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zos</name>.<name>write</name></name><argument_list>(<argument><expr>"Hello, world!".<call><name>getBytes</name><argument_list>(<argument><expr>"US-ASCII"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zos</name>.<name>closeEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ze</name> = new <call><name>ZipEntry</name><argument_list>(<argument><expr><name>EURO_FOR_DOLLAR_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>withExplicitUnicodeExtra</name>
                &amp;&amp; !<call><name><name>zipEncoding</name>.<name>canEncode</name></name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>en</name> =<init> <expr><call><name><name>zipEncoding</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>ze</name>.<name>addExtraField</name></name><argument_list>(<argument><expr>new <call><name>UnicodePathExtraField</name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>en</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>en</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>en</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>zos</name>.<name>putNextEntry</name></name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zos</name>.<name>write</name></name><argument_list>(<argument><expr>"Give me your money!".<call><name>getBytes</name><argument_list>(<argument><expr>"US-ASCII"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zos</name>.<name>closeEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ze</name> = new <call><name>ZipEntry</name><argument_list>(<argument><expr><name>ASCII_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>withExplicitUnicodeExtra</name>
                &amp;&amp; !<call><name><name>zipEncoding</name>.<name>canEncode</name></name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>en</name> =<init> <expr><call><name><name>zipEncoding</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>ze</name>.<name>addExtraField</name></name><argument_list>(<argument><expr>new <call><name>UnicodePathExtraField</name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>en</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>en</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>en</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>zos</name>.<name>putNextEntry</name></name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zos</name>.<name>write</name></name><argument_list>(<argument><expr>"ascii".<call><name>getBytes</name><argument_list>(<argument><expr>"US-ASCII"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zos</name>.<name>closeEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>zos</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>zos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{ <comment type="block">/* swallow */</comment> }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>testFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>zf</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>zf</name>.<name>getEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr>(<name>ZipEntry</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>"sser.txt"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>assertUnicodeName</name><argument_list>(<argument><expr><name>ze</name></expr></argument>, <argument><expr><name>OIL_BARREL_TXT</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>"_for_Dollar.txt"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>assertUnicodeName</name><argument_list>(<argument><expr><name>ze</name></expr></argument>, <argument><expr><name>EURO_FOR_DOLLAR_TXT</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>ASCII_TXT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr>"Urecognized ZIP entry with name ["
                                             + <call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call> + "] found."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if></else></if></else></if>
            }</block></while>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>ZipFile</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>UnicodePathExtraField</name></type> <name>findUniCodePath</name><parameter_list>(<param><decl><type><name>ZipEntry</name></type> <name>ze</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>UnicodePathExtraField</name>)
            <call><name><name>ze</name>.<name>getExtraField</name></name><argument_list>(<argument><expr><name><name>UnicodePathExtraField</name>.<name>UPATH_ID</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertUnicodeName</name><parameter_list>(<param><decl><type><name>ZipEntry</name></type> <name>ze</name></decl></param>,
                                          <param><decl><type><name>String</name></type> <name>expectedName</name></decl></param>,
                                          <param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name><name>expectedName</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>UnicodePathExtraField</name></type> <name>ucpf</name> =<init> <expr><call><name>findUniCodePath</name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>ucpf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ZipEncoding</name></type> <name>enc</name> =<init> <expr><call><name><name>ZipEncodingHelper</name>.<name>getZipEncoding</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>ne</name> =<init> <expr><call><name><name>enc</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>CRC32</name></type> <name>crc</name> =<init> <expr>new <call><name>CRC32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>crc</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>ne</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>ne</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>ne</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>crc</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ucpf</name>.<name>getNameCRC32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedName</name></expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>ucpf</name>.<name>getUnicodeName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertCanRead</name><parameter_list>(<param><decl><type><name>ZipFile</name></type> <name>zf</name></decl></param>, <param><decl><type><name>String</name></type> <name>fileName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>entry</name> =<init> <expr><call><name><name>zf</name>.<name>getEntry</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Entry " + <name>fileName</name> + " doesn't exist"</expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><call><name><name>zf</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"InputStream is null"</expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>is</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>is</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

}</block></class>

</unit>
