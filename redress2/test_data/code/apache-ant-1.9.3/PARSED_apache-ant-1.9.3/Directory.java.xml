<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ssh\Directory.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ssh</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<comment type="javadoc">/**
 * A helper object for Scp representing a directory in a file system.
 */</comment>
<class><specifier>public</specifier> class <name>Directory</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>directory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Set</name></type> <name>childDirectories</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ArrayList</name></type> <name>files</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Directory</name></type> <name>parent</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for a Directory.
     * @param directory a directory.
     */</comment>
    <constructor><specifier>public</specifier> <name>Directory</name><parameter_list>(<param><decl><type><name>File</name></type> <name>directory</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>directory</name></expr></argument>,  <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a Directory.
     * @param directory a directory
     * @param parent    a parent Directory
     */</comment>
    <constructor><specifier>public</specifier> <name>Directory</name><parameter_list>(<param><decl><type><name>File</name></type> <name>directory</name></decl></param> , <param><decl><type><name>Directory</name></type> <name>parent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>parent</name></name> = <name>parent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>childDirectories</name></name> = new <call><name>LinkedHashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>files</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>directory</name></name> = <name>directory</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Add a directory to the child directories.
     * @param directory a Directory
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDirectory</name><parameter_list>(<param><decl><type><name>Directory</name></type> <name>directory</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>childDirectories</name>.<name>contains</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>childDirectories</name>.<name>add</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Add a file to the list of files.
     * @param file a file to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>files</name>.<name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get an iterator over the child Directories.
     * @return an iterator
     */</comment>
    <function><type><specifier>public</specifier> <name>Iterator</name></type> <name>directoryIterator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>childDirectories</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an iterator over the files.
     * @return an iterator
     */</comment>
    <function><type><specifier>public</specifier> <name>Iterator</name></type> <name>filesIterator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>files</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the parent Directory.
     * @return the parent Directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>Directory</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>parent</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Is this a root Directory?
     * @return true if there is no parent Directory
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRoot</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>parent</name> == <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the directory file.
     * @return the directory file
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getDirectory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>directory</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get a child directory of this directory.
     * @param dir the directory to look for
     * @return the child directory, or null if not found
     */</comment>
    <function><type><specifier>public</specifier> <name>Directory</name></type> <name>getChild</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>childDirectories</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>) <block>{
            <decl_stmt><decl><type><name>Directory</name></type> <name>current</name> =<init> <expr>(<name>Directory</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>current</name>.<name>getDirectory</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>current</name></expr>;</return>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The equality method.
     * This checks if the directory field is the same.
     * @param obj the object to compare to
     * @return true if this object has an equal directory field as the other object
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>Directory</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Directory</name></type> <name>d</name> =<init> <expr>(<name>Directory</name>) <name>obj</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>this</name>.<name>directory</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>d</name>.<name>directory</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The hashcode method.
     * @return the hash code of the directory field
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>directory</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the path components of this directory.
     * @return the path components as an array of strings.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getPath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getPath</name><argument_list>(<argument><expr><call><name><name>directory</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convert a file path to an array of path components.
     * This uses File.separator to split the file path string.
     * @param thePath the file path string to convert
     * @return an array of path components
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name><index>[]</index></type> <name>getPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>thePath</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokenizer</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>thePath</name></expr></argument>,
                <argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>path</name> =<init> <expr>new <name><name>String</name><index>[ <expr><call><name><name>tokenizer</name>.<name>countTokens</name></name><argument_list>()</argument_list></call></expr> ]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tokenizer</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>path</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the number of files in the files attribute.
     * @return the number of files
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>fileSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
