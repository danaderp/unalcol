<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\ResourceContains.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * &amp;lt;resourcecontains&amp;gt;
 * Is a string contained in a resource (file currently)?
 * @since Ant 1.7.1
 */</comment>
<class><specifier>public</specifier> class <name>ResourceContains</name> <super><implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>substring</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resource</name></type> <name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>refid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>casesensitive</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set this condition's Project.
     * @param project Project
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get this condition's Project.
     * @return Project
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the resource to search
     * @param r the value to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>resource</name></name> = new <call><name>FileResource</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the refid to search; should indicate a resource directly
     * or by way of a single-element ResourceCollection.
     * @param refid the value to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>String</name></type> <name>refid</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>refid</name></name> = <name>refid</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>resolveRefid</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot retrieve refid; project unset"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr><name>refid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!(<name>o</name> <name>instanceof</name> <name>Resource</name>)</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>ResourceCollection</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>ResourceCollection</name></type> <name>rc</name> =<init> <expr>(<name>ResourceCollection</name>) <name>o</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>rc</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>o</name> = <call><name><name>rc</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                        <argument><expr>"Illegal value at '" + <name>refid</name> + "': " + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><name><name>this</name>.<name>resource</name></name> = (<name>Resource</name>) <name>o</name></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>refid</name> = <name>null</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the substring to look for
     * @param substring the value to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubstring</name><parameter_list>(<param><decl><type><name>String</name></type> <name>substring</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>substring</name></name> = <name>substring</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets case sensitivity attribute.
     * @param casesensitive the value to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCasesensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>casesensitive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>casesensitive</name></name> = <name>casesensitive</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>resource</name> != <name>null</name> &amp;&amp; <name>refid</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot set both resource and refid"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>resource</name> == <name>null</name> &amp;&amp; <name>refid</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>resolveRefid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>resource</name> == <name>null</name> || <name>substring</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"both resource and substring are required "
                                     + "in &lt;resourcecontains&gt;"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluates the condition.
     * @return true if the substring is contained in the resource
     * @throws BuildException if there is a problem.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>substring</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Substring is empty; returning true"</expr></argument>,
                                 <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>resource</name>.<name>getSize</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>reader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>reader</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>resource</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name><name>FileUtils</name>.<name>safeReadFully</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>sub</name> =<init> <expr><name>substring</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>casesensitive</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>contents</name> = <call><name><name>contents</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sub</name> = <call><name><name>sub</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name><name>contents</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"There was a problem accessing resource : " + <name>resource</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
