<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\selectors\DifferentSelector.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<comment type="javadoc">/**
 * This selector selects files against a mapped set of target files, selecting
 * all those files which are different.
 * Files with different lengths are deemed different
 * automatically
 * Files with identical timestamps are viewed as matching by
 * default, unless you specify otherwise.
 * Contents are compared if the lengths are the same
 * and the timestamps are ignored or the same,
 * except if you decide to ignore contents to gain speed.
 * &lt;p&gt;
 * This is a useful selector to work with programs and tasks that don't handle
 * dependency checking properly; Even if a predecessor task always creates its
 * output files, followup tasks can be driven off copies made with a different
 * selector, so their dependencies are driven on the absolute state of the
 * files, not a timestamp.
 * &lt;p&gt;
 * Clearly, however, bulk file comparisons is inefficient; anything that can
 * use timestamps is to be preferred. If this selector must be used, use it
 * over as few files as possible, perhaps following it with an &amp;lt;uptodate;&amp;gt
 * to keep the descendant routines conditional.
 *
 */</comment>
<class><specifier>public</specifier> class <name>DifferentSelector</name> <super><extends>extends <name>MappingSelector</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreFileTimes</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreContents</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * This flag tells the selector to ignore file times in the comparison
     * @param ignoreFileTimes if true ignore file times
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreFileTimes</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ignoreFileTimes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ignoreFileTimes</name></name> = <name>ignoreFileTimes</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * This flag tells the selector to ignore contents
     * @param ignoreContents if true ignore contents
     * @since ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreContents</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ignoreContents</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ignoreContents</name></name> = <name>ignoreContents</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * this test is our selection test that compared the file with the destfile
     * @param srcfile the source file
     * @param destfile the destination file
     * @return true if the files are different
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>selectionTest</name><parameter_list>(<param><decl><type><name>File</name></type> <name>srcfile</name></decl></param>, <param><decl><type><name>File</name></type> <name>destfile</name></decl></param>)</parameter_list> <block>{

        <comment type="line">//if either of them is missing, they are different</comment>
        <if>if <condition>(<expr><call><name><name>srcfile</name>.<name>exists</name></name><argument_list>()</argument_list></call> != <call><name><name>destfile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>srcfile</name>.<name>length</name></name><argument_list>()</argument_list></call> != <call><name><name>destfile</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// different size =&gt;different files</comment>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<name>ignoreFileTimes</name></expr>)</condition><then> <block>{
            <comment type="line">//same date if dest timestamp is within granularity of the srcfile</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>sameDate</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>sameDate</name> = <call><name><name>destfile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>srcfile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> - <name>granularity</name>
                    &amp;&amp; <call><name><name>destfile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &lt;= <call><name><name>srcfile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> + <name>granularity</name></expr>;</expr_stmt>

            <comment type="line">// different dates =&gt; different files</comment>
            <if>if <condition>(<expr>!<name>sameDate</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>ignoreContents</name></expr>)</condition><then> <block>{
            <comment type="line">//here do a bulk comparison</comment>
            <try>try <block>{
                <return>return <expr>!<call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr><name>srcfile</name></expr></argument>, <argument><expr><name>destfile</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"while comparing " + <name>srcfile</name> + " and "
                        + <name>destfile</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <return>return <expr>false</expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
