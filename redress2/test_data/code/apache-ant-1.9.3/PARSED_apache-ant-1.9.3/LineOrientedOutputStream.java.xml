<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\LineOrientedOutputStream.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Invokes {@link #processLine processLine} whenever a full line has
 * been written to this stream.
 *
 * &lt;p&gt;Tries to be smart about line separators.&lt;/p&gt;
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>LineOrientedOutputStream</name> <super><extends>extends <name>OutputStream</name></extends></super> <block>{

    <comment type="javadoc">/** Initial buffer size. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTIAL_SIZE</name> =<init> <expr>132</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Carriage return */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CR</name> =<init> <expr>0x0d</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Linefeed */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LF</name> =<init> <expr>0x0a</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ByteArrayOutputStream</name></type> <name>buffer</name>
        =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>(<argument><expr><name>INTIAL_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>skip</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Write the data to the buffer and flush the buffer, if a line
     * separator is detected.
     *
     * @param cc data to log (byte).
     * @throws IOException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>int</name></type> <name>cc</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name>c</name> =<init> <expr>(<name>byte</name>) <name>cc</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name>c</name> == <name>LF</name>) || (<name>c</name> == <name>CR</name>)</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>skip</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name>processBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>skip</name> = (<name>c</name> == <name>CR</name>)</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Flush this log stream
     * @throws IOException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * Converts the buffer to a byte[] and sends it to
     * &lt;code&gt;processLine&lt;/code&gt;
     * @throws IOException if there is an error.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>processBuffer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>processLine</name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>buffer</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Processes a line.
     *
     * @param line the line to log.
     * @throws IOException if there is an error.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>processLine</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Processes a line.
     *
     * &lt;p&gt;This implementations invokes the string-arg version
     * converting the byte array using the default encoding.
     * Subclasses are encouraged to override this method (and provide
     * a dummy implementation of the String-arg version) so they don't
     * interfere with the encoding of the underlying stream.&lt;/p&gt;
     *
     * @param line the line to log.
     * @throws IOException if there is an error.
     * @since Ant 1.8.3
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>processLine</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>line</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>processLine</name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Writes all remaining
     * @throws IOException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>buffer</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>processBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write a block of characters to the output stream
     *
     * @param b the array containing the data
     * @param off the offset into the array where data starts
     * @param len the length of block
     *
     * @throws IOException if the data cannot be written into the stream.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>off</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// find the line breaks and pass other chars through in blocks</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> =<init> <expr><name>off</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>blockStartOffset</name> =<init> <expr><name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>remaining</name> =<init> <expr><name>len</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>remaining</name> &gt; 0</expr>)</condition> <block>{
            <while>while <condition>(<expr><name>remaining</name> &gt; 0 &amp;&amp; <name><name>b</name><index>[<expr><name>offset</name></expr>]</index></name> != <name>LF</name> &amp;&amp; <name><name>b</name><index>[<expr><name>offset</name></expr>]</index></name> != <name>CR</name></expr>)</condition> <block>{
                <expr_stmt><expr><name>offset</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>remaining</name>--</expr>;</expr_stmt>
            }</block></while>
            <comment type="line">// either end of buffer or a line separator char</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>blockLength</name> =<init> <expr><name>offset</name> - <name>blockStartOffset</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>blockLength</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>blockStartOffset</name></expr></argument>, <argument><expr><name>blockLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <while>while <condition>(<expr><name>remaining</name> &gt; 0 &amp;&amp; (<name><name>b</name><index>[<expr><name>offset</name></expr>]</index></name> == <name>LF</name> || <name><name>b</name><index>[<expr><name>offset</name></expr>]</index></name> == <name>CR</name>)</expr>)</condition> <block>{
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>offset</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>remaining</name>--</expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>blockStartOffset</name> = <name>offset</name></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

}</block></class>
</unit>
