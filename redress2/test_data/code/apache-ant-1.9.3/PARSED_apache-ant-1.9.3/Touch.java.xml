<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Touch.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileList</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Touchable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>

<comment type="javadoc">/**
 * Touch a file and/or fileset(s) and/or filelist(s);
 * corresponds to the Unix touch command.
 *
 * &lt;p&gt;If the file to touch doesn't exist, an empty one is created.&lt;/p&gt;
 *
 * @since Ant 1.1
 *
 * @ant.task category="filesystem"
 */</comment>
<class><specifier>public</specifier> class <name>Touch</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <class type="interface"><specifier>public</specifier> interface <name>DateFormatFactory</name> <block>{
        <function_decl><type><name>DateFormat</name></type> <name>getPrimaryFormat</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><name>DateFormat</name></type> <name>getFallbackFormat</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DateFormatFactory</name></type> <name>DEFAULT_DF_FACTORY</name>
        =<init> <expr>new <class><super><name>DateFormatFactory</name></super><argument_list>()</argument_list> <block>{
        <comment type="block">/*
         * The initial version used DateFormat.SHORT for the
         * time format, which ignores seconds.  If we want
         * seconds as well, we need DateFormat.MEDIUM, which
         * in turn would break all old build files.
         *
         * First try to parse with DateFormat.SHORT and if
         * that fails with MEDIUM - throw an exception if both
         * fail.
         */</comment>
        <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getPrimaryFormat</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>DateFormat</name>.<name>getDateTimeInstance</name></name><argument_list>(<argument><expr><name><name>DateFormat</name>.<name>SHORT</name></name></expr></argument>,
                <argument><expr><name><name>DateFormat</name>.<name>SHORT</name></name></expr></argument>, <argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getFallbackFormat</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>DateFormat</name>.<name>getDateTimeInstance</name></name><argument_list>(<argument><expr><name><name>DateFormat</name>.<name>SHORT</name></name></expr></argument>,
                <argument><expr><name><name>DateFormat</name>.<name>MEDIUM</name></name></expr></argument>, <argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>millis</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>dateTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>filesets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Union</name></type> <name>resources</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>dateTimeConfigured</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mkdirs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FileNameMapper</name></type> <name>fileNameMapper</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateFormatFactory</name></type> <name>dfFactory</name> =<init> <expr><name>DEFAULT_DF_FACTORY</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a new &lt;code&gt;Touch&lt;/code&gt; task.
     */</comment>
    <constructor><specifier>public</specifier> <name>Touch</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets a single source file to touch.  If the file does not exist
     * an empty file will be created.
     * @param file the &lt;code&gt;File&lt;/code&gt; to touch.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the new modification time of file(s) touched
     * in milliseconds since midnight Jan 1 1970. Optional, default=now.
     * @param millis the &lt;code&gt;long&lt;/code&gt; timestamp to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMillis</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>millis</name></name> = <name>millis</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the new modification time of file(s) touched
     * in the format &amp;quot;MM/DD/YYYY HH:MM AM &lt;i&gt;or&lt;/i&gt; PM&amp;quot;
     * or &amp;quot;MM/DD/YYYY HH:MM:SS AM &lt;i&gt;or&lt;/i&gt; PM&amp;quot;.
     * Optional, default=now.
     * @param dateTime the &lt;code&gt;String&lt;/code&gt; date in the specified format.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDatetime</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dateTime</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>dateTime</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Resetting datetime attribute to " + <name>dateTime</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>dateTime</name></name> = <name>dateTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dateTimeConfigured</name> = false</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether nonexistent parent directories should be created
     * when touching new files.
     * @param mkdirs &lt;code&gt;boolean&lt;/code&gt; whether to create parent directories.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMkdirs</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>mkdirs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>mkdirs</name></name> = <name>mkdirs</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether the touch task will report every file it creates;
     * defaults to &lt;code&gt;true&lt;/code&gt;.
     * @param verbose &lt;code&gt;boolean&lt;/code&gt; flag.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>verbose</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the format of the datetime attribute.
     * @param pattern the &lt;code&gt;SimpleDateFormat&lt;/code&gt;-compatible format pattern.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>dfFactory</name> = new <class><super><name>DateFormatFactory</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getPrimaryFormat</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
            <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getFallbackFormat</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &lt;code&gt;Mapper&lt;/code&gt;.
     * @param mapper the &lt;code&gt;Mapper&lt;/code&gt; to add.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredMapper</name><parameter_list>(<param><decl><type><name>Mapper</name></type> <name>mapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>mapper</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &lt;code&gt;FileNameMapper&lt;/code&gt;.
     * @param fileNameMapper the &lt;code&gt;FileNameMapper&lt;/code&gt; to add.
     * @since Ant 1.6.3
     * @throws BuildException if multiple mappers are added.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>fileNameMapper</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one mapper may be added to the "
                + <call><name>getTaskName</name><argument_list>()</argument_list></call> + " task."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>fileNameMapper</name></name> = <name>fileNameMapper</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a set of files to touch.
     * @param set the &lt;code&gt;Fileset&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filesets</name>.<name>add</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a filelist to touch.
     * @param list the &lt;code&gt;Filelist&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilelist</name><parameter_list>(<param><decl><type><name>FileList</name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a collection of resources to touch.
     * @param rc the collection to add.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>resources</name> = <name>resources</name> == <name>null</name> ? new <call><name>Union</name><argument_list>()</argument_list></call> : <name>resources</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resources</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Check that this task has been configured properly.
     * @throws BuildException if configuration errors are detected.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>checkConfiguration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>file</name> == <name>null</name> &amp;&amp; <name>resources</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Specify at least one source"
                                   + "--a file or resource collection."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>file</name> != <name>null</name> &amp;&amp; <call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Use a resource collection to touch directories."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>dateTime</name> != <name>null</name> &amp;&amp; !<name>dateTimeConfigured</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>workmillis</name> =<init> <expr><name>millis</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>"now".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>workmillis</name> = <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>DateFormat</name></type> <name>df</name> =<init> <expr><call><name><name>dfFactory</name>.<name>getPrimaryFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ParseException</name></type> <name>pe</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>workmillis</name> = <call><name><name>df</name>.<name>parse</name></name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>peOne</name></decl></param>) <block>{
                    <expr_stmt><expr><name>df</name> = <call><name><name>dfFactory</name>.<name>getFallbackFormat</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>df</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>pe</name> = <name>peOne</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <try>try <block>{
                            <expr_stmt><expr><name>workmillis</name> = <call><name><name>df</name>.<name>parse</name></name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>peTwo</name></decl></param>) <block>{
                            <expr_stmt><expr><name>pe</name> = <name>peTwo</name></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></else></if>
                }</block></catch></try>
                <if>if <condition>(<expr><name>pe</name> != <name>null</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>pe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <if>if <condition>(<expr><name>workmillis</name> &lt; 0</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Date of " + <name>dateTime</name>
                            + " results in negative " + "milliseconds value "
                            + "relative to epoch " + "(January 1, 1970, "
                            + "00:00:00 GMT)."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></else></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Setting millis to " + <name>workmillis</name> + " from datetime attribute"</expr></argument>,
                    <argument><expr>((<name>millis</name> &lt; 0) ? <name><name>Project</name>.<name>MSG_DEBUG</name></name> : <name><name>Project</name>.<name>MSG_VERBOSE</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setMillis</name><argument_list>(<argument><expr><name>workmillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// only set if successful to this point:</comment>
            <expr_stmt><expr><name>dateTimeConfigured</name> = true</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the touch operation.
     *
     * @throws BuildException
     *             if an error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>touch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Does the actual work; assumes everything has been checked by now.
     * @throws BuildException if an error occurs.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>touch</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>defaultTimestamp</name> =<init> <expr><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name>defaultTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>resources</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <comment type="line">// deal with the resource collections</comment>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resources</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>Touchable</name></type> <name>t</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>Touchable</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>t</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Can't touch " + <name>r</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>defaultTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// deal with filesets in a special way since the task</comment>
        <comment type="line">// originally also used the directories and Union won't return</comment>
        <comment type="line">// them.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>(<name>FileSet</name>) <call><name><name>filesets</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr><call><name><name>fs</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>fromDir</name> =<init> <expr><call><name><name>fs</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>srcDirs</name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>srcDirs</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>fromDir</name></expr></argument>, <argument><expr><name><name>srcDirs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>defaultTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Touch a single file with the current timestamp (this.millis). This method
     * does not interact with any nested mappers and remains for reasons of
     * backwards-compatibility only.
     * @param file file to touch
     * @throws BuildException on error
     * @deprecated since 1.6.x.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>touch</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>getTimestamp</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>millis</name> &lt; 0) ? <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> : <name>millis</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>touch</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>, <param><decl><type><name>long</name></type> <name>defaultTimestamp</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>fileNameMapper</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>FileProvider</name></type> <name>fp</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fp</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// use this to create file and deal with non-writable files</comment>
                <expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><call><name><name>fp</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>defaultTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>Touchable</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>.<call><name>touch</name><argument_list>(<argument><expr><name>defaultTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>mapped</name> =<init> <expr><call><name><name>fileNameMapper</name>.<name>mapFileName</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mapped</name> != <name>null</name> &amp;&amp; <name><name>mapped</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>modTime</name> =<init> <expr><name>defaultTimestamp</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>millis</name> &lt; 0 &amp;&amp; <call><name><name>r</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>modTime</name> = <call><name><name>r</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>mapped</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name><name>mapped</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>modTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>touch</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>long</name></type> <name>modTime</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Creating " + <name>file</name></expr></argument>,
                <argument><expr>((<name>verbose</name>) ? <name><name>Project</name>.<name>MSG_INFO</name></name> : <name><name>Project</name>.<name>MSG_VERBOSE</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>createNewFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>mkdirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not create " + <name>file</name></expr></argument>, <argument><expr><name>ioe</name></expr></argument>,
                                         <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>file</name>.<name>canWrite</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Can not change modification date of "
                                     + "read-only file " + <name>file</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>setFileLastModified</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>modTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
