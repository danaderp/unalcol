<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\Location.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>Locator</name></name>;</import>

<comment type="javadoc">/**
 * Stores the location of a piece of text within a file (file name,
 * line number and column number). Note that the column number is
 * currently ignored.
 *
 */</comment>
<class><specifier>public</specifier> class <name>Location</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Name of the file. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>fileName</name></decl>;</decl_stmt>
    <comment type="javadoc">/** Line number within the file. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>lineNumber</name></decl>;</decl_stmt>
    <comment type="javadoc">/** Column number within the file. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>columnNumber</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Location to use when one is needed but no information is available */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Location</name></type> <name>UNKNOWN_LOCATION</name> =<init> <expr>new <call><name>Location</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an "unknown" location.
     */</comment>
    <constructor><specifier>private</specifier> <name>Location</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a location consisting of a file name but no line number or
     * column number.
     *
     * @param fileName The name of the file. May be &lt;code&gt;null&lt;/code&gt;,
     *                 in which case the location is equivalent to
     *                 {@link #UNKNOWN_LOCATION UNKNOWN_LOCATION}.
     */</comment>
    <constructor><specifier>public</specifier> <name>Location</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a location from the SAX locator using the system ID as
     * the filename.
     *
     * @param loc Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @since Ant 1.6
     */</comment>
    <constructor><specifier>public</specifier> <name>Location</name><parameter_list>(<param><decl><type><name>Locator</name></type> <name>loc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>loc</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>loc</name>.<name>getLineNumber</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>loc</name>.<name>getColumnNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a location consisting of a file name, line number and
     * column number.
     *
     * @param fileName The name of the file. May be &lt;code&gt;null&lt;/code&gt;,
     *                 in which case the location is equivalent to
     *                 {@link #UNKNOWN_LOCATION UNKNOWN_LOCATION}.
     *
     * @param lineNumber Line number within the file. Use 0 for unknown
     *                   positions within a file.
     * @param columnNumber Column number within the line.
     */</comment>
    <constructor><specifier>public</specifier> <name>Location</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineNumber</name></decl></param>, <param><decl><type><name>int</name></type> <name>columnNumber</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>fileName</name> != <name>null</name> &amp;&amp; <call><name><name>fileName</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"file:"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>fileName</name></name> = <call><name><name>FILE_UTILS</name>.<name>fromURI</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>fileName</name></name> = <name>fileName</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>this</name>.<name>lineNumber</name></name> = <name>lineNumber</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columnNumber</name></name> = <name>columnNumber</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @return the filename portion of the location
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFileName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>fileName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the line number
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLineNumber</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>lineNumber</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the column number
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnNumber</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>columnNumber</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the file name, line number, a colon and a trailing space.
     * An error message can be appended easily. For unknown locations, an
     * empty string is returned.
     *
     * @return a String of the form &lt;code&gt;"fileName:lineNumber: "&lt;/code&gt;
     *         if both file name and line number are known,
     *         &lt;code&gt;"fileName: "&lt;/code&gt; if only the file name is known,
     *         and the empty string for unknown locations.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>fileName</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>lineNumber</name> != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>lineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>": "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Equality operation.
     * @param other the object to compare to.
     * @return true if the other object contains the same information
     *              as this object.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>other</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>other</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<call><name><name>other</name>.<name>getClass</name></name><argument_list>()</argument_list></call> == <call><name>getClass</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>toString</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Hash operation.
     * @return a hash code value for this location.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>toString</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
