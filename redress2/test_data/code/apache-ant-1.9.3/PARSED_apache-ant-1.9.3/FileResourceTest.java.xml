<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\resources\FileResourceTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * Test Java API of {@link FileResource}.
 */</comment>
<class><specifier>public</specifier> class <name>FileResourceTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>root</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>root</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAttributes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr>new <call><name>FileResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setBaseDir</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setName</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonImmediateBasedir</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr>new <call><name>FileResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setBaseDir</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setName</name></name><argument_list>(<argument><expr>"foo/bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo/bar"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo/bar"</expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBasedirAndName</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonImmediateBasedirAndName</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo/bar"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo/bar"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo/bar"</expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testProjectAndFilename</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr>new <call><name>Project</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setBaseDir</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRelativeFactoryResource</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileResource</name></type> <name>relative</name> =<init> <expr><call><name><name>f</name>.<name>getResource</name></name><argument_list>(<argument><expr>"bar"</expr></argument>)</argument_list></call>.<call><name>as</name><argument_list>(<argument><expr><name><name>FileResource</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo/bar"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>relative</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo/bar"</expr></argument>, <argument><expr><call><name><name>relative</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name><name>relative</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAbsoluteFactoryResource</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo/a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>bar</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"bar"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileResource</name></type> <name>fromFactory</name> =<init> <expr><call><name><name>f</name>.<name>getResource</name></name><argument_list>(<argument><expr><call><name><name>bar</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>as</name><argument_list>(<argument><expr><name><name>FileResource</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><call><name><name>fromFactory</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name><name>fromFactory</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParentSiblingFactoryResource</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo/a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileResource</name></type> <name>parentSibling</name> =<init> <expr><call><name><name>f</name>.<name>getResource</name></name><argument_list>(<argument><expr>"../../bar"</expr></argument>)</argument_list></call>.<call><name>as</name><argument_list>(<argument><expr><name><name>FileResource</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name><name>parentSibling</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bar"</expr></argument>, <argument><expr><call><name><name>parentSibling</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
