<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\TearDownOnVmCrash.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Formatter that doesn't create any output but tries to invoke the
 * tearDown method on a testcase if that test was forked and caused a
 * timeout or VM crash.
 *
 * &lt;p&gt;This formatter has some limitations, for details see the
 * &amp;lt;junit&amp;gt; task's manual.&lt;/p&gt;
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>TearDownOnVmCrash</name> <super><implements>implements <name>JUnitResultFormatter</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>suiteName</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Records the suite's name to later determine the class to invoke
     * tearDown on.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startTestSuite</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>JUnitTest</name></type> <name>suite</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>suiteName</name> = <call><name><name>suite</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>suiteName</name> != <name>null</name> &amp;&amp;
            <call><name><name>suiteName</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name><name>JUnitTask</name>.<name>NAME_OF_DUMMY_TEST</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// no way to know which class caused the timeout</comment>
            <expr_stmt><expr><name>suiteName</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Only invoke tearDown if the suite is known and not the dummy
     * test we get when a Batch fails and the error is an actual
     * error generated by Ant.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addError</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Test</name></type> <name>fakeTest</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>suiteName</name> != <name>null</name>
            &amp;&amp; <name>fakeTest</name> <name>instanceof</name> <name><name>JUnitTaskMirrorImpl</name>.<name>VmExitErrorTest</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>tearDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="line">// no need to implement the rest</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>AssertionFailedError</name></type> <name>t</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>startTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>endTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>endTestSuite</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>suite</name></decl></param>)</parameter_list> <block>{}</block></function>
	
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>out</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemError</name><parameter_list>(<param><decl><type><name>String</name></type> <name>err</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <comment type="line">// first try to load the class and let's hope it is on our</comment>
            <comment type="line">// classpath</comment>
            <decl_stmt><decl><type><name>Class</name></type> <name>testClass</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>getContextClassLoader</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><name>testClass</name> = <call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>getContextClassLoader</name><argument_list>()</argument_list></call>
                        .<call><name>loadClass</name><argument_list>(<argument><expr><name>suiteName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>testClass</name> == <name>null</name> &amp;&amp; <call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><name>testClass</name> =
                        <call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call>.<call><name>loadClass</name><argument_list>(<argument><expr><name>suiteName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>testClass</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// fall back to system classloader</comment>
                <expr_stmt><expr><name>testClass</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>suiteName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// if the test has a suite method, then we can't know</comment>
            <comment type="line">// which test of the executed suite timed out, ignore it</comment>
            <try>try <block>{
                <comment type="line">// check if there is a suite method</comment>
                <expr_stmt><expr><call><name><name>testClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"suite"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// no suite method</comment>
            }</block></catch></try>

            <comment type="line">// a loadable class and no suite method</comment>
            <comment type="line">// no reason to check for JUnit 4 since JUnit4TestAdapter</comment>
            <comment type="line">// doesn't have any tearDown method.</comment>

            <try>try <block>{
                <decl_stmt><decl><type><name>Method</name></type> <name>td</name> =<init> <expr><call><name><name>testClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"tearDown"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>td</name>.<name>getReturnType</name></name><argument_list>()</argument_list></call> == <name><name>Void</name>.<name>TYPE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>td</name>.<name>invoke</name></name><argument_list>(<argument><expr><call><name><name>testClass</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <name><name>Object</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>nsme</name></decl></param>) <block>{
                <comment type="line">// no tearDown, fine</comment>
            }</block></catch></try>

        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
            <comment type="line">// class probably is not in our classpath, there is</comment>
            <comment type="line">// nothing we can do</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>ite</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Caught an exception while trying to invoke"
                               + " tearDown: " + <call><name><name>ite</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Caught an exception while trying to invoke"
                               + " tearDown: " + <call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
