<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\clearcase\ClearCase.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>clearcase</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>ExecTask</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>LogStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>



<comment type="javadoc">/**
 * A base class for creating tasks for executing commands on ClearCase.
 * &lt;p&gt;
 * The class extends the 'exec' task as it operates by executing the cleartool program
 * supplied with ClearCase. By default the task expects the cleartool executable to be
 * in the path, * you can override this be specifying the cleartooldir attribute.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This class provides set and get methods for the 'viewpath' and 'objselect'
 * attribute. It also contains constants for the flags that can be passed to
 * cleartool.
 * &lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ClearCase</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mClearToolDir</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mviewPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mobjSelect</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>pcnt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mFailonerr</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Set the directory where the cleartool executable is located.
     *
     * @param dir the directory containing the cleartool executable
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setClearToolDir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mClearToolDir</name> = <call><name><name>FileUtils</name>.<name>translatePath</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Builds and returns the command string to execute cleartool
     *
     * @return String containing path to the executable
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>getClearToolCommand</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>toReturn</name> =<init> <expr><name>mClearToolDir</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>toReturn</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>toReturn</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>toReturn</name> += "/"</expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>toReturn</name> += <name>CLEARTOOL_EXE</name></expr>;</expr_stmt>

        <return>return <expr><name>toReturn</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the path to the item in a ClearCase view to operate on.
     *
     * @param viewPath Path to the view directory or file
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setViewPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>viewPath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mviewPath</name> = <name>viewPath</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the path to the item in a clearcase view
     *
     * @return mviewPath
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getViewPath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mviewPath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the basename path of the item in a clearcase view
     *
     * @return basename
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getViewPathBasename</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(new <call><name>File</name><argument_list>(<argument><expr><name>mviewPath</name></expr></argument>)</argument_list></call>).<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the object to operate on.
     *
     * @param objSelect object to operate on
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setObjSelect</name><parameter_list>(<param><decl><type><name>String</name></type> <name>objSelect</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mobjSelect</name> = <name>objSelect</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the object to operate on
     *
     * @return mobjSelect
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getObjSelect</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mobjSelect</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the given command are return success or failure
     * @param cmd command line to execute
     * @return the exit status of the subprocess or &lt;code&gt;INVALID&lt;/code&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>run</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Project</name></type> <name>aProj</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name>
                =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr>new <call><name>LogStreamHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><name>aProj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><call><name><name>aProj</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>IOException</name></name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the given command, and return it's output
     * @param cmdline command line to execute
     * @return output of the command line
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>runS</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmdline</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type>   <name>outV</name>  =<init> <expr>"opts.cc.runS.output" + <name>pcnt</name>++</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ExecTask</name></type> <name>exe</name>   =<init> <expr>new <call><name>ExecTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Commandline</name>.<name>Argument</name></name></type> <name>arg</name> =<init> <expr><call><name><name>exe</name>.<name>createArg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>exe</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name><name>cmdline</name>.<name>getExecutable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>arg</name>.<name>setLine</name></name><argument_list>(<argument><expr><call><name><name>Commandline</name>.<name>toString</name></name><argument_list>(<argument><expr><call><name><name>cmdline</name>.<name>getArguments</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setOutputproperty</name></name><argument_list>(<argument><expr><name>outV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name>outV</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * If true, command will throw an exception on failure.
     *
     * @param failonerr the status to set the flag to
     * @since ant 1.6.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnErr</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>failonerr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mFailonerr</name> = <name>failonerr</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get failonerr flag status
     *
     * @return boolean containing status of failonerr flag
     * @since ant 1.6.1
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFailOnErr</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mFailonerr</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Constant for the thing to execute
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CLEARTOOL_EXE</name> =<init> <expr>"cleartool"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Update' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_UPDATE</name> =<init> <expr>"update"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Checkout' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_CHECKOUT</name> =<init> <expr>"checkout"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Checkin' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_CHECKIN</name> =<init> <expr>"checkin"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'UndoCheckout' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_UNCHECKOUT</name> =<init> <expr>"uncheckout"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Lock' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_LOCK</name> =<init> <expr>"lock"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Unlock' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_UNLOCK</name> =<init> <expr>"unlock"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Mkbl' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_MKBL</name> =<init> <expr>"mkbl"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Mklabel' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_MKLABEL</name> =<init> <expr>"mklabel"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Mklbtype' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_MKLBTYPE</name> =<init> <expr>"mklbtype"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Rmtype' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_RMTYPE</name> =<init> <expr>"rmtype"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'LsCheckout' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_LSCO</name> =<init> <expr>"lsco"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Mkelem' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_MKELEM</name> =<init> <expr>"mkelem"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Mkattr' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_MKATTR</name> =<init> <expr>"mkattr"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The 'Mkdir' command
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMAND_MKDIR</name> =<init> <expr>"mkdir"</expr></init></decl>;</decl_stmt>

}</block></class>

</unit>
