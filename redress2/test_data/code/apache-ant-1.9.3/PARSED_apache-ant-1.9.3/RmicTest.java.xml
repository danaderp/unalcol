<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\RmicTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>


<comment type="javadoc">/**
 * Testcase for &lt;rmic&gt;.
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>RmicTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Rmic</name></type> <name>rmic</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RmicTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rmic</name> = new <call><name>Rmic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rmic</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test nested compiler args.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCompilerArg</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>args</name> =<init> <expr><call><name><name>rmic</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no args"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Rmic</name>.<name>ImplementationSpecificArgument</name></name></type> <name>arg</name> =<init> <expr><call><name><name>rmic</name>.<name>createCompilerArg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>ford</name> =<init> <expr>"Ford"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>prefect</name> =<init> <expr>"Prefect"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>testArg</name> =<init> <expr><name>ford</name> + " " + <name>prefect</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>arg</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>testArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> = <call><name><name>rmic</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"unconditional single arg"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>testArg</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>arg</name>.<name>setCompiler</name></name><argument_list>(<argument><expr>"weblogic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> = <call><name><name>rmic</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"implementation is weblogic but build.rmic is null"</expr></argument>,
                     <argument><expr>0</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"build.rmic"</expr></argument>, <argument><expr>"sun"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> = <call><name><name>rmic</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"implementation is weblogic but build.rmic is sun"</expr></argument>,
                     <argument><expr>0</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"build.rmic"</expr></argument>, <argument><expr>"weblogic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> = <call><name><name>rmic</name>.<name>getCurrentCompilerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"both are weblogic"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>testArg</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test compiler attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCompilerAttribute</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// check defaults</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>compiler</name> =<init> <expr><call><name><name>rmic</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"expected sun or kaffe, but found "+<name>compiler</name></expr></argument>,<argument><expr><name>compiler</name></expr></argument>,<argument><expr>"default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>project</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr>"build.rmic"</expr></argument>, <argument><expr>"weblogic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compiler</name> = <call><name><name>rmic</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"weblogic"</expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check attribute overrides build.compiler</comment>
        <expr_stmt><expr><call><name><name>rmic</name>.<name>setCompiler</name></name><argument_list>(<argument><expr>"kaffe"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compiler</name> = <call><name><name>rmic</name>.<name>getCompiler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"kaffe"</expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
