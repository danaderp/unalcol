<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\PropertyResource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>PropertyOutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Exposes an Ant property as a Resource.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>PropertyResource</name> <super><extends>extends <name>Resource</name></extends></super> <block>{

    <comment type="javadoc">/** Magic number */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PROPERTY_MAGIC</name>
        =<init> <expr><call><name><name>Resource</name>.<name>getMagicNumber</name></name><argument_list>(<argument><expr>"PropertyResource".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>InputStream</name></type> <name>UNSET</name> =<init> <expr>new <class><super><name>InputStream</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>PropertyResource</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new PropertyResource with the specified name.
     * @param p the project to use.
     * @param n the String name of this PropertyResource (Ant property name/key).
     */</comment>
    <constructor><specifier>public</specifier> <name>PropertyResource</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>, <param><decl><type><name>String</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProject</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the value of this PropertyResource.
     * @return the value of the specified Property.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>PropertyResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>p</name> == <name>null</name> ? <name>null</name> : <call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the Object value of this PropertyResource.
     * @return the Object value of the specified Property.
     * @since Ant 1.8.1
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getObjectValue</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>PropertyResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getObjectValue</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>p</name> == <name>null</name> ? <name>null</name> : <call><name><name>PropertyHelper</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Find out whether this Resource exists.
     * @return true if the Property is set, false otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isExists</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReferenceOrProxy</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getReferencedOrProxied</name><argument_list>()</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>getObjectValue</name><argument_list>()</argument_list></call> != <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the size of this Resource.
     * @return the size, as a long, 0 if the Resource does not exist (for
     *         compatibility with java.io.File), or UNKNOWN_SIZE if not known.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReferenceOrProxy</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getReferencedOrProxied</name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getObjectValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>o</name> == <name>null</name> ? 0L : (<name>long</name>) <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Override to implement equality with equivalent Resources,
     * since we are capable of proxying them.
     * @param o object to compare
     * @return true if equal to o
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>isReferenceOrProxy</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>getReferencedOrProxied</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the hash code for this Resource.
     * @return hash code as int.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReferenceOrProxy</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getReferencedOrProxied</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> * <name>PROPERTY_MAGIC</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReferenceOrProxy</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getReferencedOrProxied</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an InputStream for the Resource.
     * @return an InputStream containing this Resource's content.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if InputStreams are not
     *         supported for this Resource type.
     */</comment>
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReferenceOrProxy</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getReferencedOrProxied</name><argument_list>()</argument_list></call>.<call><name>getInputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getObjectValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>o</name> == <name>null</name> ? <name>UNSET</name> : new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an OutputStream for the Resource.
     * @return an OutputStream to which content can be written.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if OutputStreams are not
     *         supported for this Resource type.
     */</comment>
    <function><type><specifier>public</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReferenceOrProxy</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getReferencedOrProxied</name><argument_list>()</argument_list></call>.<call><name>getOutputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isExists</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ImmutableResourceException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>new <call><name>PropertyOutputStream</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether this PropertyResource either refers to another Resource
     * or proxies another Resource due to its object property value being said Resource.
     * @return boolean
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isReferenceOrProxy</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isReference</name><argument_list>()</argument_list></call> || <call><name>getObjectValue</name><argument_list>()</argument_list></call> <name>instanceof</name> <name>Resource</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the referenced or proxied Resource, if applicable.
     * @return Resource
     * @throws IllegalStateException if this PropertyResource neither proxies nor
     *                               references another Resource.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Resource</name></type> <name>getReferencedOrProxied</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>(<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>(<argument><expr><name><name>Resource</name>.<name><name/></name></name>class</expr></argument>, <argument><expr>"resource"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getObjectValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>Resource</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>Resource</name>) <name>o</name></expr>;</return>
        }</block></then></if>
        <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(
                <argument><expr>"This PropertyResource does not reference or proxy another Resource"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>
</unit>
