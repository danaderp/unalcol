<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\email\PlainMailer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>email</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>mail</name>.<name>MailMessage</name></name>;</import>

<comment type="javadoc">/**
 * Class responsible for sending email through raw protocol methods.
 *
 * @since Ant 1.5
 */</comment>
<class>class <name>PlainMailer</name> <super><extends>extends <name>Mailer</name></extends></super> <block>{
    <comment type="javadoc">/**
     * Sends the email using the apache MailMessage class.
     *
     * @see org.apache.tools.mail.MailMessage
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>send</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>MailMessage</name></type> <name>mailMessage</name> =<init> <expr>new <call><name>MailMessage</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>mailMessage</name>.<name>from</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>atLeastOneRcptReached</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>e</name> = <call><name><name>replyToList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>mailMessage</name>.<name>replyto</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>e</name> = <call><name><name>toList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>to</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>mailMessage</name>.<name>to</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>atLeastOneRcptReached</name> = true</expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>badRecipient</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></while>
            <expr_stmt><expr><name>e</name> = <call><name><name>ccList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>to</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>mailMessage</name>.<name>cc</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>atLeastOneRcptReached</name> = true</expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>badRecipient</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></while>
            <expr_stmt><expr><name>e</name> = <call><name><name>bccList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>to</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>mailMessage</name>.<name>bcc</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>atLeastOneRcptReached</name> = true</expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>badRecipient</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></while>
            <if>if <condition>(<expr>!<name>atLeastOneRcptReached</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Couldn't reach any recipient"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>subject</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mailMessage</name>.<name>setSubject</name></name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>mailMessage</name>.<name>setHeader</name></name><argument_list>(<argument><expr>"Date"</expr></argument>, <argument><expr><call><name>getDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>message</name>.<name>getCharset</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mailMessage</name>.<name>setHeader</name></name><argument_list>(<argument><expr>"Content-Type"</expr></argument>, <argument><expr><call><name><name>message</name>.<name>getMimeType</name></name><argument_list>()</argument_list></call>
                    + "; charset=\"" + <call><name><name>message</name>.<name>getCharset</name></name><argument_list>()</argument_list></call> + "\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>mailMessage</name>.<name>setHeader</name></name><argument_list>(<argument><expr>"Content-Type"</expr></argument>, <argument><expr><call><name><name>message</name>.<name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>headers</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>e</name> = <call><name><name>headers</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Header</name></type> <name>h</name> =<init> <expr>(<name>Header</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mailMessage</name>.<name>setHeader</name></name><argument_list>(<argument><expr><call><name><name>h</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>h</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>
            <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name> =<init> <expr><call><name><name>mailMessage</name>.<name>getPrintStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>message</name>.<name>print</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>e</name> = <call><name><name>files</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name>attach</name><argument_list>(<argument><expr>(<name>File</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>mailMessage</name>.<name>sendAndClose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"IO error sending mail"</expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

    }</block></function>

    <comment type="javadoc">/**
     * Attaches a file to this email
     *
     * @param file The file to attache
     * @param out The message stream to add to
     * @throws IOException if errors occur
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>attach</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>)</parameter_list>
         <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call> || !<call><name><name>file</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"File \"" + <call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                 + "\" does not exist or is not "
                 + "readable."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>includeFileNames</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>filename</name> =<init> <expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>filenamelength</name> =<init> <expr><call><name><name>filename</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>star</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>star</name> &lt; <name>filenamelength</name></expr>;</condition> <incr><expr><name>star</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxBuf</name> =<init> <expr>1024</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>maxBuf</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>finstr</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>in</name> =<init> <expr>new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><name>finstr</name></expr></argument>, <argument><expr><name><name>buf</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr>(<name>length</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>) != -1</expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>finstr</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>badRecipient</name><parameter_list>(<param><decl><type><name>String</name></type> <name>rcpt</name></decl></param>, <param><decl><type><name>IOException</name></type> <name>reason</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed to send mail to " + <name>rcpt</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>shouldIgnoreInvalidRecipients</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>msg</name> += " because of :" + <call><name><name>reason</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>task</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>task</name>.<name>log</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>
}</block></class>

</unit>
