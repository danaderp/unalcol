<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\jsp\compilers\DefaultJspCompilerAdapter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>compilers</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>JspC</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>CommandlineJava</name></name>;</import>

<comment type="javadoc">/**
 * This is the default implementation for the JspCompilerAdapter interface.
 * This is currently very light on the ground since only one compiler type is
 * supported.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DefaultJspCompilerAdapter</name>
    <super><implements>implements <name>JspCompilerAdapter</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>lSep</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Logs the compilation parameters, adds the files to compile and logs the
     * &amp;quot;niceSourceList&amp;quot;
     * @param jspc the compiler task for logging
     * @param compileList the list of files to compile
     * @param cmd the command line used
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>logAndAddFilesToCompile</name><parameter_list>(<param><decl><type><name>JspC</name></type> <name>jspc</name></decl></param>,
                                           <param><decl><type><name>Vector</name></type> <name>compileList</name></decl></param>,
                                           <param><decl><type><name>CommandlineJava</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>jspc</name>.<name>log</name></name><argument_list>(<argument><expr>"Compilation " + <call><name><name>cmd</name>.<name>describeJavaCommand</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>niceSourceList</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"File"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>compileList</name>.<name>size</name></name><argument_list>()</argument_list></call> != 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>niceSourceList</name>.<name>append</name></name><argument_list>(<argument><expr>"s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>niceSourceList</name>.<name>append</name></name><argument_list>(<argument><expr>" to be compiled:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>niceSourceList</name>.<name>append</name></name><argument_list>(<argument><expr><name>lSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>compileList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>arg</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>niceSourceList</name>.<name>append</name></name><argument_list>(<argument><expr>"    "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>niceSourceList</name>.<name>append</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>niceSourceList</name>.<name>append</name></name><argument_list>(<argument><expr><name>lSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <expr_stmt><expr><call><name><name>jspc</name>.<name>log</name></name><argument_list>(<argument><expr><call><name><name>niceSourceList</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>

    <comment type="javadoc">/**
     * our owner
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>JspC</name></type> <name>owner</name></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * set the owner
     * @param owner the owner JspC compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJspc</name><parameter_list>(<param><decl><type><name>JspC</name></type> <name>owner</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>owner</name></name> = <name>owner</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** get the owner
     * @return the owner; should never be null
     */</comment>
    <function><type><specifier>public</specifier> <name>JspC</name></type> <name>getJspc</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>owner</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     *  add an argument oneple to the argument list, if the value aint null
     * @param cmd the command line
     * @param  argument  The argument
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addArg</name><parameter_list>(<param><decl><type><name>CommandlineJava</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>String</name></type> <name>argument</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>argument</name> != <name>null</name> &amp;&amp; <call><name><name>argument</name>.<name>length</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
           <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     *  add an argument tuple to the argument list, if the value aint null
     * @param cmd the command line
     * @param  argument  The argument
     * @param  value     the parameter
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addArg</name><parameter_list>(<param><decl><type><name>CommandlineJava</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>String</name></type> <name>argument</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     *  add an argument tuple to the arg list, if the file parameter aint null
     * @param cmd the command line
     * @param  argument  The argument
     * @param  file     the parameter
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addArg</name><parameter_list>(<param><decl><type><name>CommandlineJava</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>String</name></type> <name>argument</name></decl></param>, <param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * ask if compiler can sort out its own dependencies
     * @return true if the compiler wants to do its own
     * depends
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>implementsOwnDependencyChecking</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * get our project
     * @return owner project data
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getJspc</name><argument_list>()</argument_list></call>.<call><name>getProject</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

</unit>
