<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\jlink\ClassNameReader.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jlink</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>

<comment type="javadoc">/**
 * Reads just enough of a class file to determine the class' full name.
 *
 * &lt;p&gt;Extremely minimal constant pool implementation, mainly to support extracting
 * strings from a class file.
 */</comment>
<class>class <name>ConstantPool</name> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier>
        <name>byte</name></type> <name>UTF8</name> =<init> <expr>1</expr></init>, <name>UNUSED</name> =<init> <expr>2</expr></init>, <name>INTEGER</name> =<init> <expr>3</expr></init>, <name>FLOAT</name> =<init> <expr>4</expr></init>, <name>LONG</name> =<init> <expr>5</expr></init>, <name>DOUBLE</name> =<init> <expr>6</expr></init>,
        <name>CLASS</name> =<init> <expr>7</expr></init>, <name>STRING</name> =<init> <expr>8</expr></init>, <name>FIELDREF</name> =<init> <expr>9</expr></init>, <name>METHODREF</name> =<init> <expr>10</expr></init>,
        <name>INTERFACEMETHODREF</name> =<init> <expr>11</expr></init>, <name>NAMEANDTYPE</name> =<init> <expr>12</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>types</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>values</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Create a constant pool.
     * @param data the data input containing the class.
     * @throws IOException if there is an error.
     */</comment>
    <constructor><name>ConstantPool</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>data</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>types</name> = new <name><name>byte</name> <index>[ <expr><name>count</name></expr> ]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>values</name> = new <name><name>Object</name> <index>[ <expr><name>count</name></expr> ]</index></name></expr>;</expr_stmt>
        <comment type="line">// read in all constant pool entries.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>byte</name></type> <name>type</name> =<init> <expr><call><name><name>data</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name> = <name>type</name></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
            <case>case <expr><name>UTF8</name></expr> :
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>data</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            </case><case>case <expr><name>UNUSED</name></expr> :
                <break>break;</break>

            </case><case>case <expr><name>INTEGER</name></expr> :
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Integer</name><argument_list>(<argument><expr><call><name><name>data</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            </case><case>case <expr><name>FLOAT</name></expr> :
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Float</name><argument_list>(<argument><expr><call><name><name>data</name>.<name>readFloat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            </case><case>case <expr><name>LONG</name></expr> :
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Long</name><argument_list>(<argument><expr><call><name><name>data</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
                <break>break;</break>

            </case><case>case <expr><name>DOUBLE</name></expr> :
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>data</name>.<name>readDouble</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
                <break>break;</break>

            </case><case>case <expr><name>CLASS</name></expr> :
            </case><case>case <expr><name>STRING</name></expr> :
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Integer</name><argument_list>(<argument><expr><call><name><name>data</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            </case><case>case <expr><name>FIELDREF</name></expr> :
            </case><case>case <expr><name>METHODREF</name></expr> :
            </case><case>case <expr><name>INTERFACEMETHODREF</name></expr> :
            </case><case>case <expr><name>NAMEANDTYPE</name></expr> :
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Integer</name><argument_list>(<argument><expr><call><name><name>data</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <comment type="line">// Do nothing</comment>
            </default>}</block></switch>
        }</block></for>
    }</block></constructor>
}</block></class>

<comment type="javadoc">/**
 * Provides a quick and dirty way to determine the true name of a class
 * given just an InputStream. Reads in just enough to perform this
 * minimal task only.
 */</comment>
<class><specifier>public</specifier> class <name>ClassNameReader</name> <super><extends>extends <name>Object</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CLASS_MAGIC_NUMBER</name> =<init>  <expr>0xCAFEBABE</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get the class name of a class in an input stream.
     *
     * @param input an &lt;code&gt;InputStream&lt;/code&gt; value
     * @return the name of the class
     * @exception IOException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getClassName</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>input</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DataInputStream</name></type> <name>data</name> =<init> <expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// verify this is a valid class file.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>cookie</name> =<init> <expr><call><name><name>data</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cookie</name> != <name>CLASS_MAGIC_NUMBER</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <comment type="block">/* int version = */</comment> <expr_stmt><expr><call><name><name>data</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// read the constant pool.</comment>
        <decl_stmt><decl><type><name>ConstantPool</name></type> <name>constants</name> =<init> <expr>new <call><name>ConstantPool</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>values</name> =<init> <expr><name><name>constants</name>.<name>values</name></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// read access flags and class index.</comment>
        <comment type="block">/* int accessFlags = */</comment> <expr_stmt><expr><call><name><name>data</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>classIndex</name> =<init> <expr><call><name><name>data</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>stringIndex</name> =<init> <expr>(<name>Integer</name>) <name><name>values</name><index>[<expr><name>classIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> =<init> <expr>(<name>String</name>) <name><name>values</name><index>[<expr><call><name><name>stringIndex</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>className</name></expr>;</return>
    }</block></function>


}</block></class>


</unit>
