<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\javacc\JJDoc.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>javacc</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>LogStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>CommandlineJava</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>

<comment type="javadoc">/**
 * Runs the JJDoc compiler compiler.
 *
 */</comment>
<class><specifier>public</specifier> class <name>JJDoc</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="line">// keys to optional attributes</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_FILE</name>       =<init> <expr>"OUTPUT_FILE"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TEXT</name>              =<init> <expr>"TEXT"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ONE_TABLE</name>         =<init> <expr>"ONE_TABLE"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Hashtable</name></type> <name>optionalAttrs</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>outputFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>plainText</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_SUFFIX_HTML</name> =<init> <expr>".html"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_SUFFIX_TEXT</name> =<init> <expr>".txt"</expr></init></decl>;</decl_stmt>

    <comment type="line">// required attributes</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>targetFile</name>      =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>javaccHome</name>      =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CommandlineJava</name></type> <name>cmdl</name> =<init> <expr>new <call><name>CommandlineJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>maxMemory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Sets the TEXT BNF documentation option.
     * @param plainText a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setText</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>plainText</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>TEXT</name></expr></argument>, <argument><expr><name>plainText</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>plainText</name></name> = <name>plainText</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the ONE_TABLE documentation option.
     * @param oneTable a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnetable</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>oneTable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>ONE_TABLE</name></expr></argument>, <argument><expr><name>oneTable</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The outputfile to write the generated BNF documentation file to.
     * If not set, the file is written with the same name as
     * the JavaCC grammar file with a suffix .html or .txt.
     * @param outputFile the name of the output file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputfile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>outputFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outputFile</name></name> = <name>outputFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The javacc grammar file to process.
     * @param target the grammar file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTarget</name><parameter_list>(<param><decl><type><name>File</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>targetFile</name></name> = <name>target</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The directory containing the JavaCC distribution.
     * @param javaccHome the home directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJavacchome</name><parameter_list>(<param><decl><type><name>File</name></type> <name>javaccHome</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>javaccHome</name></name> = <name>javaccHome</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds -Xmx.
     *
     * @param max max memory parameter.
     * @since Ant 1.8.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxmemory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>maxMemory</name> = <name>max</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>JJDoc</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setVm</name></name><argument_list>(<argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"java"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Do the task.
     * @throws BuildException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <comment type="line">// load command line with optional attributes</comment>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>iter</name> =<init> <expr><call><name><name>optionalAttrs</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name>  =<init> <expr>(<name>String</name>) <call><name><name>iter</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> =<init> <expr><call><name><name>optionalAttrs</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>
                .<call><name>setValue</name><argument_list>(<argument><expr>"-" + <name>name</name> + ":" + <call><name><name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr><name>targetFile</name> == <name>null</name> || !<call><name><name>targetFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid target: " + <name>targetFile</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>outputFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call> .<call><name>setValue</name><argument_list>(<argument><expr>"-" + <name>OUTPUT_FILE</name> + ":"
                                            + <call><name><name>outputFile</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// use the directory containing the target as the output directory</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>javaFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>createOutputFileName</name><argument_list>(<argument><expr><name>targetFile</name></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>,
                                                      <argument><expr><name>plainText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>javaFile</name>.<name>exists</name></name><argument_list>()</argument_list></call>
             &amp;&amp; <call><name><name>targetFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>javaFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Target is already built - skipping (" + <name>targetFile</name> + ")"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>targetFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>classpath</name> =<init> <expr><call><name><name>cmdl</name>.<name>createClasspath</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>javaccJar</name> =<init> <expr><call><name><name>JavaCC</name>.<name>getArchiveFile</name></name><argument_list>(<argument><expr><name>javaccHome</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>classpath</name>.<name>createPathElement</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><call><name><name>javaccJar</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>classpath</name>.<name>addJavaRuntime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setClassname</name></name><argument_list>(<argument><expr><call><name><name>JavaCC</name>.<name>getMainClass</name></name><argument_list>(<argument><expr><name>classpath</name></expr></argument>,
                                              <argument><expr><name><name>JavaCC</name>.<name>TASKDEF_TYPE_JJDOC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setMaxmemory</name></name><argument_list>(<argument><expr><name>maxMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>arg</name> =<init> <expr><call><name><name>cmdl</name>.<name>createVmArgument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>arg</name>.<name>setValue</name></name><argument_list>(<argument><expr>"-Dinstall.root=" + <call><name><name>javaccHome</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Execute</name></type> <name>process</name> =<init>
            <expr>new <call><name>Execute</name><argument_list>(<argument><expr>new <call><name>LogStreamHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                                             <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>,
                                             <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>cmdl</name>.<name>describeCommand</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>process</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>cmdl</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>process</name>.<name>execute</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"JJDoc failed."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to launch JJDoc"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>createOutputFileName</name><parameter_list>(<param><decl><type><name>File</name></type> <name>destFile</name></decl></param>, <param><decl><type><name>String</name></type> <name>optionalOutputFile</name></decl></param>,
                                        <param><decl><type><name>boolean</name></type> <name>plain</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>suffix</name> =<init> <expr><name>DEFAULT_SUFFIX_HTML</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>javaccFile</name> =<init> <expr><call><name><name>destFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>plain</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>suffix</name> = <name>DEFAULT_SUFFIX_TEXT</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>optionalOutputFile</name> == <name>null</name>) || <call><name><name>optionalOutputFile</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>filePos</name> =<init> <expr><call><name><name>javaccFile</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>filePos</name> &gt;= 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>javaccFile</name> = <call><name><name>javaccFile</name>.<name>substring</name></name><argument_list>(<argument><expr><name>filePos</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>suffixPos</name> =<init> <expr><call><name><name>javaccFile</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>suffixPos</name> == -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>optionalOutputFile</name> = <name>javaccFile</name> + <name>suffix</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>currentSuffix</name> =<init> <expr><call><name><name>javaccFile</name>.<name>substring</name></name><argument_list>(<argument><expr><name>suffixPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>currentSuffix</name>.<name>equals</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>optionalOutputFile</name> = <name>javaccFile</name> + <name>suffix</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>optionalOutputFile</name> = <call><name><name>javaccFile</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>suffixPos</name></expr></argument>)</argument_list></call>
                        + <name>suffix</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>optionalOutputFile</name> = <call><name><name>optionalOutputFile</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr>(<call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call> + "/" + <name>optionalOutputFile</name>)
            .<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
