<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Definer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntTypeDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ComponentHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Location</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>

<comment type="javadoc">/**
 * Base class for Taskdef and Typedef - handles all
 * the attributes for Typedef. The uri and class
 * handling is handled by DefBase
 *
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Definer</name> <super><extends>extends <name>DefBase</name></extends></super> <block>{

    <comment type="javadoc">/**
     * the extension of an antlib file for autoloading.
     * {@value[
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ANTLIB_XML</name> =<init> <expr>"/antlib.xml"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name><name>Map</name><argument_list>&lt;<argument><name>URL</name></argument>, <argument><name>Location</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>RESOURCE_STACK</name> =<init> <expr>new <class><super><name><name>ThreadLocal</name><argument_list>&lt;<argument><name><name>Map</name><argument_list>&lt;<argument><name>URL</name></argument>, <argument><name>Location</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>URL</name></argument>, <argument><name>Location</name></argument>&gt;</argument_list></name></type> <name>initialValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>URL</name></argument>, <argument><name>Location</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>classname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>restrict</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier>   <name>int</name></type>    <name>format</name> =<init> <expr><name><name>Format</name>.<name>PROPERTIES</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier>   <name>boolean</name></type> <name>definerSet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier>   <name>int</name></type>         <name>onError</name> =<init> <expr><name><name>OnError</name>.<name>FAIL</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier>   <name>String</name></type>      <name>adapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier>   <name>String</name></type>      <name>adaptTo</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier>   <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type>       <name>adapterClass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier>   <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type>       <name>adaptToClass</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enumerated type for onError attribute
     *
     * @see EnumeratedAttribute
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>OnError</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/** Enumerated values */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>FAIL</name> =<init> <expr>0</expr></init>, <name>REPORT</name> =<init> <expr>1</expr></init>, <name>IGNORE</name> =<init> <expr>2</expr></init>, <name>FAIL_ALL</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * text value of onerror option {@value}
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>POLICY_FAIL</name> =<init> <expr>"fail"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * text value of onerror option {@value}
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>POLICY_REPORT</name> =<init> <expr>"report"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * text value of onerror option {@value}
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>POLICY_IGNORE</name> =<init> <expr>"ignore"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * text value of onerror option {@value}
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>POLICY_FAILALL</name> =<init> <expr>"failall"</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Constructor
         */</comment>
        <constructor><specifier>public</specifier> <name>OnError</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Constructor using a string.
         * @param value the value of the attribute
         */</comment>
        <constructor><specifier>public</specifier> <name>OnError</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * get the values
         * @return an array of the allowed values for this attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>POLICY_FAIL</name></expr>, <expr><name>POLICY_REPORT</name></expr>, <expr><name>POLICY_IGNORE</name></expr>, <expr><name>POLICY_FAILALL</name></expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Enumerated type for format attribute
     *
     * @see EnumeratedAttribute
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Format</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/** Enumerated values */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PROPERTIES</name> =<init> <expr>0</expr></init>, <name>XML</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * get the values
         * @return an array of the allowed values for this attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"properties"</expr>, <expr>"xml"</expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * The restrict attribute.
     * If this is true, only use this definition in add(X).
     * @param restrict the value to set.
     */</comment>
     <function><type><specifier>protected</specifier> <name>void</name></type> <name>setRestrict</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>restrict</name></decl></param>)</parameter_list> <block>{
         <expr_stmt><expr><name><name>this</name>.<name>restrict</name></name> = <name>restrict</name></expr>;</expr_stmt>
     }</block></function>


    <comment type="javadoc">/**
     * What to do if there is an error in loading the class.
     * &lt;dl&gt;
     *   &lt;li&gt;error - throw build exception&lt;/li&gt;
     *   &lt;li&gt;report - output at warning level&lt;/li&gt;
     *   &lt;li&gt;ignore - output at debug level&lt;/li&gt;
     * &lt;/dl&gt;
     *
     * @param onError an &lt;code&gt;OnError&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnError</name><parameter_list>(<param><decl><type><name>OnError</name></type> <name>onError</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>onError</name></name> = <call><name><name>onError</name>.<name>getIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the format of the file or resource
     * @param format the enumerated value - xml or properties
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFormat</name><parameter_list>(<param><decl><type><name>Format</name></type> <name>format</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>format</name></name> = <call><name><name>format</name>.<name>getIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the name for this definition
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the file containing definitions
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>file</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the resource containing definitions
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getResource</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>resource</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Run the definition.
     *
     * @exception BuildException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>al</name> =<init> <expr><call><name>createLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name>definerSet</name></expr>)</condition><then> <block>{
            <comment type="line">//we arent fully defined yet. this is an error unless</comment>
            <comment type="line">//we are in an antlib, in which case the resource name is determined</comment>
            <comment type="line">//automatically.</comment>
            <comment type="line">//NB: URIs in the ant core package will be "" at this point.</comment>
            <if>if <condition>(<expr><call><name>getURI</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                        <argument><expr>"name, file or resource attribute of "
                                + <call><name>getTaskName</name><argument_list>()</argument_list></call> + " is undefined"</expr></argument>,
                        <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><call><name>getURI</name><argument_list>()</argument_list></call>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANTLIB_PREFIX</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//convert the URI to a resource</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>uri1</name> =<init> <expr><call><name>getURI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setResource</name><argument_list>(<argument><expr><call><name>makeResourceFromURI</name><argument_list>(<argument><expr><name>uri1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                        <argument><expr>"Only antlib URIs can be located from the URI alone,"
                                + " not the URI '" + <call><name>getURI</name><argument_list>()</argument_list></call> + "'"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>name</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>classname</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"classname attribute of " + <call><name>getTaskName</name><argument_list>()</argument_list></call> + " element "
                    + "is undefined"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>addDefinition</name><argument_list>(<argument><expr><name>al</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>classname</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"You must not specify classname "
                    + "together with file or resource."</expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>urls</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>urls</name> = <call><name>resourceToURLs</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>URL</name></type> <name>url</name> =<init> <expr><call><name>fileToURL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>url</name> == <name>null</name></expr>)</condition><then> <block>{
                    <return>return;</return>
                }</block></then></if>
                <expr_stmt><expr><name>urls</name> = <call><name><name>Collections</name>.<name>enumeration</name></name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>singleton</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <while>while <condition>(<expr><call><name><name>urls</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr><call><name><name>urls</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>fmt</name> =<init> <expr><name><name>this</name>.<name>format</name></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>url</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>fmt</name> = <name><name>Format</name>.<name>XML</name></name></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><name>fmt</name> == <name><name>Format</name>.<name>PROPERTIES</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>loadProperties</name><argument_list>(<argument><expr><name>al</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><call><name><name>RESOURCE_STACK</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Warning: Recursive loading of " + <name>url</name>
                            + " ignored"
                            + " at " + <call><name>getLocation</name><argument_list>()</argument_list></call>
                            + " originally loaded at "
                            + <call><name><name>RESOURCE_STACK</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <try>try <block>{
                            <expr_stmt><expr><call><name><name>RESOURCE_STACK</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name>put</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>loadAntlib</name><argument_list>(<argument><expr><name>al</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <finally>finally <block>{
                            <expr_stmt><expr><call><name><name>RESOURCE_STACK</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name>remove</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></finally></try>
                    }</block></else></if>
                }</block></else></if>
            }</block></while>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * This is where the logic to map from a URI to an antlib resource
     * is kept.
     * @param uri the xml namespace uri that to convert.
     * @return the name of a resource. It may not exist
     */</comment>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>makeResourceFromURI</name><parameter_list>(<param><decl><type><name>String</name></type> <name>uri</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name><name>uri</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>MagicNames</name>.<name>ANTLIB_PREFIX</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>resource</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>path</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"//"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//handle new style full paths to an antlib, in which</comment>
            <comment type="line">//all but the forward slashes are allowed.</comment>
            <expr_stmt><expr><name>resource</name> = <call><name><name>path</name>.<name>substring</name></name><argument_list>(<argument><expr>"//".<call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>resource</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//if we haven't already named an XML file, it gets antlib.xml</comment>
                <expr_stmt><expr><name>resource</name> = <name>resource</name> + <name>ANTLIB_XML</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <comment type="line">//convert from a package to a path</comment>
            <expr_stmt><expr><name>resource</name> = <call><name><name>path</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + <name>ANTLIB_XML</name></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>resource</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convert a file to a file: URL.
     *
     * @return the URL, or null if it isn't valid and the active error policy
     * is not to raise a fault
     * @throws BuildException if the file is missing/not a file and the
     * policy requires failure at this point.
     */</comment>
    <function><type><specifier>private</specifier> <name>URL</name></type> <name>fileToURL</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>message</name> = "File " + <name>file</name> + " does not exist"</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>message</name> == <name>null</name> &amp;&amp; !(<call><name><name>file</name>.<name>isFile</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>message</name> = "File " + <name>file</name> + " is not a file"</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>message</name> == <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <return>return <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>getFileURL</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
                <expr_stmt><expr><name>message</name> =
                    "File " + <name>file</name> + " cannot use as URL: "
                    + <call><name><name>ex</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
        <comment type="line">// Here if there is an error</comment>
        <switch>switch <condition>(<expr><name>onError</name></expr>)</condition> <block>{
            <case>case <expr><name><name>OnError</name>.<name>FAIL_ALL</name></name></expr>:
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
            </case><case>case <expr><name><name>OnError</name>.<name>FAIL</name></name></expr>:
                <comment type="line">// Fall Through</comment>
            </case><case>case <expr><name><name>OnError</name>.<name>REPORT</name></name></expr>:
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name><name>OnError</name>.<name>IGNORE</name></name></expr>:
                <comment type="line">// log at a lower level</comment>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <comment type="line">// Ignore the problem</comment>
                <break>break;</break>
        </default>}</block></switch>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>resourceToURLs</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>classLoader</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>ret</name> = <call><name><name>classLoader</name>.<name>getResources</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Could not fetch resources named " + <name>resource</name></expr></argument>,
                <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <if>if <condition>(<expr>!<call><name><name>ret</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"Could not load definitions from resource "
                + <name>resource</name> + ". It could not be found."</expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>onError</name></expr>)</condition> <block>{
                <case>case <expr><name><name>OnError</name>.<name>FAIL_ALL</name></name></expr>:
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
                </case><case>case <expr><name><name>OnError</name>.<name>FAIL</name></name></expr>:
                </case><case>case <expr><name><name>OnError</name>.<name>REPORT</name></name></expr>:
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>OnError</name>.<name>IGNORE</name></name></expr>:
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><default>default:
                    <comment type="line">// Ignore the problem</comment>
                    <break>break;</break>
            </default>}</block></switch>
        }</block></then></if>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Load type definitions as properties from a URL.
     *
     * @param al the classloader to use
     * @param url the url to get the definitions from
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>loadProperties</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>al</name></decl></param>, <param><decl><type><name>URL</name></type> <name>url</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>is</name> = <call><name><name>url</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>is</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Could not load definitions from " + <name>url</name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keys</name> =<init> <expr><call><name><name>props</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>keys</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><name>name</name> = ((<name>String</name>) <call><name><name>keys</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
                <expr_stmt><expr><name>classname</name> = <call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addDefinition</name><argument_list>(<argument><expr><name>al</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Load an antlib from a URL.
     *
     * @param classLoader the classloader to use.
     * @param url the url to load the definitions from.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadAntlib</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>classLoader</name></decl></param>, <param><decl><type><name>URL</name></type> <name>url</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Antlib</name></type> <name>antlib</name> =<init> <expr><call><name><name>Antlib</name>.<name>createAntlib</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>getURI</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>antlib</name>.<name>setClassLoader</name></name><argument_list>(<argument><expr><name>classLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>antlib</name>.<name>setURI</name></name><argument_list>(<argument><expr><call><name>getURI</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>antlib</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr><call><name><name>ProjectHelper</name>.<name>addLocationToBuildException</name></name><argument_list>(
                <argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Name of the property file  to load
     * ant name/classname pairs from.
     * @param file the file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>definerSet</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>tooManyDefinitions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>definerSet</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Name of the property resource to load
     * ant name/classname pairs from.
     * @param res the resource to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>res</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>definerSet</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>tooManyDefinitions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>definerSet</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>resource</name></name> = <name>res</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Antlib attribute, sets resource and uri.
     * uri is set the antlib value and, resource is set
     * to the antlib.xml resource in the classpath.
     * For example antlib="antlib:org.acme.bland.cola"
     * corresponds to uri="antlib:org.acme.bland.cola"
     * resource="org/acme/bland/cola/antlib.xml".
     * ASF Bugzilla Bug 31999
     * @param antlib the value to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAntlib</name><parameter_list>(<param><decl><type><name>String</name></type> <name>antlib</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>definerSet</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>tooManyDefinitions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>antlib</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"antlib:"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Invalid antlib attribute - it must start with antlib:"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setURI</name><argument_list>(<argument><expr><name>antlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>resource</name></name> = <call><name><name>antlib</name>.<name>substring</name></name><argument_list>(<argument><expr>"antlib:".<call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>
            + "/antlib.xml"</expr>;</expr_stmt>
        <expr_stmt><expr><name>definerSet</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Name of the definition
     * @param name the name of the definition
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>definerSet</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>tooManyDefinitions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>definerSet</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the classname of the object we are defining.
     * May be &lt;code&gt;null&lt;/code&gt;.
     * @return the class name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getClassname</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>classname</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The full class name of the object being defined.
     * Required, unless file or resource have
     * been specified.
     * @param classname the name of the class
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassname</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>classname</name></name> = <name>classname</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the class name of the adapter class.
     * An adapter class is used to proxy the
     * definition class. It is used if the
     * definition class is not assignable to
     * the adaptto class, or if the adaptto
     * class is not present.
     *
     * @param adapter the name of the adapter class
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAdapter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>adapter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>adapter</name></name> = <name>adapter</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the adapter class.
     *
     * @param adapterClass the class to use to adapt the definition class
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setAdapterClass</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>adapterClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>adapterClass</name></name> = <name>adapterClass</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classname of the class that the definition
     * must be compatible with, either directly or
     * by use of the adapter class.
     *
     * @param adaptTo the name of the adaptto class
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAdaptTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>adaptTo</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>adaptTo</name></name> = <name>adaptTo</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the class for adaptToClass, to be
     * used by derived classes, used instead of
     * the adaptTo attribute.
     *
     * @param adaptToClass the class for adaptor.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setAdaptToClass</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>adaptToClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>adaptToClass</name></name> = <name>adaptToClass</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Add a definition using the attributes of Definer
     *
     * @param al the ClassLoader to use
     * @param name the name of the definition
     * @param classname the classname of the definition
     * @exception BuildException if an error occurs
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addDefinition</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>al</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cl</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <try>try <block>{
                <expr_stmt><expr><name>name</name> = <call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(<argument><expr><call><name>getURI</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>onError</name> != <name><name>OnError</name>.<name>IGNORE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cl</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><name>adapter</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>adapterClass</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><name>adaptTo</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>adaptToClass</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>adaptTo</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name>AntTypeDefinition</name></type> <name>def</name> =<init> <expr>new <call><name>AntTypeDefinition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>def</name>.<name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>def</name>.<name>setClassName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>def</name>.<name>setClass</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>def</name>.<name>setAdapterClass</name></name><argument_list>(<argument><expr><name>adapterClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>def</name>.<name>setAdaptToClass</name></name><argument_list>(<argument><expr><name>adaptToClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>def</name>.<name>setRestrict</name></name><argument_list>(<argument><expr><name>restrict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>def</name>.<name>setClassLoader</name></name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>cl</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>def</name>.<name>checkClass</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        .<call><name>addDataTypeDefinition</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr><call><name>getTaskName</name><argument_list>()</argument_list></call> + " class " + <name>classname</name>
                        + " cannot be found"
                        + "\n using the classloader " + <name>al</name></expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>cnfe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>NoClassDefFoundError</name></type> <name>ncdfe</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr><call><name>getTaskName</name><argument_list>()</argument_list></call> + " A class needed by class "
                        + <name>classname</name> + " cannot be found: " + <call><name><name>ncdfe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>
                        + "\n using the classloader " + <name>al</name></expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ncdfe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <switch>switch <condition>(<expr><name>onError</name></expr>)</condition> <block>{
                <case>case <expr><name><name>OnError</name>.<name>FAIL_ALL</name></name></expr>:
                </case><case>case <expr><name><name>OnError</name>.<name>FAIL</name></name></expr>:
                    <throw>throw <expr><name>ex</name></expr>;</throw>
                </case><case>case <expr><name><name>OnError</name>.<name>REPORT</name></name></expr>:
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>ex</name>.<name>getLocation</name></name><argument_list>()</argument_list></call> + "Warning: " + <call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><default>default:
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>ex</name>.<name>getLocation</name></name><argument_list>()</argument_list></call> + <call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </default>}</block></switch>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * handle too many definitions by raising an exception.
     * @throws BuildException always.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>tooManyDefinitions</name><parameter_list>()</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
            <argument><expr>"Only one of the attributes name, file and resource"
            + " can be set"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>
</unit>
