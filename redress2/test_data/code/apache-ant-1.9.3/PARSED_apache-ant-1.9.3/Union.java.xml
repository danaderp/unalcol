<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\Union.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>

<comment type="javadoc">/**
 * ResourceCollection representing the union of multiple nested ResourceCollections.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Union</name> <super><extends>extends <name>BaseResourceCollectionContainer</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Static convenience method to union an arbitrary set of Resources.
     * @param rc a ResourceCollection.
     * @return a Union.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Union</name></type> <name>getInstance</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>rc</name> <name>instanceof</name> <name>Union</name> ? (<name>Union</name>) <name>rc</name> : new <call><name>Union</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>Union</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Create a new Union.
     * @param project owning Project
     */</comment>
    <constructor><specifier>public</specifier> <name>Union</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Convenience constructor.
     * @param rc the ResourceCollection to add.
     */</comment>
    <constructor><specifier>public</specifier> <name>Union</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Project</name>.<name>getProject</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Convenience constructor.
     * @param project owning Project
     * @param rc the ResourceCollection to add.
     */</comment>
    <constructor><specifier>public</specifier> <name>Union</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns all Resources in String format. Provided for
     * convenience in implementing Path.
     * @return String array of Resources.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>list</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getCheckedRef</name><argument_list>(<argument><expr><name><name>Union</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name>getDataTypeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>list</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> =<init> <expr><call><name>getAllToStrings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>result</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr><call><name><name>result</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method.
     * @return Resource[]
     */</comment>
    <function><type><specifier>public</specifier> <name>Resource</name><index>[]</index></type> <name>listResources</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getCheckedRef</name><argument_list>(<argument><expr><name><name>Union</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name>getDataTypeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>listResources</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>result</name> =<init> <expr><call><name>getAllResources</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>result</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>Resource</name><index>[<expr><call><name><name>result</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Unify the contained Resources.
     * @return a Collection of Resources.
     */</comment>
    <function><type><specifier>protected</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>getCollection</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getAllResources</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Unify the contained Resources.
     * @param asString indicates whether the resulting Collection
     *        should contain Strings instead of Resources.
     * @return a Collection of Resources.
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
    <specifier>protected</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>Collection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getCollection</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>asString</name></decl></param>)</parameter_list> <block>{ <comment type="line">// TODO untypable</comment>
        <return>return <expr><name>asString</name> ? (<name><name>Collection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>) <call><name>getAllToStrings</name><argument_list>()</argument_list></call> : (<name><name>Collection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>) <call><name>getAllResources</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get a collection of strings representing the unified resource set (strings may duplicate).
     * @return Collection&lt;String&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAllToStrings</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>allResources</name> =<init> <expr><call><name>getAllResources</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>allResources</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>allResources</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the unified set of contained Resources.
     * @return Set&lt;Resource&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>getAllResources</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ResourceCollection</name></argument>&gt;</argument_list></name></type> <name>resourceCollections</name> =<init> <expr><call><name>getResourceCollections</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>resourceCollections</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Collections</name>.<name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>LinkedHashSet</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>result</name> =<init> <expr>new <call><name><name>LinkedHashSet</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name><argument_list>(
                <argument><expr><call><name><name>resourceCollections</name>.<name>size</name></name><argument_list>()</argument_list></call> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ResourceCollection</name></type> <name>resourceCollection</name> :<range> <expr><name>resourceCollections</name></expr></range></decl></init>) <block>{
            <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resourceCollection</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>

</unit>
