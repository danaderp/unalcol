<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\MatchingTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PatternSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>AndSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ContainsRegexpSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ContainsSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DateSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DependSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DepthSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DifferentSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ExtendSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>FileSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>FilenameSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>MajoritySelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>NoneSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>NotSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>OrSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>PresentSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectorContainer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SizeSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>TypeSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>ModifiedSelector</name></name>;</import>

<comment type="javadoc">/**
 * This is an abstract task that should be used by all those tasks that
 * require to include or exclude files based on pattern matching.
 *
 * @since Ant 1.1
 */</comment>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MatchingTask</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>SelectorContainer</name></implements></super> <block>{

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>FileSet</name></type> <name>fileset</name> =<init> <expr>new <call><name>FileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a name entry on the include list
     * @return a NameEntry object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createInclude</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fileset</name>.<name>createInclude</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a name entry on the include files list
     * @return an NameEntry object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createIncludesFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fileset</name>.<name>createIncludesFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a name entry on the exclude list
     * @return an NameEntry object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createExclude</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fileset</name>.<name>createExclude</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a name entry on the include files list
     * @return an NameEntry object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createExcludesFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fileset</name>.<name>createExcludesFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a set of patterns
     * @return PatternSet object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>PatternSet</name></type> <name>createPatternSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fileset</name>.<name>createPatternSet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the set of include patterns. Patterns may be separated by a comma
     * or a space.
     *
     * @param includes the string containing the include patterns
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>includes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setIncludes</name></name><argument_list>(<argument><expr><name>includes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// CheckStyle:MethodNameCheck OFF - bc</comment>
    <comment type="javadoc">/**
     * Set this to be the items in the base directory that you want to be
     * included. You can also specify "*" for the items (ie: items="*")
     * and it will include all the items in the base directory.
     *
     * @param itemString the string containing the files to include.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>XsetItems</name><parameter_list>(<param><decl><type><name>String</name></type> <name>itemString</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"The items attribute is deprecated. "
            + "Please use the includes attribute."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>itemString</name> == <name>null</name> || <call><name><name>itemString</name>.<name>equals</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call>
            || <call><name><name>itemString</name>.<name>equals</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>createInclude</name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr>"**"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>itemString</name></expr></argument>, <argument><expr>", "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>pattern</name> =<init> <expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>pattern</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>createInclude</name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr><name>pattern</name> + "/**"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the set of exclude patterns. Patterns may be separated by a comma
     * or a space.
     *
     * @param excludes the string containing the exclude patterns
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExcludes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>excludes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setExcludes</name></name><argument_list>(<argument><expr><name>excludes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * List of filenames and directory names to not include. They should be
     * either , or " " (space) separated. The ignored files will be logged.
     *
     * @param ignoreString the string containing the files to ignore.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>XsetIgnore</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ignoreString</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"The ignore attribute is deprecated."
            + "Please use the excludes attribute."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ignoreString</name> != <name>null</name> &amp;&amp; <call><name><name>ignoreString</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>ignoreString</name></expr></argument>, <argument><expr>", "</expr></argument>,
                                                      <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name>createExclude</name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr>"**/" + <call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call> + "/**"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
    }</block></function>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Sets whether default exclusions should be used or not.
     *
     * @param useDefaultExcludes "true"|"on"|"yes" when default exclusions
     *                           should be used, "false"|"off"|"no" when they
     *                           shouldn't be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultexcludes</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>useDefaultExcludes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setDefaultexcludes</name></name><argument_list>(<argument><expr><name>useDefaultExcludes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the directory scanner needed to access the files to process.
     * @param baseDir the base directory to use with the fileset
     * @return a directory scanner
     */</comment>
    <function><type><specifier>protected</specifier> <name>DirectoryScanner</name></type> <name>getDirectoryScanner</name><parameter_list>(<param><decl><type><name>File</name></type> <name>baseDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setDir</name></name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>fileset</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name of the file containing the includes patterns.
     *
     * @param includesfile A string containing the filename to fetch
     * the include patterns from.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludesfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>includesfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setIncludesfile</name></name><argument_list>(<argument><expr><name>includesfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name of the file containing the includes patterns.
     *
     * @param excludesfile A string containing the filename to fetch
     * the include patterns from.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExcludesfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>excludesfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setExcludesfile</name></name><argument_list>(<argument><expr><name>excludesfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets case sensitivity of the file system
     *
     * @param isCaseSensitive "true"|"on"|"yes" if file system is case
     *                           sensitive, "false"|"off"|"no" when not.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCaseSensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>isCaseSensitive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr><name>isCaseSensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether or not symbolic links should be followed.
     *
     * @param followSymlinks whether or not symbolic links should be followed
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFollowSymlinks</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>followSymlinks</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr><name>followSymlinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates whether there are any selectors here.
     *
     * @return whether any selectors are in this container
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasSelectors</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fileset</name>.<name>hasSelectors</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gives the count of the number of selectors in this container
     *
     * @return the number of selectors in this container
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>selectorCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fileset</name>.<name>selectorCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the set of selectors as an array.
     * @param p the current project
     * @return an array of selectors in this container
     */</comment>
    <function><type><specifier>public</specifier> <name>FileSelector</name><index>[]</index></type> <name>getSelectors</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>fileset</name>.<name>getSelectors</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an enumerator for accessing the set of selectors.
     *
     * @return an enumerator that goes through each of the selectors
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name></type> <name>selectorElements</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fileset</name>.<name>selectorElements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a new selector into this container.
     *
     * @param selector the new selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>appendSelector</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>appendSelector</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/* Methods below all add specific selectors */</comment>

    <comment type="javadoc">/**
     * add a "Select" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSelector</name><parameter_list>(<param><decl><type><name>SelectSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addSelector</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an "And" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAnd</name><parameter_list>(<param><decl><type><name>AndSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addAnd</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an "Or" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addOr</name><parameter_list>(<param><decl><type><name>OrSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addOr</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a "Not" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNot</name><parameter_list>(<param><decl><type><name>NotSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addNot</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a "None" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNone</name><parameter_list>(<param><decl><type><name>NoneSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addNone</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a majority selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMajority</name><parameter_list>(<param><decl><type><name>MajoritySelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addMajority</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a selector date entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDate</name><parameter_list>(<param><decl><type><name>DateSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addDate</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a selector size entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSize</name><parameter_list>(<param><decl><type><name>SizeSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addSize</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a selector filename entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilename</name><parameter_list>(<param><decl><type><name>FilenameSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addFilename</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an extended selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCustom</name><parameter_list>(<param><decl><type><name>ExtendSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addCustom</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a contains selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addContains</name><parameter_list>(<param><decl><type><name>ContainsSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addContains</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a present selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPresent</name><parameter_list>(<param><decl><type><name>PresentSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addPresent</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a depth selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDepth</name><parameter_list>(<param><decl><type><name>DepthSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addDepth</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a depends selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDepend</name><parameter_list>(<param><decl><type><name>DependSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addDepend</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a regular expression selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addContainsRegexp</name><parameter_list>(<param><decl><type><name>ContainsRegexpSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addContainsRegexp</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a type selector entry on the type list
     * @param selector the selector to add
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDifferent</name><parameter_list>(<param><decl><type><name>DifferentSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addDifferent</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a type selector entry on the type list
     * @param selector the selector to add
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addType</name><parameter_list>(<param><decl><type><name>TypeSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addType</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add the modified selector
     * @param selector the selector to add
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addModified</name><parameter_list>(<param><decl><type><name>ModifiedSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addModified</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an arbitrary selector
     * @param selector the selector to add
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileset</name>.<name>add</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Accessor for the implicit fileset.
     * @return the implicit fileset
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>FileSet</name></type> <name>getImplicitFileSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>fileset</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
