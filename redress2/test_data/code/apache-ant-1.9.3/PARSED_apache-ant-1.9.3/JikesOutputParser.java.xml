<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\JikesOutputParser.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * Parses output from jikes and
 * passes errors and warnings
 * into the right logging channels of Project.
 *
 * &lt;p&gt;&lt;strong&gt;As of Ant 1.2, this class is considered to be dead code
 * by the Ant developers and is unmaintained.  Don't use
 * it.&lt;/strong&gt;&lt;/p&gt;
 *
 * @deprecated since 1.2.
 *             Use Jikes' exit value to detect compilation failure.
 */</comment>
<class><specifier>public</specifier> class <name>JikesOutputParser</name> <super><implements>implements <name>ExecuteStreamHandler</name></implements></super> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Task</name></type> <name>task</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>errorFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt> <comment type="line">// no errors so far</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>errors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>warnings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>error</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>emacsMode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>BufferedReader</name></type> <name>br</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Ignore.
     * @param os ignored
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProcessInputStream</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * Ignore.
     * @param is ignored
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProcessErrorStream</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * Set the inputstream
     * @param is the input stream
     * @throws IOException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProcessOutputStream</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>br</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Invokes parseOutput.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>parseOutput</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Ignore.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * Construct a new Parser object
     * @param task      task in which context we are called
     * @param emacsMode if true output in emacs mode
     */</comment>
    <constructor><specifier>protected</specifier> <name>JikesOutputParser</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>emacsMode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"As of Ant 1.2 released in October 2000, the "
            + "JikesOutputParser class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"is considered to be dead code by the Ant "
            + "developers and is unmaintained."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Don\'t use it!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>emacsMode</name></name> = <name>emacsMode</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Parse the output of a jikes compiler
     * @param reader - Reader used to read jikes's output
     * @throws IOException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>parseOutput</name><parameter_list>(<param><decl><type><name>BufferedReader</name></type> <name>reader</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
       <if>if <condition>(<expr><name>emacsMode</name></expr>)</condition><then> <block>{
           <expr_stmt><expr><call><name>parseEmacsOutput</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></then> <else>else <block>{
           <expr_stmt><expr><call><name>parseStandardOutput</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseStandardOutput</name><parameter_list>(<param><decl><type><name>BufferedReader</name></type> <name>reader</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>lower</name></decl>;</decl_stmt>
        <comment type="line">// We assume, that every output, jikes does, stands for an error/warning</comment>
        <comment type="line">// TODO</comment>
        <comment type="line">// Is this correct?</comment>

        <comment type="line">// TODO:</comment>
        <comment type="line">// A warning line, that shows code, which contains a variable</comment>
        <comment type="line">// error will cause some trouble. The parser should definitely</comment>
        <comment type="line">// be much better.</comment>

        <while>while <condition>(<expr>(<name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>lower</name> = <call><name><name>line</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>line</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>lower</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"error"</expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>lower</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"warning"</expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   }</block></then> <else>else <block>{
                <comment type="line">// If we don't know the type of the line</comment>
                <comment type="line">// and we are in emacs mode, it will be</comment>
                <comment type="line">// an error, because in this mode, jikes won't</comment>
                <comment type="line">// always print "error", but sometimes other</comment>
                <comment type="line">// keywords like "Syntax". We should look for</comment>
                <comment type="line">// all those keywords.</comment>
                <if>if <condition>(<expr><name>emacsMode</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if></else></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseEmacsOutput</name><parameter_list>(<param><decl><type><name>BufferedReader</name></type> <name>reader</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
       <comment type="line">// This may change, if we add advanced parsing capabilities.</comment>
       <expr_stmt><expr><call><name>parseStandardOutput</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>err</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>error</name> = <name>err</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>errorFlag</name> = true</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
       <if>if <condition>(<expr>!<name>emacsMode</name></expr>)</condition><then> <block>{
           <expr_stmt><expr><call><name><name>task</name>.<name>log</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>(<name>error</name> ? <name><name>Project</name>.<name>MSG_ERR</name></name> : <name><name>Project</name>.<name>MSG_WARN</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></then></if>
       <expr_stmt><expr><call><name><name>task</name>.<name>log</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>(<name>error</name> ? <name><name>Project</name>.<name>MSG_ERR</name></name> : <name><name>Project</name>.<name>MSG_WARN</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicate if there were errors during the compile
     * @return if errors occurred
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>getErrorFlag</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>errorFlag</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
