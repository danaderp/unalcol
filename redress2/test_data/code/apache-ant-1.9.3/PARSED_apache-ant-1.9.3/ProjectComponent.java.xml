<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\ProjectComponent.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<comment type="javadoc">/**
 * Base class for components of a project, including tasks and data types.
 * Provides common facilities.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ProjectComponent</name> <super><implements>implements <name>Cloneable</name></implements></super> <block>{

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <comment type="javadoc">/**
     * Project object of this component.
     * @deprecated since 1.6.x.
     *             You should not be directly accessing this variable directly.
     *             You should access project object via the getProject()
     *             or setProject() accessor/mutators.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Location within the build file of this task definition.
     * @deprecated since 1.6.x.
     *             You should not be accessing this variable directly.
     *             Please use the {@link #getLocation()} method.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Location</name></type> <name>location</name> =<init> <expr><name><name>Location</name>.<name>UNKNOWN_LOCATION</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Description of this component, if any.
     * @deprecated since 1.6.x.
     *             You should not be accessing this variable directly.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/** Sole constructor. */</comment>
    <constructor><specifier>public</specifier> <name>ProjectComponent</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets the project object of this component. This method is used by
     * Project when a component is added to it so that the component has
     * access to the functions of the project. It should not be used
     * for any other purpose.
     *
     * @param project Project in whose scope this component belongs.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the project to which this component belongs.
     *
     * @return the components's project.
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the file/location where this task was defined.
     *
     * @return the file/location where this task was defined.
     *         Should not return &lt;code&gt;null&lt;/code&gt;. Location.UNKNOWN_LOCATION
     *         is used for unknown locations.
     *
     * @see Location#UNKNOWN_LOCATION
     */</comment>
    <function><type><specifier>public</specifier> <name>Location</name></type> <name>getLocation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>location</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the file/location where this task was defined.
     *
     * @param location The file/location where this task was defined.
     *                 Should not be &lt;code&gt;null&lt;/code&gt;--use
     *                 Location.UNKNOWN_LOCATION if the location isn't known.
     *
     * @see Location#UNKNOWN_LOCATION
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLocation</name><parameter_list>(<param><decl><type><name>Location</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>location</name></name> = <name>location</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a description of the current action. This may be used for logging
     * purposes.
     *
     * @param desc Description of the current action.
     *             May be &lt;code&gt;null&lt;/code&gt;, indicating that no description is
     *             available.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>desc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>description</name> = <name>desc</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the description of the current action.
     *
     * @return the description of the current action, or &lt;code&gt;null&lt;/code&gt; if
     *         no description is available.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>description</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a message with the default (INFO) priority.
     *
     * @param msg The message to be logged. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a message with the given priority.
     *
     * @param msg The message to be logged. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel the message priority at which this message is
     *                 to be logged.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// 'reasonable' default, if the component is used without</comment>
            <comment type="line">// a Project ( for example as a standalone Bean ).</comment>
            <comment type="line">// Most ant components can be used this way.</comment>
            <if>if <condition>(<expr><name>msgLevel</name> &lt;= <name><name>Project</name>.<name>MSG_INFO</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.7
     * @return a shallow copy of this projectcomponent.
     * @throws CloneNotSupportedException does not happen,
     *                                    but is declared to allow subclasses to do so.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ProjectComponent</name></type> <name>pc</name> =<init> <expr>(<name>ProjectComponent</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pc</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pc</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>pc</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
