<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\selectors\InstanceOf.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ComponentHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntTypeDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>

<comment type="javadoc">/**
 * InstanceOf ResourceSelector.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>InstanceOf</name> <super><implements>implements <name>ResourceSelector</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ONE_ONLY</name> =<init> <expr>"Exactly one of class|type must be set."</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>uri</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the Project instance for this InstanceOf selector.
     * @param p the Project instance used for type comparisons.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the class to compare against.
     * @param c the class.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClass</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>clazz</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The class attribute has already been set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>clazz</name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the Ant type to compare against.
     * @param s the type name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>type</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the URI in which the Ant type, if specified, should be defined.
     * @param u the URI.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setURI</name><parameter_list>(<param><decl><type><name>String</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>uri</name> = <name>u</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the comparison class.
     * @return the Class object.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getCheckClass</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>clazz</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the comparison type.
     * @return the String typename.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>type</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the type's URI.
     * @return the String URI.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getURI</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>uri</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return true if this Resource is selected.
     * @param r the Resource to check.
     * @return whether the Resource was selected.
     * @throws BuildException if an error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelected</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>clazz</name> == <name>null</name>) == (<name>type</name> == <name>null</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ONE_ONLY</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name> =<init> <expr><name>clazz</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>type</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>project</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"No project set for InstanceOf ResourceSelector; "
                    + "the type attribute is invalid."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>AntTypeDefinition</name></type> <name>d</name> =<init> <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(
                <argument><expr><name>project</name></expr></argument>)</argument_list></call>.<call><name>getDefinition</name><argument_list>(<argument><expr><call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>d</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"type " + <name>type</name> + " not found."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <try>try <block>{
                <expr_stmt><expr><name>c</name> = <call><name><name>d</name>.<name>innerGetTypeClass</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><call><name><name>c</name>.<name>isAssignableFrom</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
