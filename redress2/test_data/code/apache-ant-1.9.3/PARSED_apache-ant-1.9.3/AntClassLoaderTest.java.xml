<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\AntClassLoaderTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Test case for ant class loader
 *
 */</comment>
<class><specifier>public</specifier> class <name>AntClassLoaderTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AntClassLoader</name></type> <name>loader</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AntClassLoaderTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>p</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/core/antclassloader.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>loader</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>loader</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="line">//test inspired by bug report 37085</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testJarWithManifestInDirWithSpace</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>mainjarstring</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"main.jar"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>extjarstring</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"ext.jar"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>myPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myPath</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>mainjarstring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setUserProperty</name><argument_list>(<argument><expr>"build.sysclasspath"</expr></argument>,<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>loader</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>myPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name><name>loader</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>mainjarstring</name> + <name><name>File</name>.<name>pathSeparator</name></name> + <name>extjarstring</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testJarWithManifestInNonAsciiDir</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>mainjarstring</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"main.jar.nonascii"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>extjarstring</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"ext.jar.nonascii"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>myPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myPath</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>mainjarstring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setUserProperty</name><argument_list>(<argument><expr>"build.sysclasspath"</expr></argument>,<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>loader</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>myPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name><name>loader</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>mainjarstring</name> + <name><name>File</name>.<name>pathSeparator</name></name> + <name>extjarstring</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCleanup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>path</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>loader</name> = <call><name><name>p</name>.<name>createClassLoader</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <comment type="line">// we don't expect to find this</comment>
            <expr_stmt><expr><call><name><name>loader</name>.<name>findClass</name></name><argument_list>(<argument><expr>"fubar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Did not expect to find fubar class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignore expected</comment>
        }</block></catch></try>

        <expr_stmt><expr><call><name><name>loader</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <comment type="line">// we don't expect to find this</comment>
            <expr_stmt><expr><call><name><name>loader</name>.<name>findClass</name></name><argument_list>(<argument><expr>"fubar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Did not expect to find fubar class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignore expected</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>NullPointerException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"loader should not fail even if cleaned up"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <comment type="line">// tell the build it is finished</comment>
        <expr_stmt><expr><call><name><name>p</name>.<name>fireBuildFinished</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <comment type="line">// we don't expect to find this</comment>
            <expr_stmt><expr><call><name><name>loader</name>.<name>findClass</name></name><argument_list>(<argument><expr>"fubar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Did not expect to find fubar class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignore expected</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>NullPointerException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"loader should not fail even if project finished"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetPackage</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"prepareGetPackageTest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>myPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myPath</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"test.jar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setUserProperty</name><argument_list>(<argument><expr>"build.sysclasspath"</expr></argument>,<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>loader</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>myPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"should find class"</expr></argument>, <argument><expr><call><name><name>loader</name>.<name>findClass</name></name><argument_list>(<argument><expr>"org.example.Foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"should find package"</expr></argument>,
                      <argument><expr>new <call><name>GetPackageWrapper</name><argument_list>(<argument><expr><name>loader</name></expr></argument>)</argument_list></call>.<call><name>getPackage</name><argument_list>(<argument><expr>"org.example"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCodeSource</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"prepareGetPackageTest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>myPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>testJar</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"test.jar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myPath</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>testJar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setUserProperty</name><argument_list>(<argument><expr>"build.sysclasspath"</expr></argument>,<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>loader</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>myPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Class</name></type> <name>foo</name> =<init> <expr><call><name><name>loader</name>.<name>findClass</name></name><argument_list>(<argument><expr>"org.example.Foo"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>URL</name></type> <name>codeSourceLocation</name> =<init>
            <expr><call><name><name>foo</name>.<name>getProtectionDomain</name></name><argument_list>()</argument_list></call>.<call><name>getCodeSource</name><argument_list>()</argument_list></call>.<call><name>getLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>codeSourceLocation</name> + " should point to test.jar"</expr></argument>,
                   <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>getFileURL</name><argument_list>(<argument><expr><name>testJar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>codeSourceLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSignedJar</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"signTestJar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>jar</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"test.jar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Path</name></type> <name>myPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myPath</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>jar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setUserProperty</name><argument_list>(<argument><expr>"build.sysclasspath"</expr></argument>,<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>loader</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>myPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Class</name></type> <name>foo</name> =<init> <expr><call><name><name>loader</name>.<name>findClass</name></name><argument_list>(<argument><expr>"org.example.Foo"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"should find class"</expr></argument>, <argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"should have certificates"</expr></argument>,
                      <argument><expr><call><name><name>foo</name>.<name>getProtectionDomain</name></name><argument_list>()</argument_list></call>.<call><name>getCodeSource</name><argument_list>()</argument_list></call>
                      .<call><name>getCertificates</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"should be signed"</expr></argument>, <argument><expr><call><name><name>foo</name>.<name>getSigners</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @see https://issues.apache.org/bugzilla/show_bug.cgi?id=47593
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInvalidZipException</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"createNonJar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>jar</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"tmp.dir"</expr></argument>)</argument_list></call>
                            + "/foo.jar"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Path</name></type> <name>myPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myPath</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>jar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setUserProperty</name><argument_list>(<argument><expr>"build.sysclasspath"</expr></argument>,<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>loader</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>myPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>sysErr</name> =<init> <expr><name><name>System</name>.<name>err</name></name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>errBuffer</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PrintStream</name></type> <name>err</name> =<init>
                <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name><name>BuildFileTest</name>.<name>AntOutputStream</name></name><argument_list>(<argument><expr><name>errBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>loader</name>.<name>getResource</name></name><argument_list>(<argument><expr>"foo.txt"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>startMessage</name> =<init> <expr><call><name><name>log</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"Unable to obtain resource from "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>startMessage</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>log</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"foo.jar"</expr></argument>, <argument><expr><name>startMessage</name></expr></argument>)</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>log</name> = <call><name><name>errBuffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>startMessage</name> = <call><name><name>log</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"Unable to obtain resource from "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>startMessage</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>log</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"foo.jar"</expr></argument>, <argument><expr><name>startMessage</name></expr></argument>)</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>sysErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>GetPackageWrapper</name> <super><extends>extends <name>ClassLoader</name></extends></super> <block>{
        <constructor><name>GetPackageWrapper</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>parent</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier>public</specifier> <name>Package</name></type> <name>getPackage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>super</name>.<name>getPackage</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
