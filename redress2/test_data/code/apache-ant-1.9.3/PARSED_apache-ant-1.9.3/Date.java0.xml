<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\selectors\Date.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name></name>;</package>

<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>TimeComparison</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Date ResourceSelector.  Based on the date FileSelector, with the most
 * notable difference being the lack of support for the includedirs attribute.
 * It is recommended that the effect of includeDirs = "false" be achieved for
 * resources by enclosing a "dir" Type ResourceSelector and a Date
 * ResourceSelector in an Or ResourceSelector.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Date</name> <super><implements>implements <name>ResourceSelector</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MILLIS_OR_DATETIME</name>
        =<init> <expr>"Either the millis or the datetime attribute must be set."</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>millis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>dateTime</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pattern</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TimeComparison</name></type> <name>when</name> =<init> <expr><name><name>TimeComparison</name>.<name>EQUAL</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>granularity</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>getFileTimestampGranularity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the date/time in milliseconds since 1970.
     * @param m the number of millis.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setMillis</name><parameter_list>(<param><decl><type><name>long</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>millis</name> = new <call><name>Long</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the date/time in ms.
     * @return long number of millis since 1970.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>long</name></type> <name>getMillis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>millis</name> == <name>null</name> ? -1L : <call><name><name>millis</name>.<name>longValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the date and time as a String.
     * @param s the date &amp; time to use.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setDateTime</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>dateTime</name> = <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>millis</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the date &amp; time in String format.
     * @return a String representing a date &amp; time.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getDatetime</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>dateTime</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the granularity to use for this ResourceSelector.
     * @param g the timestamp granularity.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setGranularity</name><parameter_list>(<param><decl><type><name>long</name></type> <name>g</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>granularity</name> = <name>g</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the timestamp granularity used by this ResourceSelector.
     * @return the long granularity.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>long</name></type> <name>getGranularity</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>granularity</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the optional pattern to use with the datetime attribute.
     * @param p the SimpleDateFormat-compatible pattern string.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pattern</name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the pattern for use with the datetime attribute.
     * @return a SimpleDateFormat-compatible pattern string.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getPattern</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>pattern</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the comparison mode.
     * @param c a TimeComparison object.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setWhen</name><parameter_list>(<param><decl><type><name>TimeComparison</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>when</name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the comparison mode.
     * @return a TimeComparison object.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>TimeComparison</name></type> <name>getWhen</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>when</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return true if this Resource is selected.
     * @param r the Resource to check.
     * @return whether the Resource was selected.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>isSelected</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dateTime</name> == <name>null</name> &amp;&amp; <name>millis</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>MILLIS_OR_DATETIME</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>millis</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DateFormat</name></type> <name>df</name> =<init> <expr>((<name>pattern</name> == <name>null</name>)
                ? <call><name><name>DateFormat</name>.<name>getDateTimeInstance</name></name><argument_list>(
                    <argument><expr><name><name>DateFormat</name>.<name>SHORT</name></name></expr></argument>, <argument><expr><name><name>DateFormat</name>.<name>SHORT</name></name></expr></argument>, <argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call>
                : new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>m</name> =<init> <expr><call><name><name>df</name>.<name>parse</name></name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>m</name> &lt; 0</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Date of " + <name>dateTime</name>
                        + " results in negative milliseconds value"
                        + " relative to epoch (January 1, 1970, 00:00:00 GMT)."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name>setMillis</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>pe</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Date of " + <name>dateTime</name>
                        + " Cannot be parsed correctly. It should be in"
                        + (<name>pattern</name> == <name>null</name>
                        ? " MM/DD/YYYY HH:MM AM_PM" : <name>pattern</name>) + " format."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><call><name><name>when</name>.<name>evaluate</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>millis</name>.<name>longValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>granularity</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
