<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\selectors\modifiedselector\DigestAlgorithm.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name></name>;</package>


<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>DigestInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>NoSuchProviderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>


<comment type="javadoc">/**
 * Computes a 'hashvalue' for the content of file using
 * java.security.MessageDigest.
 * Use of this algorithm doesn't require any additional nested &lt;param&gt;s.
 * Supported &lt;param&gt;s are:
 * &lt;table&gt;
 * &lt;tr&gt;
 *   &lt;th&gt;name&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;required&lt;/th&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 *   &lt;td&gt; algorithm.algorithm &lt;/td&gt;
 *   &lt;td&gt; MD5 | SHA (default provider) &lt;/td&gt;
 *   &lt;td&gt; name of the algorithm the provider should use &lt;/td&gt;
 *   &lt;td&gt; no, defaults to MD5 &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 *   &lt;td&gt; algorithm.provider &lt;/td&gt;
 *   &lt;td&gt; &lt;/td&gt;
 *   &lt;td&gt; name of the provider to use &lt;/td&gt;
 *   &lt;td&gt; no, defaults to &lt;i&gt;null&lt;/i&gt; &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;
 *
 * @version 2004-07-08
 * @since  Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>DigestAlgorithm</name> <super><implements>implements <name>Algorithm</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_MASK</name> =<init> <expr>0xFF</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUFFER_SIZE</name> =<init> <expr>8192</expr></init></decl>;</decl_stmt>

    <comment type="line">// -----  member variables  -----</comment>


    <comment type="javadoc">/**
     * MessageDigest algorithm to be used.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>algorithm</name> =<init> <expr>"MD5"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * MessageDigest Algorithm provider
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>provider</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Message Digest instance
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MessageDigest</name></type> <name>messageDigest</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Size of the read buffer to use.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>readBufferSize</name> =<init> <expr><name>BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>


    <comment type="line">// -----  Algorithm-Configuration  -----</comment>


    <comment type="javadoc">/**
     * Specifies the algorithm to be used to compute the checksum.
     * Defaults to "MD5". Other popular algorithms like "SHA" may be used as well.
     * @param algorithm the digest algorithm to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAlgorithm</name><parameter_list>(<param><decl><type><name>String</name></type> <name>algorithm</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>algorithm</name></name> = <name>algorithm</name> != <name>null</name>
            ? <call><name><name>algorithm</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call> : <name>null</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the MessageDigest algorithm provider to be used
     * to calculate the checksum.
     * @param provider provider to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProvider</name><parameter_list>(<param><decl><type><name>String</name></type> <name>provider</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>provider</name></name> = <name>provider</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/** Initialize the security message digest. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>initMessageDigest</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>messageDigest</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>provider</name> != <name>null</name>) &amp;&amp; !"".<call><name>equals</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call> &amp;&amp; !"null".<call><name>equals</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>messageDigest</name> = <call><name><name>MessageDigest</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NoSuchAlgorithmException</name></type> <name>noalgo</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>noalgo</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>NoSuchProviderException</name></type> <name>noprovider</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>noprovider</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <expr_stmt><expr><name>messageDigest</name> = <call><name><name>MessageDigest</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NoSuchAlgorithmException</name></type> <name>noalgo</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>noalgo</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>


    <comment type="line">// -----  Logic  -----</comment>


    <comment type="javadoc">/**
     * This algorithm supports only MD5 and SHA.
     * @return &lt;i&gt;true&lt;/i&gt; if all is ok, otherwise &lt;i&gt;false&lt;/i&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isValid</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"SHA".<call><name>equals</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call> || "MD5".<call><name>equals</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Computes a value for a file content with the specified digest algorithm.
     * @param file    File object for which the value should be evaluated.
     * @return        The value for that file
     */</comment>
    <comment type="line">// implementation adapted from ...taskdefs.Checksum, thanks to Magesh for hint</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>initMessageDigest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>checksum</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr>!<call><name><name>file</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>readBufferSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>messageDigest</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fis</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>DigestInputStream</name></type> <name>dis</name> =<init> <expr>new <call><name>DigestInputStream</name><argument_list>(<argument><expr><name>fis</name></expr></argument>,
                                                              <argument><expr><name>messageDigest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>dis</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>readBufferSize</name></expr></argument>)</argument_list></call> != -1</expr>)</condition> <block>{
                    <comment type="line">// do nothing</comment>
                }</block></while>
                <expr_stmt><expr><call><name><name>dis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fis</name> = <name>null</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>fileDigest</name> =<init> <expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>StringBuffer</name></type> <name>checksumSb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>fileDigest</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>hexStr</name>
                        =<init> <expr><call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr><name>BYTE_MASK</name> &amp; <name><name>fileDigest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>hexStr</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt; 2</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>checksumSb</name>.<name>append</name></name><argument_list>(<argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>checksumSb</name>.<name>append</name></name><argument_list>(<argument><expr><name>hexStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><name>checksum</name> = <call><name><name>checksumSb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></catch></try>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></catch></try>
        <return>return <expr><name>checksum</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Override Object.toString().
     * @return some information about this algorithm.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"&lt;DigestAlgorithm:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"algorithm="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>";provider="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
