<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\TarFileSetTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.ant.types.TarFileSet.
 *
 * &lt;p&gt;This doesn't actually test much, mainly reference handling.
 *
 */</comment>

<class><specifier>public</specifier> class <name>TarFileSetTest</name> <super><extends>extends <name>AbstractFileSetTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>TarFileSetTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>AbstractFileSet</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>TarFileSet</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAttributes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>TarFileSet</name></type> <name>f</name> =<init> <expr>(<name>TarFileSet</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//check that dir and src are incompatible</comment>
        <expr_stmt><expr><call><name><name>f</name>.<name>setSrc</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"example.tar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>f</name>.<name>setDir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"examples"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"can add dir to "
                    + <call><name><name>f</name>.<name>getDataTypeName</name></name><argument_list>()</argument_list></call>
                    + " when a src is already present"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Cannot set both dir and src attributes"</expr></argument>,<argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><name>f</name> = (<name>TarFileSet</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//check that dir and src are incompatible</comment>
        <expr_stmt><expr><call><name><name>f</name>.<name>setDir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"examples"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>f</name>.<name>setSrc</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"example.tar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"can add src to "
                    + <call><name><name>f</name>.<name>getDataTypeName</name></name><argument_list>()</argument_list></call>
                    + " when a dir is already present"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Cannot set both dir and src attributes"</expr></argument>,<argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <comment type="line">//check that fullpath and prefix are incompatible</comment>
        <expr_stmt><expr><name>f</name> = (<name>TarFileSet</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setSrc</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"example.tar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setPrefix</name></name><argument_list>(<argument><expr>"/examples"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>f</name>.<name>setFullpath</name></name><argument_list>(<argument><expr>"/doc/manual/index.html"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add fullpath to "
                    + <call><name><name>f</name>.<name>getDataTypeName</name></name><argument_list>()</argument_list></call>
                    + " when a prefix is already present"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Cannot set both fullpath and prefix attributes"</expr></argument>, <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><name>f</name> = (<name>TarFileSet</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setSrc</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"example.tar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setFullpath</name></name><argument_list>(<argument><expr>"/doc/manual/index.html"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>f</name>.<name>setPrefix</name></name><argument_list>(<argument><expr>"/examples"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add prefix to "
                    + <call><name><name>f</name>.<name>getDataTypeName</name></name><argument_list>()</argument_list></call>
                    + " when a fullpath is already present"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Cannot set both fullpath and prefix attributes"</expr></argument>, <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <comment type="line">// check that reference tarfilesets cannot have specific attributes</comment>
        <expr_stmt><expr><name>f</name> = (<name>TarFileSet</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>f</name>.<name>setSrc</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"example.tar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add src to "
                    + <call><name><name>f</name>.<name>getDataTypeName</name></name><argument_list>()</argument_list></call>
                    + " when a refid is already present"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one "
            + "attribute when using refid"</expr></argument>, <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <comment type="line">// check that a reference tarfileset gets the same attributes as the original</comment>
        <expr_stmt><expr><name>f</name> = (<name>TarFileSet</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setSrc</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"example.tar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setPrefix</name></name><argument_list>(<argument><expr>"/examples"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setFileMode</name></name><argument_list>(<argument><expr>"600"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setDirMode</name></name><argument_list>(<argument><expr>"530"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addReference</name><argument_list>(<argument><expr>"test"</expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TarFileSet</name></type> <name>zid</name>=<init><expr>(<name>TarFileSet</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>zid</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"src attribute copied by copy constructor"</expr></argument>,<argument><expr><call><name><name>zid</name>.<name>getSrc</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getSrc</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"prefix attribute copied by copy constructor"</expr></argument>,<argument><expr><call><name><name>f</name>.<name>getPrefix</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>zid</name>.<name>getPrefix</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"file mode attribute copied by copy constructor"</expr></argument>,<argument><expr><call><name><name>f</name>.<name>getFileMode</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>==<call><name><name>zid</name>.<name>getFileMode</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"dir mode attribute copied by copy constructor"</expr></argument>,<argument><expr><call><name><name>f</name>.<name>getDirMode</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>==<call><name><name>zid</name>.<name>getDirMode</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>


}</block></class>
</unit>
