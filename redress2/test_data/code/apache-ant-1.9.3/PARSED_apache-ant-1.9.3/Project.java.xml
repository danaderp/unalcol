<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\Project.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>EOFException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Modifier</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Stack</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>WeakHashMap</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>DefaultInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>InputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>helper</name>.<name>DefaultExecutor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FilterSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FilterSetCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Description</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>CollectionUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>VectorSet</name></name>;</import>

<comment type="javadoc">/**
 * Central representation of an Ant project. This class defines an
 * Ant project with all of its targets, tasks and various other
 * properties. It also provides the mechanism to kick off a build using
 * a particular target name.
 * &lt;p&gt;
 * This class also encapsulates methods which allow files to be referred
 * to using abstract path names which are translated to native system
 * file paths at runtime.
 *
 */</comment>
<class><specifier>public</specifier> class <name>Project</name> <super><implements>implements <name>ResourceFactory</name></implements></super> <block>{
    <comment type="javadoc">/** Message priority of &amp;quot;error&amp;quot;. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MSG_ERR</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Message priority of &amp;quot;warning&amp;quot;. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MSG_WARN</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Message priority of &amp;quot;information&amp;quot;. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MSG_INFO</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Message priority of &amp;quot;verbose&amp;quot;. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MSG_VERBOSE</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Message priority of &amp;quot;debug&amp;quot;. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MSG_DEBUG</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constant for the &amp;quot;visiting&amp;quot; state, used when
     * traversing a DFS of target dependencies.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VISITING</name> =<init> <expr>"VISITING"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Constant for the &amp;quot;visited&amp;quot; state, used when
     * traversing a DFS of target dependencies.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VISITED</name> =<init> <expr>"VISITED"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Version constant for Java 1.0 .
     *
     * @deprecated since 1.5.x.
     *             Use {@link JavaEnvUtils#JAVA_1_0} instead.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_0</name> =<init> <expr><name><name>JavaEnvUtils</name>.<name>JAVA_1_0</name></name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Version constant for Java 1.1 .
     *
     * @deprecated since 1.5.x.
     *             Use {@link JavaEnvUtils#JAVA_1_1} instead.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_1</name> =<init> <expr><name><name>JavaEnvUtils</name>.<name>JAVA_1_1</name></name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Version constant for Java 1.2 .
     *
     * @deprecated since 1.5.x.
     *             Use {@link JavaEnvUtils#JAVA_1_2} instead.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_2</name> =<init> <expr><name><name>JavaEnvUtils</name>.<name>JAVA_1_2</name></name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Version constant for Java 1.3 .
     *
     * @deprecated since 1.5.x.
     *             Use {@link JavaEnvUtils#JAVA_1_3} instead.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_3</name> =<init> <expr><name><name>JavaEnvUtils</name>.<name>JAVA_1_3</name></name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Version constant for Java 1.4 .
     *
     * @deprecated since 1.5.x.
     *             Use {@link JavaEnvUtils#JAVA_1_4} instead.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_4</name> =<init> <expr><name><name>JavaEnvUtils</name>.<name>JAVA_1_4</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default filter start token. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TOKEN_START</name> =<init> <expr><name><name>FilterSet</name>.<name>DEFAULT_TOKEN_START</name></name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Default filter end token. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TOKEN_END</name> =<init> <expr><name><name>FilterSet</name>.<name>DEFAULT_TOKEN_END</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Instance of a utility class to use for file operations. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Name of this project. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <comment type="javadoc">/** Description for this project (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>


    <comment type="javadoc">/** Map of references within the project (paths etc) (String to Object). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>references</name> =<init> <expr>new <call><name>AntRefTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Map of id references - used for indicating broken build files */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>idReferences</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Name of the project's default target. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>defaultTarget</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Map from target names to targets (String to Target). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>targets</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Set of global filters. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FilterSet</name></type> <name>globalFilterSet</name> =<init> <expr>new <call><name>FilterSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <block>{
        <comment type="line">// Initialize the globalFileSet's project</comment>
        <constructor_decl><name><name>globalFilterSet</name>.<name>setProject</name></name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block>

    <comment type="javadoc">/**
     * Wrapper around globalFilterSet. This collection only ever
     * contains one FilterSet, but the wrapper is needed in order to
     * make it easier to use the FileUtils interface.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FilterSetCollection</name></type> <name>globalFilters</name>
        =<init> <expr>new <call><name>FilterSetCollection</name><argument_list>(<argument><expr><name>globalFilterSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Project base directory. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>baseDir</name></decl>;</decl_stmt>

    <comment type="javadoc">/** lock object used when adding/removing listeners */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Object</name></type> <name>listenersLock</name> =<init> <expr>new <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** List of listeners to notify of build events. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>volatile</name> <name>BuildListener</name><index>[]</index></type> <name>listeners</name> =<init> <expr>new <name><name>BuildListener</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** for each thread, record whether it is currently executing
        messageLogged */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isLoggingMessage</name> =<init> <expr>new <class><super><name><name>ThreadLocal</name><argument_list>&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>protected</specifier> <name>Boolean</name></type> <name>initialValue</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name><name>Boolean</name>.<name>FALSE</name></name></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The Ant core classloader--may be &lt;code&gt;null&lt;/code&gt; if using
     * parent classloader.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>coreLoader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Records the latest task to be executed on a thread. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Thread</name></argument>,<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>threadTasks</name> =<init>
        <expr><call><name><name>Collections</name>.<name>synchronizedMap</name></name><argument_list>(<argument><expr>new <call><name><name>WeakHashMap</name><argument_list>&lt;<argument><name>Thread</name></argument>, <argument><name>Task</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Records the latest task to be executed on a thread group. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ThreadGroup</name></argument>,<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>threadGroupTasks</name>
        =<init> <expr><call><name><name>Collections</name>.<name>synchronizedMap</name></name><argument_list>(<argument><expr>new <call><name><name>WeakHashMap</name><argument_list>&lt;<argument><name>ThreadGroup</name></argument>,<argument><name>Task</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Called to handle any input requests.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>InputHandler</name></type> <name>inputHandler</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The default input stream used to read any input.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>InputStream</name></type> <name>defaultInputStream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Keep going flag.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>keepGoingMode</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the input handler.
     *
     * @param handler the InputHandler instance to use for gathering input.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInputHandler</name><parameter_list>(<param><decl><type><name>InputHandler</name></type> <name>handler</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>inputHandler</name> = <name>handler</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the default System input stream. Normally this stream is set to
     * System.in. This inputStream is used when no task input redirection is
     * being performed.
     *
     * @param defaultInputStream the default input stream to use when input
     *        is requested.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultInputStream</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>defaultInputStream</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>defaultInputStream</name></name> = <name>defaultInputStream</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get this project's input stream.
     *
     * @return the InputStream instance in use by this Project instance to
     * read input.
     */</comment>
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getDefaultInputStream</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>defaultInputStream</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieve the current input handler.
     *
     * @return the InputHandler instance currently in place for the project
     *         instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>InputHandler</name></type> <name>getInputHandler</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>inputHandler</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a new Ant project.
     */</comment>
    <constructor><specifier>public</specifier> <name>Project</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>inputHandler</name> = new <call><name>DefaultInputHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create and initialize a subproject. By default the subproject will be of
     * the same type as its parent. If a no-arg constructor is unavailable, the
     * &lt;code&gt;Project&lt;/code&gt; class will be used.
     * @return a Project instance configured as a subproject of this Project.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>createSubProject</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>subProject</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>subProject</name> = <call>(<name>Project</name>) <argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><name>subProject</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name>initSubProject</name><argument_list>(<argument><expr><name>subProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>subProject</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Initialize a subproject.
     * @param subProject the subproject to initialize.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>initSubProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>subProject</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>subProject</name></expr></argument>)</argument_list></call>
            .<call><name>initSubProject</name><argument_list>(<argument><expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subProject</name>.<name>setDefaultInputStream</name></name><argument_list>(<argument><expr><call><name>getDefaultInputStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subProject</name>.<name>setKeepGoingMode</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>isKeepGoingMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subProject</name>.<name>setExecutor</name></name><argument_list>(<argument><expr><call><name>getExecutor</name><argument_list>()</argument_list></call>.<call><name>getSubProjectExecutor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialise the project.
     *
     * This involves setting the default task definitions and loading the
     * system properties.
     *
     * @exception BuildException if the default task list cannot be loaded.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>initProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>initDefaultDefinitions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initializes the properties.
     * @exception BuildException if an vital property could not be set.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>initProperties</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>setJavaVersionProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSystemProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPropertyInternal</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_VERSION</name></name></expr></argument>, <argument><expr><call><name><name>Main</name>.<name>getAntVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAntLib</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a property to the location of ant.jar.
     * Use the locator to find the location of the Project.class, and
     * if this is not null, set the property {@link MagicNames#ANT_LIB}
     * to the result
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setAntLib</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>antlib</name> =<init> <expr><call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>launch</name>.<name>Locator</name>.<name>getClassSource</name></name><argument_list>(
            <argument><expr><name><name>Project</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>antlib</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setPropertyInternal</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_LIB</name></name></expr></argument>, <argument><expr><call><name><name>antlib</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <comment type="javadoc">/**
     * Factory method to create a class loader for loading classes from
     * a given path.
     *
     * @param path the path from which classes are to be loaded.
     *
     * @return an appropriate classloader.
     */</comment>
    <function><type><specifier>public</specifier> <name>AntClassLoader</name></type> <name>createClassLoader</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>AntClassLoader</name>
            .<name>newAntClassLoader</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Factory method to create a class loader for loading classes from
     * a given path.
     *
     * @param parent the parent classloader for the new loader.
     * @param path the path from which classes are to be loaded.
     *
     * @return an appropriate classloader.
     */</comment>
    <function><type><specifier>public</specifier> <name>AntClassLoader</name></type> <name>createClassLoader</name><parameter_list>(
        <param><decl><type><name>ClassLoader</name></type> <name>parent</name></decl></param>, <param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>AntClassLoader</name>.<name>newAntClassLoader</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the core classloader for the project. If a &lt;code&gt;null&lt;/code&gt;
     * classloader is specified, the parent classloader should be used.
     *
     * @param coreLoader The classloader to use for the project.
     *                   May be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCoreLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>coreLoader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>coreLoader</name></name> = <name>coreLoader</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the core classloader to use for this project.
     * This may be &lt;code&gt;null&lt;/code&gt;, indicating that
     * the parent classloader should be used.
     *
     * @return the core classloader to use for this project.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>ClassLoader</name></type> <name>getCoreLoader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>coreLoader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a build listener to the list. This listener will
     * be notified of build events for this project.
     *
     * @param listener The listener to add to the list.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBuildListener</name><parameter_list>(<param><decl><type><name>BuildListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <synchronized>synchronized (<expr><name>listenersLock</name></expr>) <block>{
            <comment type="line">// If the listeners already has this listener, do nothing</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>listeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>listeners</name><index>[<expr><name>i</name></expr>]</index></name> == <name>listener</name></expr>)</condition><then> <block>{
                    <return>return;</return>
                }</block></then></if>
            }</block></for>
            <comment type="line">// copy on write semantics</comment>
            <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>newListeners</name> =<init>
                <expr>new <name><name>BuildListener</name><index>[<expr><name><name>listeners</name>.<name>length</name></name> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>listeners</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newListeners</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>listeners</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newListeners</name><index>[<expr><name><name>listeners</name>.<name>length</name></name></expr>]</index></name> = <name>listener</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>listeners</name> = <name>newListeners</name></expr>;</expr_stmt>
        }</block></synchronized>
    }</block></function>

    <comment type="javadoc">/**
     * Remove a build listener from the list. This listener
     * will no longer be notified of build events for this project.
     *
     * @param listener The listener to remove from the list.
     *                 Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeBuildListener</name><parameter_list>(<param><decl><type><name>BuildListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <synchronized>synchronized (<expr><name>listenersLock</name></expr>) <block>{
            <comment type="line">// copy on write semantics</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>listeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>listeners</name><index>[<expr><name>i</name></expr>]</index></name> == <name>listener</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>newListeners</name> =<init>
                        <expr>new <name><name>BuildListener</name><index>[<expr><name><name>listeners</name>.<name>length</name></name> - 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>listeners</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newListeners</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>listeners</name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>, <argument><expr><name>newListeners</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                     <argument><expr><name><name>listeners</name>.<name>length</name></name> - <name>i</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>listeners</name> = <name>newListeners</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
        }</block></synchronized>
    }</block></function>

    <comment type="javadoc">/**
     * Return a copy of the list of build listeners for the project.
     *
     * @return a list of build listeners for the project
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>BuildListener</name></argument>&gt;</argument_list></name></type> <name>getBuildListeners</name><parameter_list>()</parameter_list> <block>{
        <synchronized>synchronized (<expr><name>listenersLock</name></expr>) <block>{
            <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>BuildListener</name></argument>&gt;</argument_list></name></type> <name>r</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>BuildListener</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>listeners</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>listeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>r</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>listeners</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><name>r</name></expr>;</return>
        }</block></synchronized>
    }</block></function>

    <comment type="javadoc">/**
     * Write a message to the log with the default log level
     * of MSG_INFO .
     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>MSG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write a project level message to the log with the given log level.
     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel The log priority level to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write a project level message to the log with the given log level.
     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param throwable The exception causing this log, may be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel The log priority level to use.
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>throwable</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fireMessageLogged</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write a task level message to the log with the given log level.
     * @param task The task to use in the log. Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel The log priority level to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fireMessageLogged</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write a task level message to the log with the given log level.
     * @param task The task to use in the log. Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param throwable The exception causing this log, may be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel The log priority level to use.
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>throwable</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fireMessageLogged</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write a target level message to the log with the given log level.
     * @param target The target to use in the log.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel The log priority level to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write a target level message to the log with the given log level.
     * @param target The target to use in the log.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param throwable The exception causing this log, may be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel The log priority level to use.
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>throwable</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fireMessageLogged</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the set of global filters.
     *
     * @return the set of global filters.
     */</comment>
    <function><type><specifier>public</specifier> <name>FilterSet</name></type> <name>getGlobalFilterSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>globalFilterSet</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a property. Any existing property of the same name
     * is overwritten, unless it is a user property.
     * @param name The name of property to set.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param value The new value of the property.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a property if no value currently exists. If the property
     * exists already, a message is logged and the method returns with
     * no other effect.
     *
     * @param name The name of property to set.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param value The new value of the property.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     * @since 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNewProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a user property, which cannot be overwritten by
     * set/unset property calls. Any previous value is overwritten.
     * @param name The name of property to set.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param value The new value of the property.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     * @see #setProperty(String,String)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUserProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>setUserProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a user property, which cannot be overwritten by set/unset
     * property calls. Any previous value is overwritten. Also marks
     * these properties as properties that have not come from the
     * command line.
     *
     * @param name The name of property to set.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param value The new value of the property.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     * @see #setProperty(String,String)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInheritedProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>setInheritedProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a property unless it is already defined as a user property
     * (in which case the method returns silently).
     *
     * @param name The name of the property.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param value The property value. Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setPropertyInternal</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the value of a property, if it is set.
     *
     * @param propertyName The name of the property.
     *             May be &lt;code&gt;null&lt;/code&gt;, in which case
     *             the return value is also &lt;code&gt;null&lt;/code&gt;.
     * @return the property value, or &lt;code&gt;null&lt;/code&gt; for no match
     *         or if a &lt;code&gt;null&lt;/code&gt; name is provided.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>propertyName</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>value</name> =<init> <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>value</name> == <name>null</name> ? <name>null</name> : <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Replace ${} style constructions in the given value with the
     * string value of the corresponding data types.
     *
     * @param value The string to be scanned for property references.
     *              May be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return the given string with embedded property names replaced
     *         by values, or &lt;code&gt;null&lt;/code&gt; if the given string is
     *         &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if the given value has an unclosed
     *                           property name, e.g. &lt;code&gt;${xxx&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>replaceProperties</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the value of a user property, if it is set.
     *
     * @param propertyName The name of the property.
     *             May be &lt;code&gt;null&lt;/code&gt;, in which case
     *             the return value is also &lt;code&gt;null&lt;/code&gt;.
     * @return the property value, or &lt;code&gt;null&lt;/code&gt; for no match
     *         or if a &lt;code&gt;null&lt;/code&gt; name is provided.
     */</comment>
     <function><type><specifier>public</specifier> <name>String</name></type> <name>getUserProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>propertyName</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>String</name>) <call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>getUserProperty</name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a copy of the properties table.
     * @return a hashtable containing all properties
     *         (including user properties).
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getProperties</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>getProperties</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a copy of the user property hashtable.
     * @return a hashtable containing just the user properties.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getUserProperties</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>getUserProperties</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a copy of the inherited property hashtable.
     * @return a hashtable containing just the inherited properties.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getInheritedProperties</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>getInheritedProperties</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Copy all user properties that have been set on the command
     * line or a GUI tool from this instance to the Project instance
     * given as the argument.
     *
     * &lt;p&gt;To copy all &amp;quot;user&amp;quot; properties, you will also have to call
     * {@link #copyInheritedProperties copyInheritedProperties}.&lt;/p&gt;
     *
     * @param other the project to copy the properties to.  Must not be null.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyUserProperties</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>copyUserProperties</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Copy all user properties that have not been set on the
     * command line or a GUI tool from this instance to the Project
     * instance given as the argument.
     *
     * &lt;p&gt;To copy all &amp;quot;user&amp;quot; properties, you will also have to call
     * {@link #copyUserProperties copyUserProperties}.&lt;/p&gt;
     *
     * @param other the project to copy the properties to.  Must not be null.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyInheritedProperties</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>copyInheritedProperties</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the default target of the project.
     *
     * @param defaultTarget The name of the default target for this project.
     *                      May be &lt;code&gt;null&lt;/code&gt;, indicating that there is
     *                      no default target.
     *
     * @deprecated since 1.5.x.
     *             Use setDefault.
     * @see #setDefault(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>defaultTarget</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDefault</name><argument_list>(<argument><expr><name>defaultTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the name of the default target of the project.
     * @return name of the default target or
     *         &lt;code&gt;null&lt;/code&gt; if no default has been set.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultTarget</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>defaultTarget</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the default target of the project.
     *
     * @param defaultTarget The name of the default target for this project.
     *                      May be &lt;code&gt;null&lt;/code&gt;, indicating that there is
     *                      no default target.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefault</name><parameter_list>(<param><decl><type><name>String</name></type> <name>defaultTarget</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>defaultTarget</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setUserProperty</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>PROJECT_DEFAULT_TARGET</name></name></expr></argument>, <argument><expr><name>defaultTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>defaultTarget</name></name> = <name>defaultTarget</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the name of the project, also setting the user
     * property &lt;code&gt;ant.project.name&lt;/code&gt;.
     *
     * @param name The name of the project.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setUserProperty</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>PROJECT_NAME</name></name></expr></argument>,  <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the project name, if one has been set.
     *
     * @return the project name, or &lt;code&gt;null&lt;/code&gt; if it hasn't been set.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the project description.
     *
     * @param description The description of the project.
     *                    May be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>description</name></name> = <name>description</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the project description, if one has been set.
     *
     * @return the project description, or &lt;code&gt;null&lt;/code&gt; if it hasn't
     *         been set.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>description</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>description</name> = <call><name><name>Description</name>.<name>getDescription</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>description</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a filter to the set of global filters.
     *
     * @param token The token to filter.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param value The replacement value.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     * @deprecated since 1.4.x.
     *             Use getGlobalFilterSet().addFilter(token,value)
     *
     * @see #getGlobalFilterSet()
     * @see FilterSet#addFilter(String,String)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>token</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>globalFilterSet</name>.<name>addFilter</name></name><argument_list>(<argument><expr>new <call><name><name>FilterSet</name>.<name>Filter</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return a hashtable of global filters, mapping tokens to values.
     *
     * @return a hashtable of global filters, mapping tokens to values
     *         (String to String).
     *
     * @deprecated since 1.4.x
     *             Use getGlobalFilterSet().getFilterHash().
     *
     * @see #getGlobalFilterSet()
     * @see FilterSet#getFilterHash()
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getFilters</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// we need to build the hashtable dynamically</comment>
        <return>return <expr><call><name><name>globalFilterSet</name>.<name>getFilterHash</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the base directory for the project, checking that
     * the given filename exists and is a directory.
     *
     * @param baseD The project base directory.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if the directory if invalid.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBasedir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>baseD</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>setBaseDir</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>baseD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the base directory for the project, checking that
     * the given file exists and is a directory.
     *
     * @param baseDir The project base directory.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     * @exception BuildException if the specified file doesn't exist or
     *                           isn't a directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>baseDir</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>baseDir</name> = <call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name><name>baseDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>baseDir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Basedir " + <call><name><name>baseDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                + " does not exist"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>baseDir</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Basedir " + <call><name><name>baseDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                + " is not a directory"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>baseDir</name></name> = <name>baseDir</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPropertyInternal</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>PROJECT_BASEDIR</name></name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>baseDir</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Project base dir set to: " + <name><name>this</name>.<name>baseDir</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>MSG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the base directory of the project as a file object.
     *
     * @return the project base directory, or &lt;code&gt;null&lt;/code&gt; if the
     *         base directory has not been successfully set to a valid value.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getBaseDir</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>baseDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name>setBasedir</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>ex</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><name>baseDir</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set &amp;quot;keep-going&amp;quot; mode. In this mode Ant will try to execute
     * as many targets as possible. All targets that do not depend
     * on failed target(s) will be executed.  If the keepGoing settor/getter
     * methods are used in conjunction with the &lt;code&gt;ant.executor.class&lt;/code&gt;
     * property, they will have no effect.
     * @param keepGoingMode &amp;quot;keep-going&amp;quot; mode
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeepGoingMode</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>keepGoingMode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keepGoingMode</name></name> = <name>keepGoingMode</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the keep-going mode.  If the keepGoing settor/getter
     * methods are used in conjunction with the &lt;code&gt;ant.executor.class&lt;/code&gt;
     * property, they will have no effect.
     * @return &amp;quot;keep-going&amp;quot; mode
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isKeepGoingMode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>keepGoingMode</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the version of Java this class is running under.
     * @return the version of Java as a String, e.g. "1.1" .
     * @see org.apache.tools.ant.util.JavaEnvUtils#getJavaVersion
     * @deprecated since 1.5.x.
     *             Use org.apache.tools.ant.util.JavaEnvUtils instead.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getJavaVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>JavaEnvUtils</name>.<name>getJavaVersion</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the &lt;code&gt;ant.java.version&lt;/code&gt; property and tests for
     * unsupported JVM versions. If the version is supported,
     * verbose log messages are generated to record the Java version
     * and operating system name.
     *
     * @exception BuildException if this Java version is not supported.
     *
     * @see org.apache.tools.ant.util.JavaEnvUtils#getJavaVersion
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJavaVersionProperty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>javaVersion</name> =<init> <expr><call><name><name>JavaEnvUtils</name>.<name>getJavaVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setPropertyInternal</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_JAVA_VERSION</name></name></expr></argument>, <argument><expr><name>javaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// sanity check</comment>
        <if>if <condition>(<expr>!<call><name><name>JavaEnvUtils</name>.<name>isAtLeastJavaVersion</name></name><argument_list>(<argument><expr><name><name>JavaEnvUtils</name>.<name>JAVA_1_4</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>  <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Ant cannot work on Java prior to 1.4"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Detected Java version: " + <name>javaVersion</name> + " in: "
            + <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.home"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MSG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Detected OS: " + <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MSG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add all system properties which aren't already defined as
     * user properties to the project properties.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemProperties</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>systemP</name> =<init> <expr><call><name><name>System</name>.<name>getProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>systemP</name>.<name>propertyNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>propertyName</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name><name>systemP</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>value</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>setPropertyInternal</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Add a new task definition to the project.
     * Attempting to override an existing definition with an
     * equivalent one (i.e. with the same classname) results in
     * a verbose log message. Attempting to override an existing definition
     * with a different one results in a warning log message and
     * invalidates any tasks which have already been created with the
     * old definition.
     *
     * @param taskName The name of the task to add.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param taskClass The full name of the class implementing the task.
     *                  Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if the class is unsuitable for being an Ant
     *                           task. An error level message is logged before
     *                           this exception is thrown.
     *
     * @see #checkTaskClass(Class)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTaskDefinition</name><parameter_list>(<param><decl><type><name>String</name></type> <name>taskName</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>taskClass</name></decl></param>)</parameter_list>
         <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>addTaskDefinition</name><argument_list>(<argument><expr><name>taskName</name></expr></argument>,
                <argument><expr><name>taskClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Check whether or not a class is suitable for serving as Ant task.
     * Ant task implementation classes must be public, concrete, and have
     * a no-arg constructor.
     *
     * @param taskClass The class to be checked.
     *                  Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if the class is unsuitable for being an Ant
     *                           task. An error level message is logged before
     *                           this exception is thrown.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkTaskClass</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>taskClass</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>checkTaskClass</name><argument_list>(<argument><expr><name>taskClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name><name>Modifier</name>.<name>isPublic</name></name><argument_list>(<argument><expr><call><name><name>taskClass</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr><name>taskClass</name> + " is not public"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>Modifier</name>.<name>isAbstract</name></name><argument_list>(<argument><expr><call><name><name>taskClass</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr><name>taskClass</name> + " is abstract"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>taskClass</name>.<name>getConstructor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// don't have to check for public, since</comment>
            <comment type="line">// getConstructor finds public constructors only.</comment>
        }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr>"No public no-arg constructor in "
                + <name>taskClass</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>LinkageError</name></type> <name>e</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"Could not load " + <name>taskClass</name> + ": " + <name>e</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <if>if <condition>(<expr>!<name><name>Task</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>taskClass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>TaskAdapter</name>.<name>checkTaskClass</name></name><argument_list>(<argument><expr><name>taskClass</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Return the current task definition hashtable. The returned hashtable is
     * &amp;quot;live&amp;quot; and so should not be modified.
     *
     * @return a map of from task name to implementing class
     *         (String to Class).
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getTaskDefinitions</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>getTaskDefinitions</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the current task definition map. The returned map is a
     * copy of the &amp;quot;live&amp;quot; definitions.
     *
     * @return a map of from task name to implementing class
     *         (String to Class).
     *
     * @since Ant 1.8.1
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getCopyOfTaskDefinitions</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getTaskDefinitions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a new datatype definition.
     * Attempting to override an existing definition with an
     * equivalent one (i.e. with the same classname) results in
     * a verbose log message. Attempting to override an existing definition
     * with a different one results in a warning log message, but the
     * definition is changed.
     *
     * @param typeName The name of the datatype.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param typeClass The full name of the class implementing the datatype.
     *                  Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDataTypeDefinition</name><parameter_list>(<param><decl><type><name>String</name></type> <name>typeName</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>typeClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>addDataTypeDefinition</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>,
                <argument><expr><name>typeClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the current datatype definition hashtable. The returned
     * hashtable is &amp;quot;live&amp;quot; and so should not be modified.
     *
     * @return a map of from datatype name to implementing class
     *         (String to Class).
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getDataTypeDefinitions</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>getDataTypeDefinitions</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the current datatype definition map. The returned
     * map is a copy pf the &amp;quot;live&amp;quot; definitions.
     *
     * @return a map of from datatype name to implementing class
     *         (String to Class).
     *
     * @since Ant 1.8.1
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getCopyOfDataTypeDefinitions</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDataTypeDefinitions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &lt;em&gt;new&lt;/em&gt; target to the project.
     *
     * @param target The target to be added to the project.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if the target already exists in the project
     *
     * @see Project#addOrReplaceTarget(Target)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTarget</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>addTarget</name><argument_list>(<argument><expr><call><name><name>target</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &lt;em&gt;new&lt;/em&gt; target to the project.
     *
     * @param targetName The name to use for the target.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param target The target to be added to the project.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if the target already exists in the project.
     *
     * @see Project#addOrReplaceTarget(String, Target)
     */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>addTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>targetName</name></decl></param>, <param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list>
         <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
         <if>if <condition>(<expr><call><name><name>targets</name>.<name>get</name></name><argument_list>(<argument><expr><name>targetName</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
             <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Duplicate target: `" + <name>targetName</name> + "'"</expr></argument>)</argument_list></call></expr>;</throw>
         }</block></then></if>
         <expr_stmt><expr><call><name>addOrReplaceTarget</name><argument_list>(<argument><expr><name>targetName</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }</block></function>

    <comment type="javadoc">/**
     * Add a target to the project, or replaces one with the same
     * name.
     *
     * @param target The target to be added or replaced in the project.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addOrReplaceTarget</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addOrReplaceTarget</name><argument_list>(<argument><expr><call><name><name>target</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a target to the project, or replaces one with the same
     * name.
     *
     * @param targetName The name to use for the target.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param target The target to be added or replaced in the project.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addOrReplaceTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>targetName</name></decl></param>, <param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>" +Target: " + <name>targetName</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>MSG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>target</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>targets</name>.<name>put</name></name><argument_list>(<argument><expr><name>targetName</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the hashtable of targets. The returned hashtable
     * is &amp;quot;live&amp;quot; and so should not be modified.
     * @return a map from name to target (String to Target).
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>getTargets</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>targets</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the map of targets. The returned map
     * is a copy of the &amp;quot;live&amp;quot; targets.
     * @return a map from name to target (String to Target).
     * @since Ant 1.8.1
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>getCopyOfTargets</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a new instance of a task, adding it to a list of
     * created tasks for later invalidation. This causes all tasks
     * to be remembered until the containing project is removed
     * @param taskType The name of the task to create an instance of.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return an instance of the specified task, or &lt;code&gt;null&lt;/code&gt; if
     *         the task name is not recognised.
     *
     * @exception BuildException if the task name is recognised but task
     *                           creation fails.
     */</comment>
    <function><type><specifier>public</specifier> <name>Task</name></type> <name>createTask</name><parameter_list>(<param><decl><type><name>String</name></type> <name>taskType</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>createTask</name><argument_list>(<argument><expr><name>taskType</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a new instance of a data type.
     *
     * @param typeName The name of the data type to create an instance of.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return an instance of the specified data type, or &lt;code&gt;null&lt;/code&gt; if
     *         the data type name is not recognised.
     *
     * @exception BuildException if the data type name is recognised but
     *                           instance creation fails.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>createDataType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>typeName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>createDataType</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the Executor instance for this Project.
     * @param e the Executor to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExecutor</name><parameter_list>(<param><decl><type><name>Executor</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addReference</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_EXECUTOR_REFERENCE</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get this Project's Executor (setting it if necessary).
     * @return an Executor instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>Executor</name></type> <name>getExecutor</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getReference</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_EXECUTOR_REFERENCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init> <expr><call><name>getProperty</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_EXECUTOR_CLASSNAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>classname</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>classname</name> = <name><name>DefaultExecutor</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Attempting to create object of type " + <name>classname</name></expr></argument>, <argument><expr><name>MSG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>o</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>coreLoader</name></expr></argument>)</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>seaEnEfEx</name></decl></param>) <block>{
                <comment type="line">//try the current classloader</comment>
                <try>try <block>{
                    <expr_stmt><expr><name>o</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>ex</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MSG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>ex</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MSG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Unable to obtain a Target Executor instance."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>setExecutor</name><argument_list>(<argument><expr>(<name>Executor</name>) <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>(<name>Executor</name>) <name>o</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the specified sequence of targets, and the targets
     * they depend on.
     *
     * @param names A vector of target name strings to execute.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if the build failed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeTargets</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>setUserProperty</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>PROJECT_INVOKED_TARGETS</name></name></expr></argument>,
                        <argument><expr><call><name><name>CollectionUtils</name>.<name>flattenToString</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getExecutor</name><argument_list>()</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>names</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr><call><name><name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Demultiplex output so that each task receives the appropriate
     * messages. If the current thread is not currently executing a task,
     * the message is logged directly.
     *
     * @param output Message to handle. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param isWarning Whether the text represents an warning (&lt;code&gt;true&lt;/code&gt;)
     *        or information (&lt;code&gt;false&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>demuxOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isWarning</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><call><name>getThreadTask</name><argument_list>(<argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>task</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>isWarning</name> ? <name>MSG_WARN</name> : <name>MSG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>isWarning</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>task</name>.<name>handleErrorOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>task</name>.<name>handleOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Read data from the default input stream. If no default has been
     * specified, System.in is used.
     *
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read.
     *
     * @return the number of bytes read.
     *
     * @exception IOException if the data cannot be read.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>defaultInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>defaultInputStream</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>defaultInputStream</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>(<argument><expr>"No input provided for project"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Demux an input request to the correct task.
     *
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read.
     *
     * @return the number of bytes read.
     *
     * @exception IOException if the data cannot be read.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>demuxInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><call><name>getThreadTask</name><argument_list>(<argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>task</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>defaultInput</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>task</name>.<name>handleInput</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Demultiplex flush operations so that each task receives the appropriate
     * messages. If the current thread is not currently executing a task,
     * the message is logged directly.
     *
     * @since Ant 1.5.2
     *
     * @param output Message to handle. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param isError Whether the text represents an error (&lt;code&gt;true&lt;/code&gt;)
     *        or information (&lt;code&gt;false&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>demuxFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isError</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><call><name>getThreadTask</name><argument_list>(<argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>task</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fireMessageLogged</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>isError</name> ? <name>MSG_ERR</name> : <name>MSG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>isError</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>task</name>.<name>handleErrorFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>task</name>.<name>handleFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the specified target and any targets it depends on.
     *
     * @param targetName The name of the target to execute.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if the build failed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>targetName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <comment type="line">// sanity check ourselves, if we've been asked to build nothing</comment>
        <comment type="line">// then we should complain</comment>

        <if>if <condition>(<expr><name>targetName</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"No target specified"</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// Sort and run the dependency tree.</comment>
        <comment type="line">// Sorting checks if all the targets (and dependencies)</comment>
        <comment type="line">// exist, and if there is any cycle in the dependency</comment>
        <comment type="line">// graph.</comment>
        <expr_stmt><expr><call><name>executeSortedTargets</name><argument_list>(<argument><expr><call><name>topoSort</name><argument_list>(<argument><expr><name>targetName</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute a &lt;code&gt;Vector&lt;/code&gt; of sorted targets.
     * @param sortedTargets   the aforementioned &lt;code&gt;Vector&lt;/code&gt;.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeSortedTargets</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>sortedTargets</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>succeededTargets</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BuildException</name></type> <name>buildException</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt> <comment type="line">// first build exception</comment>
        <for>for (<init><decl><type><name>Target</name></type> <name>curtarget</name> :<range> <expr><name>sortedTargets</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>canExecute</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>depIter</name> =<init> <expr><call><name><name>curtarget</name>.<name>getDependencies</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                 <condition><expr><call><name><name>depIter</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>dependencyName</name> =<init> <expr><call><name><name>depIter</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>succeededTargets</name>.<name>contains</name></name><argument_list>(<argument><expr><name>dependencyName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>canExecute</name> = false</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>curtarget</name></expr></argument>,
                        <argument><expr>"Cannot execute '" + <call><name><name>curtarget</name>.<name>getName</name></name><argument_list>()</argument_list></call> + "' - '"
                        + <name>dependencyName</name> + "' failed or was not executed."</expr></argument>,
                        <argument><expr><name>MSG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>canExecute</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Throwable</name></type> <name>thrownException</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>curtarget</name>.<name>performTasks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>succeededTargets</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>curtarget</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>RuntimeException</name></type> <name>ex</name></decl></param>) <block>{
                    <if>if <condition>(<expr>!(<name>keepGoingMode</name>)</expr>)</condition><then> <block>{
                        <throw>throw <expr><name>ex</name></expr>;</throw> <comment type="line">// throw further</comment>
                    }</block></then></if>
                    <expr_stmt><expr><name>thrownException</name> = <name>ex</name></expr>;</expr_stmt>
                }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>ex</name></decl></param>) <block>{
                    <if>if <condition>(<expr>!(<name>keepGoingMode</name>)</expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <expr_stmt><expr><name>thrownException</name> = <name>ex</name></expr>;</expr_stmt>
                }</block></catch></try>
                <if>if <condition>(<expr><name>thrownException</name> != <name>null</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>thrownException</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>curtarget</name></expr></argument>,
                            <argument><expr>"Target '" + <call><name><name>curtarget</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                            + "' failed with message '"
                            + <call><name><name>thrownException</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "'."</expr></argument>, <argument><expr><name>MSG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// only the first build exception is reported</comment>
                        <if>if <condition>(<expr><name>buildException</name> == <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>buildException</name> = (<name>BuildException</name>) <name>thrownException</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>curtarget</name></expr></argument>,
                            <argument><expr>"Target '" + <call><name><name>curtarget</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                            + "' failed with message '"
                            + <call><name><name>thrownException</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "'."</expr></argument>, <argument><expr><name>MSG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>thrownException</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>buildException</name> == <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>buildException</name> =
                                new <call><name>BuildException</name><argument_list>(<argument><expr><name>thrownException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>buildException</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>buildException</name></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Return the canonical form of a filename.
     * &lt;p&gt;
     * If the specified file name is relative it is resolved
     * with respect to the given root directory.
     *
     * @param fileName The name of the file to resolve.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @param rootDir  The directory respective to which relative file names
     *                 are resolved. May be &lt;code&gt;null&lt;/code&gt;, in which case
     *                 the current directory is used.
     *
     * @return the resolved File.
     *
     * @deprecated since 1.4.x
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>resolveFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>, <param><decl><type><name>File</name></type> <name>rootDir</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>rootDir</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the canonical form of a filename.
     * &lt;p&gt;
     * If the specified file name is relative it is resolved
     * with respect to the project's base directory.
     *
     * @param fileName The name of the file to resolve.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return the resolved File.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>resolveFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Translate a path into its native (platform specific) format.
     * &lt;p&gt;
     * This method uses PathTokenizer to separate the input path
     * into its components. This handles DOS style paths in a relatively
     * sensible way. The file separators are then converted to their platform
     * specific versions.
     *
     * @param toProcess The path to be translated.
     *                  May be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return the native version of the specified path or
     *         an empty string if the path is &lt;code&gt;null&lt;/code&gt; or empty.
     *
     * @deprecated since 1.7
     *             Use FileUtils.translatePath instead.
     *
     * @see PathTokenizer
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>translatePath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>toProcess</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>FileUtils</name>.<name>translatePath</name></name><argument_list>(<argument><expr><name>toProcess</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy a file from a source to a destination.
     * No filtering is performed.
     *
     * @param sourceFile Name of file to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param destFile Name of file to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception IOException if the copying fails.
     *
     * @deprecated since 1.4.x
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>String</name></type> <name>destFile</name></decl></param>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>copyFile</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy a file from a source to a destination
     * specifying if token filtering should be used.
     *
     * @param sourceFile Name of file to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param destFile Name of file to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param filtering Whether or not token filtering should be used during
     *                  the copy.
     *
     * @exception IOException if the copying fails.
     *
     * @deprecated since 1.4.x
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>String</name></type> <name>destFile</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>filtering</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>copyFile</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>,
            <argument><expr><name>filtering</name> ? <name>globalFilters</name> : <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy a file from a source to a
     * destination specifying if token filtering should be used and if
     * source files may overwrite newer destination files.
     *
     * @param sourceFile Name of file to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param destFile Name of file to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param filtering Whether or not token filtering should be used during
     *                  the copy.
     * @param overwrite Whether or not the destination file should be
     *                  overwritten if it already exists.
     *
     * @exception IOException if the copying fails.
     *
     * @deprecated since 1.4.x
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>String</name></type> <name>destFile</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>filtering</name></decl></param>,
                         <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>copyFile</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>,
            <argument><expr><name>filtering</name> ? <name>globalFilters</name> : <name>null</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy a file from a source to a
     * destination specifying if token filtering should be used, if
     * source files may overwrite newer destination files, and if the
     * last modified time of the resulting file should be set to
     * that of the source file.
     *
     * @param sourceFile Name of file to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param destFile Name of file to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param filtering Whether or not token filtering should be used during
     *                  the copy.
     * @param overwrite Whether or not the destination file should be
     *                  overwritten if it already exists.
     * @param preserveLastModified Whether or not the last modified time of
     *                             the resulting file should be set to that
     *                             of the source file.
     *
     * @exception IOException if the copying fails.
     *
     * @deprecated since 1.4.x
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>String</name></type> <name>destFile</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>filtering</name></decl></param>,
                         <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>preserveLastModified</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>copyFile</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>,
            <argument><expr><name>filtering</name> ? <name>globalFilters</name> : <name>null</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>preserveLastModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy a file from a source to a destination.
     * No filtering is performed.
     *
     * @param sourceFile File to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param destFile File to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception IOException if the copying fails.
     *
     * @deprecated since 1.4.x
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>File</name></type> <name>destFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>copyFile</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy a file from a source to a destination
     * specifying if token filtering should be used.
     *
     * @param sourceFile File to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param destFile File to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param filtering Whether or not token filtering should be used during
     *                  the copy.
     *
     * @exception IOException if the copying fails.
     *
     * @deprecated since 1.4.x
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>File</name></type> <name>destFile</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>filtering</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>copyFile</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>,
            <argument><expr><name>filtering</name> ? <name>globalFilters</name> : <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy a file from a source to a
     * destination specifying if token filtering should be used and if
     * source files may overwrite newer destination files.
     *
     * @param sourceFile File to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param destFile File to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param filtering Whether or not token filtering should be used during
     *                  the copy.
     * @param overwrite Whether or not the destination file should be
     *                  overwritten if it already exists.
     *
     * @exception IOException if the file cannot be copied.
     *
     * @deprecated since 1.4.x
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>File</name></type> <name>destFile</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>filtering</name></decl></param>,
                         <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>copyFile</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>,
            <argument><expr><name>filtering</name> ? <name>globalFilters</name> : <name>null</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to copy a file from a source to a
     * destination specifying if token filtering should be used, if
     * source files may overwrite newer destination files, and if the
     * last modified time of the resulting file should be set to
     * that of the source file.
     *
     * @param sourceFile File to copy from.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param destFile File to copy to.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param filtering Whether or not token filtering should be used during
     *                  the copy.
     * @param overwrite Whether or not the destination file should be
     *                  overwritten if it already exists.
     * @param preserveLastModified Whether or not the last modified time of
     *                             the resulting file should be set to that
     *                             of the source file.
     *
     * @exception IOException if the file cannot be copied.
     *
     * @deprecated since 1.4.x
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>File</name></type> <name>destFile</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>filtering</name></decl></param>,
                         <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>preserveLastModified</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>copyFile</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>,
            <argument><expr><name>filtering</name> ? <name>globalFilters</name> : <name>null</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>preserveLastModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Call File.setLastModified(long time) on Java above 1.1, and logs
     * a warning on Java 1.1.
     *
     * @param file The file to set the last modified time on.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @param time the required modification time.
     *
     * @deprecated since 1.4.x
     *
     * @exception BuildException if the last modified time cannot be set
     *                           despite running on a platform with a version
     *                           above 1.1.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFileLastModified</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>long</name></type> <name>time</name></decl></param>)</parameter_list>
         <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>setFileLastModified</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Setting modification time for " + <name>file</name></expr></argument>, <argument><expr><name>MSG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the boolean equivalent of a string, which is considered
     * &lt;code&gt;true&lt;/code&gt; if either &lt;code&gt;"on"&lt;/code&gt;, &lt;code&gt;"true"&lt;/code&gt;,
     * or &lt;code&gt;"yes"&lt;/code&gt; is found, ignoring case.
     *
     * @param s The string to convert to a boolean value.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the given string is &lt;code&gt;"on"&lt;/code&gt;,
     *         &lt;code&gt;"true"&lt;/code&gt; or &lt;code&gt;"yes"&lt;/code&gt;, or
     *         &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>toBoolean</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>("on".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call>
                || "true".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call>
                || "yes".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the Project instance associated with the specified object.
     * @param o the object to query.
     * @return Project instance, if any.
     * @since Ant 1.7.1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>ProjectComponent</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>ProjectComponent</name>) <name>o</name>).<call><name>getProject</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>m</name> =<init> <expr><call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr>"getProject"</expr></argument>, <argument><expr>(<name><name>Class</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>Project</name>.<name><name/></name></name>class == <call><name><name>m</name>.<name>getReturnType</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>(<name>Project</name>) <call><name><name>m</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">//too bad</comment>
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Topologically sort a set of targets.  Equivalent to calling
     * &lt;code&gt;topoSort(new String[] {root}, targets, true)&lt;/code&gt;.
     *
     * @param root The name of the root target. The sort is created in such
     *             a way that the sequence of Targets up to the root
     *             target is the minimum possible such sequence.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param targetTable A Hashtable mapping names to Targets.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     * @return a Vector of ALL Target objects in sorted order.
     * @exception BuildException if there is a cyclic dependency among the
     *                           targets, or if a named target does not exist.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>topoSort</name><parameter_list>(<param><decl><type><name>String</name></type> <name>root</name></decl></param>, <param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>targetTable</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>topoSort</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>root</name></expr>}</block></expr></argument>, <argument><expr><name>targetTable</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Topologically sort a set of targets.  Equivalent to calling
     * &lt;code&gt;topoSort(new String[] {root}, targets, returnAll)&lt;/code&gt;.
     *
     * @param root The name of the root target. The sort is created in such
     *             a way that the sequence of Targets up to the root
     *             target is the minimum possible such sequence.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param targetTable A Hashtable mapping names to Targets.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param returnAll &lt;code&gt;boolean&lt;/code&gt; indicating whether to return all
     *                  targets, or the execution sequence only.
     * @return a Vector of Target objects in sorted order.
     * @exception BuildException if there is a cyclic dependency among the
     *                           targets, or if a named target does not exist.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>topoSort</name><parameter_list>(<param><decl><type><name>String</name></type> <name>root</name></decl></param>, <param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>targetTable</name></decl></param>,
                                 <param><decl><type><name>boolean</name></type> <name>returnAll</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>topoSort</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>root</name></expr>}</block></expr></argument>, <argument><expr><name>targetTable</name></expr></argument>, <argument><expr><name>returnAll</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Topologically sort a set of targets.
     *
     * @param root &lt;code&gt;String[]&lt;/code&gt; containing the names of the root targets.
     *             The sort is created in such a way that the ordered sequence of
     *             Targets is the minimum possible such sequence to the specified
     *             root targets.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param targetTable A map of names to targets (String to Target).
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param returnAll &lt;code&gt;boolean&lt;/code&gt; indicating whether to return all
     *                  targets, or the execution sequence only.
     * @return a Vector of Target objects in sorted order.
     * @exception BuildException if there is a cyclic dependency among the
     *                           targets, or if a named target does not exist.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>topoSort</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>root</name></decl></param>, <param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>targetTable</name></decl></param>,
                                 <param><decl><type><name>boolean</name></type> <name>returnAll</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>ret</name> =<init> <expr>new <call><name><name>VectorSet</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>state</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>visiting</name> =<init> <expr>new <call><name><name>Stack</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// We first run a DFS based sort using each root as a starting node.</comment>
        <comment type="line">// This creates the minimum sequence of Targets to the root node(s).</comment>
        <comment type="line">// We then do a sort on any remaining unVISITED targets.</comment>
        <comment type="line">// This is unnecessary for doing our build, but it catches</comment>
        <comment type="line">// circular dependencies or missing Targets on the entire</comment>
        <comment type="line">// dependency tree, not just on the Targets that depend on the</comment>
        <comment type="line">// build Target.</comment>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>root</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>st</name> =<init> <expr><call>(<name>String</name>) <argument_list>(<argument><expr><call><name><name>state</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>st</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>tsort</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>targetTable</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>visiting</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>st</name> == <name>VISITING</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Unexpected node in visiting state: "
                    + <name><name>root</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if></else></if>
        }</block></for>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"Build sequence for target(s)"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>root</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>j</name> == 0) ? " `" : ", `"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'\''</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>" is " + <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MSG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>complete</name> =<init> <expr>(<name>returnAll</name>) ? <name>ret</name> : new <call><name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>en</name> =<init> <expr><call><name><name>targetTable</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>en</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>curTarget</name> =<init> <expr><call><name><name>en</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>st</name> =<init> <expr><call><name><name>state</name>.<name>get</name></name><argument_list>(<argument><expr><name>curTarget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>st</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>tsort</name><argument_list>(<argument><expr><name>curTarget</name></expr></argument>, <argument><expr><name>targetTable</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>visiting</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>st</name> == <name>VISITING</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Unexpected node in visiting state: "
                    + <name>curTarget</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Complete build sequence is " + <name>complete</name></expr></argument>, <argument><expr><name>MSG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Perform a single step in a recursive depth-first-search traversal of
     * the target dependency tree.
     * &lt;p&gt;
     * The current target is first set to the &amp;quot;visiting&amp;quot; state, and
     * pushed onto the &amp;quot;visiting&amp;quot; stack.
     * &lt;p&gt;
     * An exception is then thrown if any child of the current node is in the
     * visiting state, as that implies a circular dependency. The exception
     * contains details of the cycle, using elements of the &amp;quot;visiting&amp;quot;
     * stack.
     * &lt;p&gt;
     * If any child has not already been &amp;quot;visited&amp;quot;, this method is
     * called recursively on it.
     * &lt;p&gt;
     * The current target is then added to the ordered list of targets. Note
     * that this is performed after the children have been visited in order
     * to get the correct order. The current target is set to the
     * &amp;quot;visited&amp;quot; state.
     * &lt;p&gt;
     * By the time this method returns, the ordered list contains the sequence
     * of targets up to and including the current target.
     *
     * @param root The current target to inspect.
     *             Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param targetTable A mapping from names to targets (String to Target).
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param state   A mapping from target names to states (String to String).
     *                The states in question are &amp;quot;VISITING&amp;quot; and
     *                &amp;quot;VISITED&amp;quot;. Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param visiting A stack of targets which are currently being visited.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param ret     The list to add target names to. This will end up
     *                containing the complete list of dependencies in
     *                dependency order.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if a non-existent target is specified or if
     *                           a circular dependency is detected.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>tsort</name><parameter_list>(<param><decl><type><name>String</name></type> <name>root</name></decl></param>, <param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>targetTable</name></decl></param>,
                             <param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>state</name></decl></param>, <param><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>visiting</name></decl></param>,
                             <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>ret</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>state</name>.<name>put</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>VISITING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>visiting</name>.<name>push</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Target</name></type> <name>target</name> =<init> <expr><call><name><name>targetTable</name>.<name>get</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Make sure we exist</comment>
        <if>if <condition>(<expr><name>target</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"Target \""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"\" does not exist in the project \""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"\". "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>visiting</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>visiting</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>parent</name> =<init> <expr><call><name><name>visiting</name>.<name>peek</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"It is used from target \""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"\"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>en</name> =<init> <expr><call><name><name>target</name>.<name>getDependencies</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>en</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>cur</name> =<init> <expr><call><name><name>en</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>m</name> =<init> <expr><call><name><name>state</name>.<name>get</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>m</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// Not been visited</comment>
                <expr_stmt><expr><call><name>tsort</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>targetTable</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>visiting</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>m</name> == <name>VISITING</name></expr>)</condition><then> <block>{
                <comment type="line">// Currently visiting this node, so have a cycle</comment>
                <throw>throw <expr><call><name>makeCircularException</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>visiting</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if></else></if>
        }</block></for>
        <decl_stmt><decl><type><name>String</name></type> <name>p</name> =<init> <expr><call><name><name>visiting</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>root</name> != <name>p</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Unexpected internal error: expected to "
                + "pop " + <name>root</name> + " but got " + <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>state</name>.<name>put</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>VISITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Build an appropriate exception detailing a specified circular
     * dependency.
     *
     * @param end The dependency to stop at. Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param stk A stack of dependencies. Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a BuildException detailing the specified circular dependency.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>BuildException</name></type> <name>makeCircularException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>end</name></decl></param>, <param><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stk</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"Circular dependency: "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>c</name></decl>;</decl_stmt>
        <do>do <block>{
            <expr_stmt><expr><name>c</name> = <call><name><name>stk</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" &lt;- "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> while <condition>(<expr>!<call><name><name>c</name>.<name>equals</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Inherit the id references.
     * @param parent the parent project of this project.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>inheritIDReferences</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>parent</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * Add an id reference.
     * Used for broken build files.
     * @param id the id to set.
     * @param value the value to set it to (Unknown element in this case.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addIdReference</name><parameter_list>(<param><decl><type><name>String</name></type> <name>id</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>idReferences</name>.<name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a reference to the project.
     *
     * @param referenceName The name of the reference. Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param value The value of the reference.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addReference</name><parameter_list>(<param><decl><type><name>String</name></type> <name>referenceName</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>old</name> =<init> <expr>((<name>AntRefTable</name>) <name>references</name>).<call><name>getReal</name><argument_list>(<argument><expr><name>referenceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>old</name> == <name>value</name></expr>)</condition><then> <block>{
            <comment type="line">// no warning, this is not changing anything</comment>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>old</name> != <name>null</name> &amp;&amp; !(<name>old</name> <name>instanceof</name> <name>UnknownElement</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Overriding previous definition of reference to " + <name>referenceName</name></expr></argument>,
                <argument><expr><name>MSG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Adding reference: " + <name>referenceName</name></expr></argument>, <argument><expr><name>MSG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>references</name>.<name>put</name></name><argument_list>(<argument><expr><name>referenceName</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return a map of the references in the project (String to Object).
     * The returned hashtable is &amp;quot;live&amp;quot; and so must not be modified.
     *
     * @return a map of the references in the project (String to Object).
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getReferences</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>references</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Does the project know this reference?
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasReference</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>references</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a map of the references in the project (String to
     * Object).  The returned hashtable is a copy of the
     * &amp;quot;live&amp;quot; references.
     *
     * @return a map of the references in the project (String to Object).
     *
     * @since Ant 1.8.1
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getCopyOfReferences</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>references</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Look up a reference by its key (ID).
     *
     * @param key The key for the desired reference.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return the reference with the specified ID, or &lt;code&gt;null&lt;/code&gt; if
     *         there is no such reference in the project, with type inference.
     */</comment>
    <function><type><specifier>public</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name>T</name></type> <name>getReference</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
        <specifier>final</specifier> <name>T</name></type> <name>ret</name> =<init> <expr>(<name>T</name>) <call><name><name>references</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ret</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>ret</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>key</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>REFID_PROPERTY_HELPER</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <if>if <condition>(<expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>containsProperties</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Unresolvable reference " + <name>key</name>
                            + " might be a misuse of property expansion syntax."</expr></argument>, <argument><expr><name>MSG_WARN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">//ignore</comment>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a description of the type of the given element, with
     * special handling for instances of tasks and data types.
     * &lt;p&gt;
     * This is useful for logging purposes.
     *
     * @param element The element to describe.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a description of the element type.
     *
     * @since 1.95, Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getElementName</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>element</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<call><name>getElementName</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;build started&amp;quot; event
     * to the build listeners for this project.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fireBuildStarted</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>currListeners</name> =<init> <expr><name>listeners</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>currListeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>buildStarted</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;build finished&amp;quot; event to the build listeners
     * for this project.
     * @param exception an exception indicating a reason for a build
     *                  failure. May be &lt;code&gt;null&lt;/code&gt;, indicating
     *                  a successful build.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fireBuildFinished</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>exception</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>event</name>.<name>setException</name></name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>currListeners</name> =<init> <expr><name>listeners</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>currListeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>buildFinished</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">// Inform IH to clear the cache</comment>
        <expr_stmt><expr><call><name><name>IntrospectionHelper</name>.<name>clearCache</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;subbuild started&amp;quot; event to the build listeners for
     * this project.
     *
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fireSubBuildStarted</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>currListeners</name> =<init> <expr><name>listeners</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>currListeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name> <name>instanceof</name> <name>SubBuildListener</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>SubBuildListener</name>) <name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name>).<call><name>subBuildStarted</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;subbuild finished&amp;quot; event to the build listeners for
     * this project.
     * @param exception an exception indicating a reason for a build
     *                  failure. May be &lt;code&gt;null&lt;/code&gt;, indicating
     *                  a successful build.
     *
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fireSubBuildFinished</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>exception</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>event</name>.<name>setException</name></name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>currListeners</name> =<init> <expr><name>listeners</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>currListeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name> <name>instanceof</name> <name>SubBuildListener</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>SubBuildListener</name>) <name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name>).<call><name>subBuildFinished</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;target started&amp;quot; event to the build listeners
     * for this project.
     *
     * @param target The target which is starting to build.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireTargetStarted</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>currListeners</name> =<init> <expr><name>listeners</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>currListeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>targetStarted</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;target finished&amp;quot; event to the build listeners
     * for this project.
     *
     * @param target    The target which has finished building.
     *                  Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param exception an exception indicating a reason for a build
     *                  failure. May be &lt;code&gt;null&lt;/code&gt;, indicating
     *                  a successful build.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireTargetFinished</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>exception</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>event</name>.<name>setException</name></name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>currListeners</name> =<init> <expr><name>listeners</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>currListeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>targetFinished</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;task started&amp;quot; event to the build listeners
     * for this project.
     *
     * @param task The target which is starting to execute.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireTaskStarted</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// register this as the current task on the current thread.</comment>
        <expr_stmt><expr><call><name>registerThreadTask</name><argument_list>(<argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>currListeners</name> =<init> <expr><name>listeners</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>currListeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>taskStarted</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;task finished&amp;quot; event to the build listeners for this
     * project.
     *
     * @param task      The task which has finished executing.
     *                  Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param exception an exception indicating a reason for a build
     *                  failure. May be &lt;code&gt;null&lt;/code&gt;, indicating
     *                  a successful build.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireTaskFinished</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>exception</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>registerThreadTask</name><argument_list>(<argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>event</name>.<name>setException</name></name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>currListeners</name> =<init> <expr><name>listeners</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>currListeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>taskFinished</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;message logged&amp;quot; event to the build listeners
     * for this project.
     *
     * @param event    The event to send. This should be built up with the
     *                 appropriate task/target/project by the caller, so that
     *                 this method can set the message and priority, then send
     *                 the event. Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param message  The message to send. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param priority The priority of the message.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>fireMessageLoggedEvent</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>,
                                        <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>message</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>message</name> = <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>message</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> =<init> <expr><call><name><name>message</name>.<name>length</name></name><argument_list>()</argument_list></call> - <call><name><name>StringUtils</name>.<name>LINE_SEP</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>event</name>.<name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>message</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>event</name>.<name>setMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name><name>isLoggingMessage</name>.<name>get</name></name><argument_list>()</argument_list></call> != <name><name>Boolean</name>.<name>FALSE</name></name></expr>)</condition><then> <block>{
            <comment type="block">/*
             * One of the Listeners has attempted to access
             * System.err or System.out.
             *
             * We used to throw an exception in this case, but
             * sometimes Listeners can't prevent it(like our own
             * Log4jListener which invokes getLogger() which in
             * turn wants to write to the console).
             *
             * @see http://marc.theaimsgroup.com/?t=110538624200006&amp;r=1&amp;w=2
             *
             * We now (Ant 1.6.3 and later) simply swallow the message.
             */</comment>
            <return>return;</return>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>isLoggingMessage</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Boolean</name>.<name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>BuildListener</name><index>[]</index></type> <name>currListeners</name> =<init> <expr><name>listeners</name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>currListeners</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>currListeners</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>messageLogged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>isLoggingMessage</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;message logged&amp;quot; project level event
     * to the build listeners for this project.
     *
     * @param project  The project generating the event.
     *                 Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param message  The message to send. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param priority The priority of the message.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireMessageLogged</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>,
                                     <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fireMessageLogged</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;message logged&amp;quot; project level event
     * to the build listeners for this project.
     *
     * @param project  The project generating the event.
     *                 Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param message  The message to send. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param throwable The exception that caused this message. May be &lt;code&gt;null&lt;/code&gt;.
     * @param priority The priority of the message.
     * @since 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireMessageLogged</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>,
            <param><decl><type><name>Throwable</name></type> <name>throwable</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>event</name>.<name>setException</name></name><argument_list>(<argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireMessageLoggedEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;message logged&amp;quot; target level event
     * to the build listeners for this project.
     *
     * @param target   The target generating the event.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param message  The message to send. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param priority The priority of the message.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireMessageLogged</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>,
                                     <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fireMessageLogged</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;message logged&amp;quot; target level event
     * to the build listeners for this project.
     *
     * @param target   The target generating the event.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param message  The message to send. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param throwable The exception that caused this message. May be &lt;code&gt;null&lt;/code&gt;.
     * @param priority The priority of the message.
     * @since 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireMessageLogged</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>,
            <param><decl><type><name>Throwable</name></type> <name>throwable</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>event</name>.<name>setException</name></name><argument_list>(<argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireMessageLoggedEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;message logged&amp;quot; task level event
     * to the build listeners for this project.
     *
     * @param task     The task generating the event.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param message  The message to send. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param priority The priority of the message.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireMessageLogged</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fireMessageLogged</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Send a &amp;quot;message logged&amp;quot; task level event
     * to the build listeners for this project.
     *
     * @param task     The task generating the event.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param message  The message to send. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param throwable The exception that caused this message. May be &lt;code&gt;null&lt;/code&gt;.
     * @param priority The priority of the message.
     * @since 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireMessageLogged</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>,
            <param><decl><type><name>Throwable</name></type> <name>throwable</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildEvent</name></type> <name>event</name> =<init> <expr>new <call><name>BuildEvent</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>event</name>.<name>setException</name></name><argument_list>(<argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireMessageLoggedEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Register a task as the current task for a thread.
     * If the task is null, the thread's entry is removed.
     *
     * @param thread the thread on which the task is registered.
     * @param task the task to be registered.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerThreadTask</name><parameter_list>(<param><decl><type><name>Thread</name></type> <name>thread</name></decl></param>, <param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <synchronized>synchronized(<expr><name>threadTasks</name></expr>) <block>{
            <if>if <condition>(<expr><name>task</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>threadTasks</name>.<name>put</name></name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>threadGroupTasks</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>thread</name>.<name>getThreadGroup</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>threadTasks</name>.<name>remove</name></name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>threadGroupTasks</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name><name>thread</name>.<name>getThreadGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></synchronized>
    }</block></function>

    <comment type="javadoc">/**
     * Get the current task associated with a thread, if any.
     *
     * @param thread the thread for which the task is required.
     * @return the task which is currently registered for the given thread or
     *         null if no task is registered.
     */</comment>
    <function><type><specifier>public</specifier> <name>Task</name></type> <name>getThreadTask</name><parameter_list>(<param><decl><type><name>Thread</name></type> <name>thread</name></decl></param>)</parameter_list> <block>{
        <synchronized>synchronized(<expr><name>threadTasks</name></expr>) <block>{
            <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr>(<name>Task</name>) <call><name><name>threadTasks</name>.<name>get</name></name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>task</name> == <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ThreadGroup</name></type> <name>group</name> =<init> <expr><call><name><name>thread</name>.<name>getThreadGroup</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>task</name> == <name>null</name> &amp;&amp; <name>group</name> != <name>null</name></expr>)</condition> <block>{
                    <expr_stmt><expr><name>task</name> = (<name>Task</name>) <call><name><name>threadGroupTasks</name>.<name>get</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>group</name> = <call><name><name>group</name>.<name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>
            <return>return <expr><name>task</name></expr>;</return>
        }</block></synchronized>
    }</block></function>


    <comment type="line">// Should move to a separate public class - and have API to add</comment>
    <comment type="line">// listeners, etc.</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>AntRefTable</name> <super><extends>extends <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1L</expr></init></decl>;</decl_stmt>

        <constructor><name>AntRefTable</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/** Returns the unmodified original object.
         * This method should be called internally to
         * get the &amp;quot;real&amp;quot; object.
         * The normal get method will do the replacement
         * of UnknownElement (this is similar with the JDNI
         * refs behavior).
         */</comment>
        <function><type><specifier>private</specifier> <name>Object</name></type> <name>getReal</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>super</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/** Get method for the reference table.
         *  It can be used to hook dynamic references and to modify
         * some references on the fly--for example for delayed
         * evaluation.
         *
         * It is important to make sure that the processing that is
         * done inside is not calling get indirectly.
         *
         * @param key lookup key.
         * @return mapped value.
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getReal</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>UnknownElement</name></expr>)</condition><then> <block>{
                <comment type="line">// Make sure that</comment>
                <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ue</name> =<init> <expr>(<name>UnknownElement</name>) <name>o</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ue</name>.<name>maybeConfigure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>o</name> = <call><name><name>ue</name>.<name>getRealThing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>o</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Set a reference to this Project on the parameterized object.
     * Need to set the project before other set/add elements
     * are called.
     * @param obj the object to invoke setProject(this) on.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setProjectReference</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>ProjectComponent</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>ProjectComponent</name>) <name>obj</name>).<call><name>setProject</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name> =<init>
                <expr><call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(
                    <argument><expr>"setProject"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Project</name>.<name><name/></name></name>class</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>method</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>method</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>this</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignore this if the object does not have</comment>
            <comment type="line">// a set project method or the method</comment>
            <comment type="line">// is private/protected.</comment>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Resolve the file relative to the project's basedir and return it as a
     * FileResource.
     * @param name the name of the file to resolve.
     * @return the file resource.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Resource</name></type> <name>getResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
