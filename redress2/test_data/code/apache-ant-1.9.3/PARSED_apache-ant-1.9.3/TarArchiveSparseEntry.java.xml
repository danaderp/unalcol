<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\tar\TarArchiveSparseEntry.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<comment type="javadoc">/**
 * This class represents a sparse entry in a Tar archive.
 *
 * &lt;p&gt;
 * The C structure for a sparse entry is:
 * &lt;pre&gt;
 * struct posix_header {
 * struct sparse sp[21]; // TarConstants.SPARSELEN_GNU_SPARSE     - offset 0
 * char isextended;      // TarConstants.ISEXTENDEDLEN_GNU_SPARSE - offset 504
 * };
 * &lt;/pre&gt;
 * Whereas, "struct sparse" is:
 * &lt;pre&gt;
 * struct sparse {
 * char offset[12];   // offset 0
 * char numbytes[12]; // offset 12
 * };
 * &lt;/pre&gt;
 */</comment>

<class><specifier>public</specifier> class <name>TarArchiveSparseEntry</name> <super><implements>implements <name>TarConstants</name></implements></super> <block>{
    <comment type="javadoc">/** If an extension sparse header follows. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isExtended</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct an entry from an archive's header bytes. File is set
     * to null.
     *
     * @param headerBuf The header bytes from a tar archive entry.
     * @throws IOException on unknown format
     */</comment>
    <constructor><specifier>public</specifier> <name>TarArchiveSparseEntry</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>headerBuf</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>offset</name> += <name>SPARSELEN_GNU_SPARSE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>isExtended</name> = <call><name><name>TarUtils</name>.<name>parseBoolean</name></name><argument_list>(<argument><expr><name>headerBuf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isExtended</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>isExtended</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
