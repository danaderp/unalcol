<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\SourceFileScanner.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>

<comment type="javadoc">/**
 * Utility class that collects the functionality of the various
 * scanDir methods that have been scattered in several tasks before.
 *
 * &lt;p&gt;The only method returns an array of source files. The array is a
 * subset of the files given as a parameter and holds only those that
 * are newer than their corresponding target files.&lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>SourceFileScanner</name> <super><implements>implements <name>ResourceFactory</name></implements></super> <block>{

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Task</name></type> <name>task</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>destDir</name></decl>;</decl_stmt>     <comment type="line">// base directory of the fileset</comment>

    <comment type="javadoc">/**
     * Construct a new SourceFileScanner.
     * @param task The task we should log messages through.
     */</comment>
    <constructor><specifier>public</specifier> <name>SourceFileScanner</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Restrict the given set of files to those that are newer than
     * their corresponding target files.
     *
     * @param files   the original set of files.
     * @param srcDir  all files are relative to this directory.
     * @param destDir target files live here. if null file names
     *                returned by the mapper are assumed to be absolute.
     * @param mapper  knows how to construct a target file names from
     *                source file names.
     * @return an array of filenames.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>restrict</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name></decl></param>, <param><decl><type><name>File</name></type> <name>srcDir</name></decl></param>, <param><decl><type><name>File</name></type> <name>destDir</name></decl></param>,
                             <param><decl><type><name>FileNameMapper</name></type> <name>mapper</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>restrict</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>srcDir</name></expr></argument>, <argument><expr><name>destDir</name></expr></argument>, <argument><expr><name>mapper</name></expr></argument>,
                        <argument><expr><call><name><name>FILE_UTILS</name>.<name>getFileTimestampGranularity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Restrict the given set of files to those that are newer than
     * their corresponding target files.
     *
     * @param files   the original set of files.
     * @param srcDir  all files are relative to this directory.
     * @param destDir target files live here. If null file names
     *                returned by the mapper are assumed to be absolute.
     * @param mapper  knows how to construct a target file names from
     *                source file names.
     * @param granularity The number of milliseconds leeway to give
     *                    before deciding a target is out of date.
     * @return an array of filenames.
     *
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>restrict</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name></decl></param>, <param><decl><type><name>File</name></type> <name>srcDir</name></decl></param>, <param><decl><type><name>File</name></type> <name>destDir</name></decl></param>,
                             <param><decl><type><name>FileNameMapper</name></type> <name>mapper</name></decl></param>, <param><decl><type><name>long</name></type> <name>granularity</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// record destdir for later use in getResource</comment>
        <expr_stmt><expr><name><name>this</name>.<name>destDir</name></name> = <name>destDir</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Vector</name></type> <name>v</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> =<init> <expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>v</name>.<name>addElement</name></name><argument_list>(<argument><expr>new <class><super><name>FileResource</name></super><argument_list>(<argument><expr><name>srcDir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
                    <return>return <expr><name>name</name></expr>;</return>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>Resource</name><index>[]</index></type> <name>sourceresources</name> =<init> <expr>new <name><name>Resource</name><index>[<expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>v</name>.<name>copyInto</name></name><argument_list>(<argument><expr><name>sourceresources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// build the list of sources which are out of date with</comment>
        <comment type="line">// respect to the target</comment>
        <decl_stmt><decl><type><name>Resource</name><index>[]</index></type> <name>outofdate</name> =<init>
            <expr><call><name><name>ResourceUtils</name>.<name>selectOutOfDateSources</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>sourceresources</name></expr></argument>,
                                                 <argument><expr><name>mapper</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>granularity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>String</name><index>[<expr><name><name>outofdate</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>outofdate</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>counter</name></expr>]</index></name> = <name><name>outofdate</name><index>[<expr><name>counter</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience layer on top of restrict that returns the source
     * files as File objects (containing absolute paths if srcDir is
     * absolute).
     * @param files   the original set of files.
     * @param srcDir  all files are relative to this directory.
     * @param destDir target files live here. If null file names
     *                returned by the mapper are assumed to be absolute.
     * @param mapper  knows how to construct a target file names from
     *                source file names.
     * @return an array of files.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name><index>[]</index></type> <name>restrictAsFiles</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name></decl></param>, <param><decl><type><name>File</name></type> <name>srcDir</name></decl></param>, <param><decl><type><name>File</name></type> <name>destDir</name></decl></param>,
                                  <param><decl><type><name>FileNameMapper</name></type> <name>mapper</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>restrictAsFiles</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>srcDir</name></expr></argument>, <argument><expr><name>destDir</name></expr></argument>, <argument><expr><name>mapper</name></expr></argument>,
                               <argument><expr><call><name><name>FILE_UTILS</name>.<name>getFileTimestampGranularity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience layer on top of restrict that returns the source
     * files as File objects (containing absolute paths if srcDir is
     * absolute).
     *
     * @param files   the original set of files.
     * @param srcDir  all files are relative to this directory.
     * @param destDir target files live here. If null file names
     *                returned by the mapper are assumed to be absolute.
     * @param mapper  knows how to construct a target file names from
     *                source file names.
     * @param granularity The number of milliseconds leeway to give
     *                    before deciding a target is out of date.
     * @return an array of files.
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name><index>[]</index></type> <name>restrictAsFiles</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name></decl></param>, <param><decl><type><name>File</name></type> <name>srcDir</name></decl></param>, <param><decl><type><name>File</name></type> <name>destDir</name></decl></param>,
                                  <param><decl><type><name>FileNameMapper</name></type> <name>mapper</name></decl></param>, <param><decl><type><name>long</name></type> <name>granularity</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>res</name> =<init> <expr><call><name>restrict</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>srcDir</name></expr></argument>, <argument><expr><name>destDir</name></expr></argument>, <argument><expr><name>mapper</name></expr></argument>, <argument><expr><name>granularity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>File</name><index>[<expr><name><name>res</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>res</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>File</name><argument_list>(<argument><expr><name>srcDir</name></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns resource information for a file at destination.
     * @param name relative path of file at destination.
     * @return data concerning a file whose relative path to destDir is name.
     *
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <name>Resource</name></type> <name>getResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>destDir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>

</unit>
