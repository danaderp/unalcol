<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\comparators\Reverse.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>comparators</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Stack</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>DataType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>

<comment type="javadoc">/**
 * Reverses another ResourceComparator.  If no nested ResourceComparator
 * is supplied, the compared Resources' natural order will be reversed.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Reverse</name> <super><extends>extends <name>ResourceComparator</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ONE_NESTED</name>
        =<init> <expr>"You must not nest more than one ResourceComparator for reversal."</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ResourceComparator</name></type> <name>nested</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>Reverse</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new Reverse, supplying the ResourceComparator to be reversed.
     * @param c the ResourceComparator to reverse.
     */</comment>
    <constructor><specifier>public</specifier> <name>Reverse</name><parameter_list>(<param><decl><type><name>ResourceComparator</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Add the ResourceComparator to reverse.
     * @param c the ResourceComparator to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceComparator</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>nested</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ONE_NESTED</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>nested</name> = <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Compare two Resources.
     * @param foo the first Resource.
     * @param bar the second Resource.
     * @return a negative integer, zero, or a positive integer as the first
     *         argument is greater than, equal to, or less than the second.
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>resourceCompare</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>foo</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>bar</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>-1 * (<name>nested</name> == <name>null</name>
            ? <call><name><name>foo</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call> : <call><name><name>nested</name>.<name>compare</name></name><argument_list>(<argument><expr><name>foo</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>dieOnCircularReference</name><parameter_list>(<param><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>stk</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isChecked</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>dieOnCircularReference</name></name><argument_list>(<argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>nested</name> <name>instanceof</name> <name>DataType</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>pushAndInvokeCircularReferenceCheck</name><argument_list>(<argument><expr>(<name>DataType</name>) <name>nested</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>,
                                                    <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
