<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\PathConvert.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Resources</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>IdentityMapper</name></name>;</import>

<comment type="javadoc">/**
 * Converts path and classpath information to a specific target OS
 * format. The resulting formatted path is placed into the specified property.
 *
 * @since Ant 1.4
 * @ant.task category="utility"
 */</comment>
<class><specifier>public</specifier> class <name>PathConvert</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Set if we're running on windows
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>onWindows</name> =<init> <expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Members</comment>
    <comment type="javadoc">/**
     * Path to be converted
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resources</name></type> <name>path</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Reference to path/fileset to convert
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Reference</name></type> <name>refid</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The target OS type
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>targetOS</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Set when targetOS is set to windows
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>targetWindows</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Set if we should create a new property even if the result is empty
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>setonempty</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The property to receive the conversion
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>property</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Path prefix map
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>prefixMap</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * User override on path sep char
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathSep</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * User override on directory sep char
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>dirSep</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Filename mapper */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Mapper</name></type> <name>mapper</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>preserveDuplicates</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a new instance of the PathConvert task.
     */</comment>
    <constructor><specifier>public</specifier> <name>PathConvert</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Helper class, holds the nested &amp;lt;map&amp;gt; values. Elements will look like
     * this: &amp;lt;map from=&amp;quot;d:&amp;quot; to=&amp;quot;/foo&amp;quot;/&amp;gt;
     *
     * When running on windows, the prefix comparison will be case
     * insensitive.
     */</comment>
    <class><specifier>public</specifier> class <name>MapEntry</name> <block>{

        <comment type="line">// Members</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>from</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>to</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set the &amp;quot;from&amp;quot; attribute of the map entry.
         * @param from the prefix string to search for; required.
         * Note that this value is case-insensitive when the build is
         * running on a Windows platform and case-sensitive when running on
         * a Unix platform.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>from</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>from</name></name> = <name>from</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Set the replacement text to use when from is matched; required.
         * @param to new prefix.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>to</name></name> = <name>to</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Apply this map entry to a given path element.
         *
         * @param elem Path element to process.
         * @return String Updated path element after mapping.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>String</name></type> <name>elem</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>from</name> == <name>null</name> || <name>to</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Both 'from' and 'to' must be set "
                     + "in a map entry"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <comment type="line">// If we're on windows, then do the comparison ignoring case</comment>
            <comment type="line">// and treat the two directory characters the same</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>cmpElem</name> =<init>
                <expr><name>onWindows</name> ? <call><name><name>elem</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> : <name>elem</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>cmpFrom</name> =<init>
                <expr><name>onWindows</name> ? <call><name><name>from</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> : <name>from</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// If the element starts with the configured prefix, then</comment>
            <comment type="line">// convert the prefix to the configured 'to' value.</comment>

            <return>return <expr><call><name><name>cmpElem</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>cmpFrom</name></expr></argument>)</argument_list></call>
                ? <name>to</name> + <call><name><name>elem</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : <name>elem</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * An enumeration of supported targets:
     * "windows", "unix", "netware", and "os/2".
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TargetOs</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/**
         * @return the list of values for this enumerated attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name><block>{<expr>"windows"</expr>, <expr>"unix"</expr>, <expr>"netware"</expr>, <expr>"os/2"</expr>, <expr>"tandem"</expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Create a nested path element.
     * @return a Path to be used by Ant reflection.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createPath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Path</name></type> <name>result</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add an arbitrary ResourceCollection.
     * @param rc the ResourceCollection to add.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>getPath</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>Resources</name></type> <name>getPath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>path</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>path</name> = new <call><name>Resources</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>path</name>.<name>setCache</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>path</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a nested MAP element.
     * @return a Map to configure.
     */</comment>
    <function><type><specifier>public</specifier> <name>MapEntry</name></type> <name>createMap</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>MapEntry</name></type> <name>entry</name> =<init> <expr>new <call><name>MapEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>prefixMap</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>entry</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set targetos to a platform to one of
     * "windows", "unix", "netware", or "os/2";
     * current platform settings are used by default.
     * @param target the target os.
     * @deprecated since 1.5.x.
     *             Use the method taking a TargetOs argument instead.
     * @see #setTargetos(PathConvert.TargetOs)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTargetos</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TargetOs</name></type> <name>to</name> =<init> <expr>new <call><name>TargetOs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>to</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTargetos</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set targetos to a platform to one of
     * "windows", "unix", "netware", or "os/2";
     * current platform settings are used by default.
     * @param target the target os
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTargetos</name><parameter_list>(<param><decl><type><name>TargetOs</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>targetOS</name> = <call><name><name>target</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Currently, we deal with only two path formats: Unix and Windows</comment>
        <comment type="line">// And Unix is everything that is not Windows</comment>

        <comment type="line">// for NetWare and OS/2, piggy-back on Windows, since in the</comment>
        <comment type="line">// validateSetup code, the same assumptions can be made as</comment>
        <comment type="line">// with windows - that ; is the path separator</comment>

        <expr_stmt><expr><name>targetWindows</name> = !<call><name><name>targetOS</name>.<name>equals</name></name><argument_list>(<argument><expr>"unix"</expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>targetOS</name>.<name>equals</name></name><argument_list>(<argument><expr>"tandem"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether the specified property will be set if the result
     * is the empty string.
     * @param setonempty true or false.
     *
     * @since Ant 1.5
     */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>setSetonempty</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>setonempty</name></decl></param>)</parameter_list> <block>{
         <expr_stmt><expr><name><name>this</name>.<name>setonempty</name></name> = <name>setonempty</name></expr>;</expr_stmt>
     }</block></function>

    <comment type="javadoc">/**
     * Set the name of the property into which the converted path will be placed.
     * @param p the property name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>property</name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a reference to a Path, FileSet, DirSet, or FileList defined elsewhere.
     * @param r the reference to a path, fileset, dirset or filelist.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>path</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>refid</name> = <name>r</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the default path separator string; defaults to current JVM
     * {@link java.io.File#pathSeparator File.pathSeparator}.
     * @param sep path separator string.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPathSep</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sep</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pathSep</name> = <name>sep</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Set the default directory separator string;
     * defaults to current JVM {@link java.io.File#separator File.separator}.
     * @param sep directory separator string.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDirSep</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sep</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>dirSep</name> = <name>sep</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the preserveDuplicates.
     * @param preserveDuplicates the boolean to set
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPreserveDuplicates</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>preserveDuplicates</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>preserveDuplicates</name></name> = <name>preserveDuplicates</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the preserveDuplicates.
     * @return boolean
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPreserveDuplicates</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>preserveDuplicates</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether the refid attribute of this element been set.
     * @return true if refid is valid.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReference</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>refid</name> != <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Do the execution.
     * @throws BuildException if something is invalid.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Resources</name></type> <name>savedPath</name> =<init> <expr><name>path</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>savedPathSep</name> =<init> <expr><name>pathSep</name></expr></init></decl>;</decl_stmt> <comment type="line">// may be altered in validateSetup</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>savedDirSep</name> =<init> <expr><name>dirSep</name></expr></init></decl>;</decl_stmt> <comment type="line">// may be altered in validateSetup</comment>

        <try>try <block>{
            <comment type="line">// If we are a reference, create a Path from the reference</comment>
            <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>refid</name>.<name>getReferencedObject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!(<name>o</name> <name>instanceof</name> <name>ResourceCollection</name>)</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"refid '" + <call><name><name>refid</name>.<name>getRefId</name></name><argument_list>()</argument_list></call>
                        + "' does not refer to a resource collection."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name>getPath</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr>(<name>ResourceCollection</name>) <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>validateSetup</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// validate our setup</comment>

            <comment type="line">// Currently, we deal with only two path formats: Unix and Windows</comment>
            <comment type="line">// And Unix is everything that is not Windows</comment>
            <comment type="line">// (with the exception for NetWare and OS/2 below)</comment>

            <comment type="line">// for NetWare and OS/2, piggy-back on Windows, since here and</comment>
            <comment type="line">// in the apply code, the same assumptions can be made as with</comment>
            <comment type="line">// windows - that \\ is an OK separator, and do comparisons</comment>
            <comment type="line">// case-insensitive.</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>fromDirSep</name> =<init> <expr><name>onWindows</name> ? "\\" : "/"</expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>rslt</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ResourceCollection</name></type> <name>resources</name> =<init> <expr><call><name>isPreserveDuplicates</name><argument_list>()</argument_list></call> ? (<name>ResourceCollection</name>) <name>path</name> : new <call><name>Union</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>List</name></type> <name>ret</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapperImpl</name> =<init> <expr><name>mapper</name> == <name>null</name> ? new <call><name>IdentityMapper</name><argument_list>()</argument_list></call> : <call><name><name>mapper</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resources</name></expr></range></decl></init>) <block>{
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>mapped</name> =<init> <expr><call><name><name>mapperImpl</name>.<name>mapFileName</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>m</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>mapped</name> != <name>null</name> &amp;&amp; <name>m</name> &lt; <name><name>mapped</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>m</name></expr></incr>) <block>{
                    <expr_stmt><expr><call><name><name>ret</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>mapped</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
            <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>Iterator</name></type> <name>mappedIter</name> =<init> <expr><call><name><name>ret</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>mappedIter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>elem</name> =<init> <expr><call><name>mapElement</name><argument_list>(<argument><expr>(<name>String</name>) <call><name><name>mappedIter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Apply the path prefix map</comment>

                <comment type="line">// Now convert the path and file separator characters from the</comment>
                <comment type="line">// current os to the target os.</comment>

                <if>if <condition>(<expr>!<name>first</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>rslt</name>.<name>append</name></name><argument_list>(<argument><expr><name>pathSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>first</name> = false</expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>stDirectory</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><name>fromDirSep</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <while>while <condition>(<expr><call><name><name>stDirectory</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>token</name> =<init> <expr><call><name><name>stDirectory</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>rslt</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>fromDirSep</name>.<name>equals</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> ? <name>dirSep</name> : <name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></for>
            <comment type="line">// Place the result into the specified property,</comment>
            <comment type="line">// unless setonempty == false</comment>
            <if>if <condition>(<expr><name>setonempty</name> || <call><name><name>rslt</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name><name>rslt</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>property</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Set property " + <name>property</name> + " = " + <name>value</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>path</name> = <name>savedPath</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dirSep</name> = <name>savedDirSep</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pathSep</name> = <name>savedPathSep</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Apply the configured map to a path element. The map is used to convert
     * between Windows drive letters and Unix paths. If no map is configured,
     * then the input string is returned unchanged.
     *
     * @param elem The path element to apply the map to.
     * @return String Updated element.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>mapElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>elem</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name><name>prefixMap</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>size</name> != 0</expr>)</condition><then> <block>{

            <comment type="line">// Iterate over the map entries and apply each one.</comment>
            <comment type="line">// Stop when one of the entries actually changes the element.</comment>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>MapEntry</name></type> <name>entry</name> =<init> <expr>(<name>MapEntry</name>) <call><name><name>prefixMap</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>newElem</name> =<init> <expr><call><name><name>entry</name>.<name>apply</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Note I'm using "!=" to see if we got a new object back from</comment>
                <comment type="line">// the apply method.</comment>

                <if>if <condition>(<expr><name>newElem</name> != <name>elem</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>elem</name> = <name>newElem</name></expr>;</expr_stmt>
                    <break>break;</break> <comment type="line">// We applied one, so we're done</comment>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>elem</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a mapper to convert the file names.
     *
     * @param mapper a &lt;code&gt;Mapper&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMapper</name><parameter_list>(<param><decl><type><name>Mapper</name></type> <name>mapper</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>mapper</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Cannot define more than one mapper"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>mapper</name></name> = <name>mapper</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a nested filenamemapper.
     * @param fileNameMapper the mapper to add.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Mapper</name></type> <name>m</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>m</name>.<name>add</name></name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addMapper</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Validate that all our parameters have been properly initialized.
     *
     * @throws BuildException if something is not set up properly.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateSetup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>path</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must specify a path to convert"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// Determine the separator strings.  The dirsep and pathsep attributes</comment>
        <comment type="line">// override the targetOS settings.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>dsep</name> =<init> <expr><name><name>File</name>.<name>separator</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>psep</name> =<init> <expr><name><name>File</name>.<name>pathSeparator</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>targetOS</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>psep</name> = <name>targetWindows</name> ? ";" : ":"</expr>;</expr_stmt>
            <expr_stmt><expr><name>dsep</name> = <name>targetWindows</name> ? "\\" : "/"</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>pathSep</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// override with pathsep=</comment>
            <expr_stmt><expr><name>psep</name> = <name>pathSep</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>dirSep</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// override with dirsep=</comment>
            <expr_stmt><expr><name>dsep</name> = <name>dirSep</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>pathSep</name> = <name>psep</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dirSep</name> = <name>dsep</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates an exception that indicates that this XML element must not have
     * child elements if the refid attribute is set.
     * @return BuildException.
     */</comment>
    <function><type><specifier>private</specifier> <name>BuildException</name></type> <name>noChildrenAllowed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must not specify nested "
             + "elements when using the refid attribute."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>

</unit>
