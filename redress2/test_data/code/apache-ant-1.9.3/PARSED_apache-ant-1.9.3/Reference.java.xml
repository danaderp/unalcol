<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\Reference.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Class to hold a reference to another object in the project.
 *
 */</comment>
<class><specifier>public</specifier> class <name>Reference</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>refid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create a reference.
     * @deprecated since 1.7.
     *             Please use {@link Reference#Reference(Project,String)}
     *             instead.
     */</comment>
    <constructor><specifier>public</specifier> <name>Reference</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Create a reference to a named ID.
     * @param id the name of this reference
     * @deprecated since 1.7.
     *             Please use {@link Reference#Reference(Project,String)}
     *             instead.
     */</comment>
    <constructor><specifier>public</specifier> <name>Reference</name><parameter_list>(<param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRefId</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create a reference to a named ID in a particular project.
     * @param p the project this reference is associated with
     * @param id the name of this reference
     * @since Ant 1.6.3
     */</comment>
    <constructor><specifier>public</specifier> <name>Reference</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>, <param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRefId</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProject</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the reference id. Should not normally be necessary;
     * use {@link Reference#Reference(Project, String)}.
     * @param id the reference id to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefId</name><parameter_list>(<param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>refid</name> = <name>id</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the reference id of this reference.
     * @return the reference id
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRefId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>refid</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the associated project. Should not normally be necessary;
     * use {@link Reference#Reference(Project,String)}.
     * @param p the project to use
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the associated project, if any; may be null.
     * @return the associated project
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Resolve the reference, using the associated project if
     * it set, otherwise use the passed in project.
     * @param fallback the fallback project to use if the project attribute of
     *                 reference is not set.
     * @return the dereferenced object.
     * @throws BuildException if the reference cannot be dereferenced.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getReferencedObject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>fallback</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>refid</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No reference specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><name>project</name> == <name>null</name> ? <call><name><name>fallback</name>.<name>getReference</name></name><argument_list>(<argument><expr><name>refid</name></expr></argument>)</argument_list></call> : <call><name><name>project</name>.<name>getReference</name></name><argument_list>(<argument><expr><name>refid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Reference " + <name>refid</name> + " not found."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>o</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Resolve the reference, looking in the associated project.
     * @see Project#getReference
     * @return the dereferenced object.
     * @throws BuildException if the project is null or the reference cannot be dereferenced
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getReferencedObject</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>project</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No project set on reference to " + <name>refid</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>getReferencedObject</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
