<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\XmlValidateTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 * Tests the XMLValidate optional task, by running targets in the test script
 * &lt;code&gt;src/etc/testcases/taskdefs/optional/xmlvalidate.xml&lt;/code&gt;
 * &lt;p&gt;
 *
 * @see XmlValidateCatalogTest
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>XmlValidateTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <comment type="javadoc">/**
     * where tasks run
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TASKDEFS_DIR</name> =<init>
        <expr>"src/etc/testcases/taskdefs/optional/"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor
     *
     * @param name testname
     */</comment>
    <constructor><specifier>public</specifier> <name>XmlValidateTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * The JUnit setup method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>TASKDEFS_DIR</name> + "xmlvalidate.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The teardown method for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{}</block></function>

    <comment type="javadoc">/**
     * Basic inline 'dtd' element test.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValidate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testValidate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test indirect validation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDeepValidate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDeepValidate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXmlCatalog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"xmlcatalog"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXmlCatalogViaRefid</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"xmlcatalogViaRefid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test that the nested dtd element is used when resolver.jar is not
     * present.  This test should pass either way.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXmlCatalogFiles</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"xmlcatalogfiles-override"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test nested catalogpath.
     * Test that the nested dtd element is used when resolver.jar is not
     * present.  This test should pass either way.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXmlCatalogPath</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"xmlcatalogpath-override"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test nested xmlcatalog definitions
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXmlCatalogNested</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"xmlcatalognested"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test xml schema validation
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXmlSchemaGood</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testSchemaGood"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><call><name><name>e</name>
                .<name>getMessage</name></name><argument_list>()</argument_list></call>
                .<call><name>endsWith</name><argument_list>(<argument><expr>" doesn't recognize feature http://apache.org/xml/features/validation/schema"</expr></argument>)</argument_list></call>
                || <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(
                    <argument><expr>" doesn't support feature http://apache.org/xml/features/validation/schema"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>" skipped, parser doesn't support schema"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></else></if>
        }</block></catch></try>
    }</block></function>
    <comment type="javadoc">/**
     * Test xml schema validation
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXmlSchemaBad</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testSchemaBad"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should throw BuildException because 'Bad Schema Validation'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(
                <argument><expr>"testSchemaBad"</expr></argument>,
                <argument><expr>"Bad Schema Validation"</expr></argument>,
                <argument><expr>"not a valid XML document"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><call><name><name>e</name>
                .<name>getMessage</name></name><argument_list>()</argument_list></call>
                .<call><name>endsWith</name><argument_list>(<argument><expr>" doesn't recognize feature http://apache.org/xml/features/validation/schema"</expr></argument>)</argument_list></call>
                || <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(
                    <argument><expr>" doesn't support feature http://apache.org/xml/features/validation/schema"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>" skipped, parser doesn't support schema"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
                    <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"not a valid XML document"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * iso-2022-jp.xml is valid but wouldn't get recognized on systems
     * with a different native encoding.
     *
     * Bug 11279
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIso2022Jp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIso2022Jp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * utf-8.xml is invalid as it contains non-UTF-8 characters, but
     * would pass on systems with a native iso-8859-1 (or similar)
     * encoding.
     *
     * Bug 11279
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUtf8</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testUtf8"</expr></argument>, <argument><expr>"invalid characters in file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Tests property element, using XML schema properties as an example.</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPropertySchemaForValidXML</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testProperty.validXML"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPropertySchemaForInvalidXML</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(
            <argument><expr>"testProperty.invalidXML"</expr></argument>,
            <argument><expr>"XML file does not satisfy schema."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
