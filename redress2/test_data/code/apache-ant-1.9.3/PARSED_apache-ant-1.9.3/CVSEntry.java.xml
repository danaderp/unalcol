<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\cvslib\CVSEntry.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>cvslib</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * CVS Entry.
 *
 */</comment>
<class><specifier>public</specifier> class <name>CVSEntry</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>date</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>author</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>comment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Vector</name></type> <name>files</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new instance of a CVSEntry
     * @param date the date
     * @param author the author
     * @param comment a comment to be added to the revision
     */</comment>
    <constructor><specifier>public</specifier> <name>CVSEntry</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Date</name></type> <name>date</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>author</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>comment</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>date</name></name> = <name>date</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>author</name></name> = <name>author</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>comment</name></name> = <name>comment</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds a file to the CVSEntry
     * @param file the file to add
     * @param revision the revision
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFile</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>file</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>revision</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>files</name>.<name>addElement</name></name><argument_list>(<argument><expr>new <call><name>RCSFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a file to the CVSEntry
     * @param file the file to add
     * @param revision the revision
     * @param previousRevision the previous revision
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFile</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>file</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>revision</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>previousRevision</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>files</name>.<name>addElement</name></name><argument_list>(<argument><expr>new <call><name>RCSFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>previousRevision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the date of the CVSEntry
     * @return the date
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getDate</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>date</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the author of the CVSEntry
     * @param author the author
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAuthor</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>author</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>author</name></name> = <name>author</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the author of the CVSEntry
     * @return the author
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAuthor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>author</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the comment for the CVSEntry
     * @return the comment
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>comment</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the files in this CVSEntry
     * @return the files
     */</comment>
    <function><type><specifier>public</specifier> <name>Vector</name></type> <name>getFiles</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>files</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets a String containing author, date, files and comment
     * @return a string representation of this CVSEntry
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getAuthor</name><argument_list>()</argument_list></call> + "\n" + <call><name>getDate</name><argument_list>()</argument_list></call> + "\n" + <call><name>getFiles</name><argument_list>()</argument_list></call> + "\n"
            + <call><name>getComment</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
