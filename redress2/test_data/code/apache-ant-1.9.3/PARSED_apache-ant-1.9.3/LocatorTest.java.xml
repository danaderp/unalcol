<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\launch\LocatorTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>launch</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>

<comment type="javadoc">/** Test the locator in the ant-launch JAR */</comment>
<class><specifier>public</specifier> class <name>LocatorTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>windows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>unix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LAUNCHER_JAR</name> =<init> <expr>"//morzine/slo/Java/Apache/ant/lib/ant-launcher.jar"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SHARED_JAR_URI</name> =<init> <expr>"jar:file:"+ <name>LAUNCHER_JAR</name> +"!/org/apache/tools/ant/launch/Launcher.class"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * No-arg constructor to enable serialization. This method is not intended to be used by mere mortals without calling
     * setName().
     */</comment>
    <constructor><specifier>public</specifier> <name>LocatorTest</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/** Constructs a test case with the given name.
     * @param name
     */</comment>
    <constructor><specifier>public</specifier> <name>LocatorTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>windows</name> = <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr><name><name>Os</name>.<name>FAMILY_DOS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unix</name> = <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr><name><name>Os</name>.<name>FAMILY_UNIX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * expect a uri to resolve to strings on different platforms
     * @param uri uri to parse
     * @param expectedUnix unix string (or null to skip that test)
     * @param expectedDos DOS string (or null to skip that test)
     * @return the resolved string
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>resolveTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>uri</name></decl></param>, <param><decl><type><name>String</name></type> <name>expectedUnix</name></decl></param>, <param><decl><type><name>String</name></type> <name>expectedDos</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>Locator</name>.<name>fromURI</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertResolved</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>expectedUnix</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>unix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertResolved</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>expectedDos</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>windows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Assert something resolved
     * @param uri original URI
     * @param expectedResult what we expected
     * @param result what we got
     * @param enabled is the test enabled?
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertResolved</name><parameter_list>(<param><decl><type><name>String</name></type> <name>uri</name></decl></param>, <param><decl><type><name>String</name></type> <name>expectedResult</name></decl></param>, <param><decl><type><name>String</name></type> <name>result</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>enabled</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>enabled</name> &amp;&amp; <name>expectedResult</name> != <name>null</name> &amp;&amp; <call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Expected " + <name>uri</name> + " to resolve to \n" + <name>expectedResult</name> + "\n but got\n"
                    + <name>result</name> + "\n"</expr></argument>, <argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * This asserts that we can round trip the path to a URI and back again
     * @param path filename with no directory separators
     * @return the trailing filename
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>assertResolves</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>asuri</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call>.<call><name>toURI</name><argument_list>()</argument_list></call>.<call><name>toASCIIString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fullpath</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.dir"</expr></argument>)</argument_list></call> + <name><name>File</name>.<name>separator</name></name> + <name>path</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name>resolveTo</name><argument_list>(<argument><expr><name>asuri</name></expr></argument>, <argument><expr><name>fullpath</name></expr></argument>, <argument><expr><name>fullpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>result</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * this isnt really a valid URI, except maybe in IE
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNetworkURI</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>resolveTo</name><argument_list>(<argument><expr>"file:\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar"</expr></argument>, <argument><expr>""
                + "\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar"</expr></argument>,
                <argument><expr>"\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This is not being tested as we don't appear to generate paths like this in the launcher
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>NotestTripleForwardSlashNetworkURI</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>resolveTo</name><argument_list>(<argument><expr>"file:///PC03/jclasses/lib/ant-1.7.0.jar"</expr></argument>,
                <argument><expr>"///PC03/jclasses/lib/ant-1.7.0.jar"</expr></argument>,
                <argument><expr>"\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnixNetworkPath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>resolveTo</name><argument_list>(<argument><expr>"file://cluster/home/ant/lib"</expr></argument>,
                <argument><expr>"//cluster/home/ant/lib"</expr></argument>,
                <argument><expr>"\\\\cluster\\home\\ant\\lib"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnixPath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>resolveTo</name><argument_list>(<argument><expr>"file:/home/ant/lib"</expr></argument>, <argument><expr>"/home/ant/lib"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSpacedURI</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>resolveTo</name><argument_list>(<argument><expr>"file:C:\\Program Files\\Ant\\lib"</expr></argument>,
                <argument><expr>"C:\\Program Files\\Ant\\lib"</expr></argument>,
                <argument><expr>"C:\\Program Files\\Ant\\lib"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Bug 42275; Ant failing to run off a remote share
     * @throws Throwable if desired
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntOnRemoteShare</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>resolved</name>=<init><expr><call><name><name>Locator</name>.<name>fromJarURI</name></name><argument_list>(<argument><expr><name>SHARED_JAR_URI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertResolved</name><argument_list>(<argument><expr><name>SHARED_JAR_URI</name></expr></argument>, <argument><expr><name>LAUNCHER_JAR</name></expr></argument>, <argument><expr><name>resolved</name></expr></argument>, <argument><expr><name>unix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertResolved</name><argument_list>(<argument><expr><name>SHARED_JAR_URI</name></expr></argument>, <argument><expr><call><name><name>LAUNCHER_JAR</name>.<name>replace</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>resolved</name></expr></argument>, <argument><expr><name>windows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Bug 42275; Ant failing to run off a remote share
     *
     * @throws Throwable if desired
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileFromRemoteShare</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>resolved</name> =<init> <expr><call><name><name>Locator</name>.<name>fromJarURI</name></name><argument_list>(<argument><expr><name>SHARED_JAR_URI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>windows</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>path</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"\\\\"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHttpURI</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr>"http://ant.apache.org"</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Locator</name>.<name>fromURI</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>message</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name><name>Locator</name>.<name>ERROR_NOT_FILE_URI</name></name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>message</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInternationalURI</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name>assertResolves</name><argument_list>(<argument><expr>"L\u00f6wenbrau.aus.M\u00fcnchen"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>umlauted</name> =<init> <expr><call><name><name>result</name>.<name>charAt</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"expected 0xf6 (\u00f6), but got " + <call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr><name>umlauted</name></expr></argument>)</argument_list></call> + " '"
                + <name>umlauted</name> + "'"</expr></argument>, <argument><expr>0xf6</expr></argument>, <argument><expr><name>umlauted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/tmp/a%C3%A7a%C3%AD%20berry"</expr></argument>, <argument><expr><call><name><name>Locator</name>.<name>encodeURI</name></name><argument_list>(<argument><expr>"file:/tmp/a\u00E7a\u00ED berry"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/tmp/a\u00E7a\u00ED berry"</expr></argument>, <argument><expr><call><name><name>Locator</name>.<name>decodeUri</name></name><argument_list>(<argument><expr>"file:/tmp/a%C3%A7a%C3%AD%20berry"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/tmp/a\u00E7a\u00ED berry"</expr></argument>, <argument><expr><call><name><name>Locator</name>.<name>decodeUri</name></name><argument_list>(<argument><expr>"file:/tmp/a\u00E7a\u00ED%20berry"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// #50543</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/tmp/hezky \u010Desky"</expr></argument>, <argument><expr><call><name><name>Locator</name>.<name>decodeUri</name></name><argument_list>(<argument><expr>"file:/tmp/hezky%20\u010Desky"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// non-ISO-8859-1 variant</comment>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOddLowAsciiURI</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertResolves</name><argument_list>(<argument><expr>"hash# and percent%"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
