<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\ProcessDestroyer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<comment type="javadoc">/**
 * Destroys all registered &lt;code&gt;Process&lt;/code&gt;es when the VM exits.
 *
 * @since Ant 1.5
 */</comment>
<class>class <name>ProcessDestroyer</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>THREAD_DIE_TIMEOUT</name> =<init> <expr>20000</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>HashSet</name></type> <name>processes</name> =<init> <expr>new <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// methods to register and unregister shutdown hooks</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Method</name></type> <name>addShutdownHookMethod</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Method</name></type> <name>removeShutdownHookMethod</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ProcessDestroyerImpl</name></type> <name>destroyProcessThread</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// whether or not this ProcessDestroyer has been registered as a</comment>
    <comment type="line">// shutdown hook</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>added</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="line">// whether or not this ProcessDestroyer is currently running as</comment>
    <comment type="line">// shutdown hook</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>running</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> class <name>ProcessDestroyerImpl</name> <super><extends>extends <name>Thread</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shouldDestroy</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ProcessDestroyerImpl</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>"ProcessDestroyer Shutdown Hook"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>shouldDestroy</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ProcessDestroyer</name>.<name>this</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setShouldDestroy</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>shouldDestroy</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>shouldDestroy</name></name> = <name>shouldDestroy</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Constructs a &lt;code&gt;ProcessDestroyer&lt;/code&gt; and obtains
     * &lt;code&gt;Runtime.addShutdownHook()&lt;/code&gt; and
     * &lt;code&gt;Runtime.removeShutdownHook()&lt;/code&gt; through reflection. The
     * ProcessDestroyer manages a list of processes to be destroyed when the
     * VM exits. If a process is added when the list is empty,
     * this &lt;code&gt;ProcessDestroyer&lt;/code&gt; is registered as a shutdown hook. If
     * removing a process results in an empty list, the
     * &lt;code&gt;ProcessDestroyer&lt;/code&gt; is removed as a shutdown hook.
     */</comment>
    <constructor><name>ProcessDestroyer</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <comment type="line">// check to see if the shutdown hook methods exists</comment>
            <comment type="line">// (support pre-JDK 1.3 and Non-Sun VMs)</comment>
            <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>paramTypes</name> =<init> <expr><block>{<expr><name><name>Thread</name>.<name><name/></name></name>class</expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>addShutdownHookMethod</name> =
                <name><name>Runtime</name>.<name><name/></name></name>class.<call><name>getMethod</name><argument_list>(<argument><expr>"addShutdownHook"</expr></argument>, <argument><expr><name>paramTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>removeShutdownHookMethod</name> =
                <name><name>Runtime</name>.<name><name/></name></name>class.<call><name>getMethod</name><argument_list>(<argument><expr>"removeShutdownHook"</expr></argument>, <argument><expr><name>paramTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// wait to add shutdown hook as needed</comment>
        }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// it just won't be added as a shutdown hook... :(</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></constructor>

    <comment type="javadoc">/**
     * Registers this &lt;code&gt;ProcessDestroyer&lt;/code&gt; as a shutdown hook,
     * uses reflection to ensure pre-JDK 1.3 compatibility.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addShutdownHook</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>addShutdownHookMethod</name> != <name>null</name> &amp;&amp; !<name>running</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>destroyProcessThread</name> = new <call><name>ProcessDestroyerImpl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>args</name> =<init> <expr><block>{<expr><name>destroyProcessThread</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>addShutdownHookMethod</name>.<name>invoke</name></name><argument_list>(<argument><expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>added</name> = true</expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch> <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr><call><name><name>e</name>.<name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>t</name> != <name>null</name> &amp;&amp; <call><name><name>t</name>.<name>getClass</name></name><argument_list>()</argument_list></call> == <name><name>IllegalStateException</name>.<name><name/></name></name>class</expr>)</condition><then> <block>{
                    <comment type="line">// shutdown already is in progress</comment>
                    <expr_stmt><expr><name>running</name> = true</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Removes this &lt;code&gt;ProcessDestroyer&lt;/code&gt; as a shutdown hook,
     * uses reflection to ensure pre-JDK 1.3 compatibility
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeShutdownHook</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>removeShutdownHookMethod</name> != <name>null</name> &amp;&amp; <name>added</name> &amp;&amp; !<name>running</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>args</name> =<init> <expr><block>{<expr><name>destroyProcessThread</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>Boolean</name></type> <name>removed</name> =<init>
                    <expr>(<name>Boolean</name>) <call><name><name>removeShutdownHookMethod</name>.<name>invoke</name></name><argument_list>(
                        <argument><expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>removed</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Could not remove shutdown hook"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch> <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr><call><name><name>e</name>.<name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>t</name> != <name>null</name> &amp;&amp; <call><name><name>t</name>.<name>getClass</name></name><argument_list>()</argument_list></call> == <name><name>IllegalStateException</name>.<name><name/></name></name>class</expr>)</condition><then> <block>{
                    <comment type="line">// shutdown already is in progress</comment>
                    <expr_stmt><expr><name>running</name> = true</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></catch></try>
            <comment type="line">// start the hook thread, a unstarted thread may not be</comment>
            <comment type="line">// eligible for garbage collection</comment>
            <comment type="line">// Cf.: http://developer.java.sun.com/developer/bugParade/bugs/4533087.html</comment>
            <expr_stmt><expr><call><name><name>destroyProcessThread</name>.<name>setShouldDestroy</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>destroyProcessThread</name>.<name>getThreadGroup</name></name><argument_list>()</argument_list></call>.<call><name>isDestroyed</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// start() would throw IllegalThreadStateException from</comment>
                <comment type="line">// ThreadGroup.add if it were destroyed</comment>
                <expr_stmt><expr><call><name><name>destroyProcessThread</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// this should return quickly, since it basically is a NO-OP.</comment>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>destroyProcessThread</name>.<name>join</name></name><argument_list>(<argument><expr><name>THREAD_DIE_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{
                <comment type="line">// the thread didn't die in time</comment>
                <comment type="line">// it should not kill any processes unexpectedly</comment>
            }</block></catch></try>
            <expr_stmt><expr><name>destroyProcessThread</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>added</name> = false</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns whether or not the ProcessDestroyer is registered as
     * as shutdown hook
     * @return true if this is currently added as shutdown hook
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAddedAsShutdownHook</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>added</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Process&lt;/code&gt; was
     * successfully added to the list of processes to destroy upon VM exit.
     *
     * @param   process the process to add
     * @return  &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Process&lt;/code&gt; was
     *          successfully added
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Process</name></type> <name>process</name></decl></param>)</parameter_list> <block>{
        <synchronized>synchronized (<expr><name>processes</name></expr>) <block>{
            <comment type="line">// if this list is empty, register the shutdown hook</comment>
            <if>if <condition>(<expr><call><name><name>processes</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addShutdownHook</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name><name>processes</name>.<name>add</name></name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></synchronized>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Process&lt;/code&gt; was
     * successfully removed from the list of processes to destroy upon VM exit.
     *
     * @param   process the process to remove
     * @return  &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Process&lt;/code&gt; was
     *          successfully removed
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>Process</name></type> <name>process</name></decl></param>)</parameter_list> <block>{
        <synchronized>synchronized (<expr><name>processes</name></expr>) <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>processRemoved</name> =<init> <expr><call><name><name>processes</name>.<name>remove</name></name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>processRemoved</name> &amp;&amp; <call><name><name>processes</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>removeShutdownHook</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>processRemoved</name></expr>;</return>
        }</block></synchronized>
    }</block></function>

    <comment type="javadoc">/**
     * Invoked by the VM when it is exiting.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <synchronized>synchronized (<expr><name>processes</name></expr>) <block>{
            <expr_stmt><expr><name>running</name> = true</expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>e</name> =<init> <expr><call><name><name>processes</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr>((<name>Process</name>) <call><name><name>e</name>.<name>next</name></name><argument_list>()</argument_list></call>).<call><name>destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></synchronized>
    }</block></function>
}</block></class>
</unit>
