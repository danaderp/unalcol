<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ParallelTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DemuxOutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ExitStatusException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Test of the parallel TaskContainer
 *
 * @created 21 February 2002
 */</comment>
<class><specifier>public</specifier> class <name>ParallelTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
    <comment type="javadoc">/** Standard property value for the basic test */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>DIRECT_MESSAGE</name> =<init> <expr>"direct"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Standard property value for the basic and fail test */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>DELAYED_MESSAGE</name> =<init> <expr>"delayed"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Standard property value for the fail test */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>FAILURE_MESSAGE</name> =<init> <expr>"failure"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the build fiel associated with this test */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TEST_BUILD_FILE</name>
         =<init> <expr>"src/etc/testcases/taskdefs/parallel.xml"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for the ParallelTest object
     *
     * @param name name of the test
     */</comment>
    <constructor><specifier>public</specifier> <name>ParallelTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/** The JUnit setup method */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>TEST_BUILD_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** tests basic operation of the parallel task */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBasic</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// should get no output at all</comment>
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.direct"</expr></argument>, <argument><expr><name>DIRECT_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.delayed"</expr></argument>, <argument><expr><name>DELAYED_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectOutputAndError</name><argument_list>(<argument><expr>"testBasic"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"parallel tasks didn't output correct data"</expr></argument>, <argument><expr><name>log</name></expr></argument>,
            <argument><expr><name>DIRECT_MESSAGE</name> + <name>DELAYED_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/** tests basic operation of the parallel task */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testThreadCount</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// should get no output at all</comment>
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.direct"</expr></argument>, <argument><expr><name>DIRECT_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.delayed"</expr></argument>, <argument><expr><name>DELAYED_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectOutputAndError</name><argument_list>(<argument><expr>"testThreadCount"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>pos</name> &gt; -1</expr>)</condition> <block>{
            <expr_stmt><expr><name>pos</name> = <call><name>countThreads</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * the test result string should match the regex
     * &lt;code&gt;^(\|\d+\/(+-)*)+\|$&lt;/code&gt; for someting like
     * &lt;code&gt;|3/++--+-|5/+++++-----|&lt;/code&gt;
     *
     *@returns -1 no more tests
     *          # start pos of next test
     *@throws AssertionFailedException when a constraint is invalid
     */</comment>
    <function><type><specifier>static</specifier> <name>int</name></type> <name>countThreads</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>firstPipe</name> =<init> <expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'|'</expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>beginSlash</name> =<init> <expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name>firstPipe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lastPipe</name> =<init> <expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'|'</expr></argument>, <argument><expr><name>beginSlash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name>firstPipe</name> == -1) || (<name>beginSlash</name> == -1) || (<name>lastPipe</name> == -1)</expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>max</name> =<init> <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>s</name>.<name>substring</name></name><argument_list>(<argument><expr><name>firstPipe</name> + 1</expr></argument>, <argument><expr><name>beginSlash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>current</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><name>beginSlash</name> + 1</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>pos</name> &lt; <name>lastPipe</name></expr>)</condition> <block>{
            <switch>switch <condition>(<expr><call><name><name>s</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>pos</name>++</expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <case>case <expr>'+'</expr>:
                    <expr_stmt><expr><name>current</name>++</expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr>'-'</expr>:
                    <expr_stmt><expr><name>current</name>--</expr>;</expr_stmt>
                    <break>break;</break>
                </case><default>default:
                    <throw>throw <expr>new <call><name>AssertionFailedError</name><argument_list>(<argument><expr>"Only expect '+-' in result count, found "
                        + <call><name><name>s</name>.<name>charAt</name></name><argument_list>(<argument><expr>--<name>pos</name></expr></argument>)</argument_list></call> + " at position " + <name>pos</name></expr></argument>)</argument_list></call></expr>;</throw>
            </default>}</block></switch>
            <if>if <condition>(<expr><name>current</name> &gt; <name>max</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>AssertionFailedError</name><argument_list>(<argument><expr>"Number of executing threads exceeded number allowed: "
                    + <name>current</name> + " &gt; " + <name>max</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>lastPipe</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/** tests the failure of a task within a parallel construction */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFail</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// should get no output at all</comment>
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.failure"</expr></argument>, <argument><expr><name>FAILURE_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"test.delayed"</expr></argument>, <argument><expr><name>DELAYED_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testFail"</expr></argument>,
            <argument><expr>"fail task in one parallel branch"</expr></argument>, <argument><expr><name>FAILURE_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** tests the demuxing of output streams in a multithreaded situation */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDemux</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addTaskDefinition</name></name><argument_list>(<argument><expr>"demuxtest"</expr></argument>, <argument><expr><name><name>DemuxOutputTask</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name> =<init> <expr><name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>err</name> =<init> <expr><name><name>System</name>.<name>err</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>DemuxOutputStream</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>DemuxOutputStream</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>executeTarget</name></name><argument_list>(<argument><expr>"testDemux"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * @see "https://issues.apache.org/bugzilla/show_bug.cgi?id=55539"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSingleExit</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testSingleExit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ExitStatusException</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>42</expr></argument>, <argument><expr><call><name><name>ex</name>.<name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * @see "https://issues.apache.org/bugzilla/show_bug.cgi?id=55539"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExitAndOtherException</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testExitAndOtherException"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ExitStatusException</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>42</expr></argument>, <argument><expr><call><name><name>ex</name>.<name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

}</block></class>

</unit>
