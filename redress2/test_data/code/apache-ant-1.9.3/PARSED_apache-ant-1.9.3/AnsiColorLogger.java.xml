<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\listener\AnsiColorLogger.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>listener</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DefaultLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Uses ANSI Color Code Sequences to colorize messages
 * sent to the console.
 *
 * If used with the -logfile option, the output file
 * will contain all the necessary escape codes to
 * display the text in colorized mode when displayed
 * in the console using applications like cat, more,
 * etc.
 *
 * This is designed to work on terminals that support ANSI
 * color codes.  It works on XTerm, ETerm, Mindterm, etc.
 * It also works on Win9x (with ANSI.SYS loaded.)
 *
 * NOTE:
 * It doesn't work on WinNT's COMMAND.COM even with
 * ANSI.SYS loaded.
 *
 * The default colors used for differentiating
 * the message levels can be changed by editing the
 * /org/apache/tools/ant/listener/defaults.properties
 * file.
 * This file contains 5 key/value pairs:
 * AnsiColorLogger.ERROR_COLOR=2;31
 * AnsiColorLogger.WARNING_COLOR=2;35
 * AnsiColorLogger.INFO_COLOR=2;36
 * AnsiColorLogger.VERBOSE_COLOR=2;32
 * AnsiColorLogger.DEBUG_COLOR=2;34
 *
 * Another option is to pass a system variable named
 * ant.logger.defaults, with value set to the path of
 * the file that contains user defined Ansi Color
 * Codes, to the &lt;B&gt;java&lt;/B&gt; command using -D option.
 *
 * To change these colors use the following chart:
 *
 *      &lt;B&gt;ANSI COLOR LOGGER CONFIGURATION&lt;/B&gt;
 *
 * Format for AnsiColorLogger.*=
 *  Attribute;Foreground;Background
 *
 *  Attribute is one of the following:
 *  0 -&gt; Reset All Attributes (return to normal mode)
 *  1 -&gt; Bright (Usually turns on BOLD)
 *  2 -&gt; Dim
 *  3 -&gt; Underline
 *  5 -&gt; link
 *  7 -&gt; Reverse
 *  8 -&gt; Hidden
 *
 *  Foreground is one of the following:
 *  30 -&gt; Black
 *  31 -&gt; Red
 *  32 -&gt; Green
 *  33 -&gt; Yellow
 *  34 -&gt; Blue
 *  35 -&gt; Magenta
 *  36 -&gt; Cyan
 *  37 -&gt; White
 *
 *  Background is one of the following:
 *  40 -&gt; Black
 *  41 -&gt; Red
 *  42 -&gt; Green
 *  43 -&gt; Yellow
 *  44 -&gt; Blue
 *  45 -&gt; Magenta
 *  46 -&gt; Cyan
 *  47 -&gt; White
 *
 */</comment>
<class><specifier>public</specifier> class <name>AnsiColorLogger</name> <super><extends>extends <name>DefaultLogger</name></extends></super> <block>{
    <comment type="line">// private static final int ATTR_NORMAL = 0;</comment>
    <comment type="line">// private static final int ATTR_BRIGHT = 1;</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ATTR_DIM</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
    <comment type="line">// private static final int ATTR_UNDERLINE = 3;</comment>
    <comment type="line">// private static final int ATTR_BLINK = 5;</comment>
    <comment type="line">// private static final int ATTR_REVERSE = 7;</comment>
    <comment type="line">// private static final int ATTR_HIDDEN = 8;</comment>

    <comment type="line">// private static final int FG_BLACK = 30;</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FG_RED</name> =<init> <expr>31</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FG_GREEN</name> =<init> <expr>32</expr></init></decl>;</decl_stmt>
    <comment type="line">// private static final int FG_YELLOW = 33;</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FG_BLUE</name> =<init> <expr>34</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FG_MAGENTA</name> =<init> <expr>35</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FG_CYAN</name> =<init> <expr>36</expr></init></decl>;</decl_stmt>
    <comment type="line">// private static final int FG_WHITE = 37;</comment>

    <comment type="line">// private static final int BG_BLACK = 40;</comment>
    <comment type="line">// private static final int BG_RED = 41;</comment>
    <comment type="line">// private static final int BG_GREEN = 42;</comment>
    <comment type="line">// private static final int BG_YELLOW = 44;</comment>
    <comment type="line">// private static final int BG_BLUE = 44;</comment>
    <comment type="line">// private static final int BG_MAGENTA = 45;</comment>
    <comment type="line">// private static final int BG_CYAN = 46;</comment>
    <comment type="line">// private static final int BG_WHITE = 47;</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFIX</name> =<init> <expr>"\u001b["</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SUFFIX</name> =<init> <expr>"m"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name></type> <name>SEPARATOR</name> =<init> <expr>';'</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>END_COLOR</name> =<init> <expr><name>PREFIX</name> + <name>SUFFIX</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>errColor</name>
        =<init> <expr><name>PREFIX</name> + <name>ATTR_DIM</name> + <name>SEPARATOR</name> + <name>FG_RED</name> + <name>SUFFIX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>warnColor</name>
        =<init> <expr><name>PREFIX</name> + <name>ATTR_DIM</name> + <name>SEPARATOR</name> + <name>FG_MAGENTA</name> + <name>SUFFIX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>infoColor</name>
        =<init> <expr><name>PREFIX</name> + <name>ATTR_DIM</name> + <name>SEPARATOR</name> + <name>FG_CYAN</name> + <name>SUFFIX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>verboseColor</name>
        =<init> <expr><name>PREFIX</name> + <name>ATTR_DIM</name> + <name>SEPARATOR</name> + <name>FG_GREEN</name> + <name>SUFFIX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>debugColor</name>
        =<init> <expr><name>PREFIX</name> + <name>ATTR_DIM</name> + <name>SEPARATOR</name> + <name>FG_BLUE</name> + <name>SUFFIX</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>colorsSet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the colors to use from a property file specified by the
     * special ant property ant.logger.defaults
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setColors</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>userColorFile</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"ant.logger.defaults"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>systemColorFile</name> =<init>
            <expr>"/org/apache/tools/ant/listener/defaults.properties"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>Properties</name></type> <name>prop</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>userColorFile</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>in</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>userColorFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>in</name> = <call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getResourceAsStream</name><argument_list>(<argument><expr><name>systemColorFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>in</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>prop</name>.<name>load</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>String</name></type> <name>errC</name> =<init> <expr><call><name><name>prop</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"AnsiColorLogger.ERROR_COLOR"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>warn</name> =<init> <expr><call><name><name>prop</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"AnsiColorLogger.WARNING_COLOR"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>info</name> =<init> <expr><call><name><name>prop</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"AnsiColorLogger.INFO_COLOR"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>verbose</name> =<init> <expr><call><name><name>prop</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"AnsiColorLogger.VERBOSE_COLOR"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>debug</name> =<init> <expr><call><name><name>prop</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"AnsiColorLogger.DEBUG_COLOR"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>errC</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>errColor</name> = <name>PREFIX</name> + <name>errC</name> + <name>SUFFIX</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>warn</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>warnColor</name> = <name>PREFIX</name> + <name>warn</name> + <name>SUFFIX</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>infoColor</name> = <name>PREFIX</name> + <name>info</name> + <name>SUFFIX</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>verbose</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>verboseColor</name> = <name>PREFIX</name> + <name>verbose</name> + <name>SUFFIX</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>debug</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>debugColor</name> = <name>PREFIX</name> + <name>debug</name> + <name>SUFFIX</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <comment type="line">//Ignore - we will use the defaults.</comment>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>in</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">//Ignore - We do not want this to stop the build.</comment>
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * @see DefaultLogger#printMessage
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>printMessage</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></param>,
                                      <param><decl><type><specifier>final</specifier> <name>PrintStream</name></type> <name>stream</name></decl></param>,
                                      <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>priority</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>message</name> != <name>null</name> &amp;&amp; <name>stream</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>colorsSet</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setColors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>colorsSet</name> = true</expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuffer</name></type> <name>msg</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>priority</name></expr>)</condition> <block>{
                <case>case <expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr>:
                    <expr_stmt><expr><call><name><name>msg</name>.<name>insert</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>errColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>END_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr>:
                    <expr_stmt><expr><call><name><name>msg</name>.<name>insert</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>warnColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>END_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr>:
                    <expr_stmt><expr><call><name><name>msg</name>.<name>insert</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>infoColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>END_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>:
                    <expr_stmt><expr><call><name><name>msg</name>.<name>insert</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>verboseColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>END_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr>:
                    <comment type="line">// Fall through</comment>
                </case><default>default:
                    <expr_stmt><expr><call><name><name>msg</name>.<name>insert</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>debugColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>END_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </default>}</block></switch>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>strmessage</name> =<init> <expr><call><name><name>msg</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>stream</name>.<name>println</name></name><argument_list>(<argument><expr><name>strmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
