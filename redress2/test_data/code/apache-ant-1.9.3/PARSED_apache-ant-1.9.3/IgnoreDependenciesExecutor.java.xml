<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\helper\IgnoreDependenciesExecutor.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>helper</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Executor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Target</name></name>;</import>

<comment type="javadoc">/**
 * Target executor implementation that ignores dependencies. Runs each
 * target by calling &lt;code&gt;target.performTasks()&lt;/code&gt; directly. If an
 * error occurs, behavior is determined by the Project's "keep-going" mode.
 * To be used when you know what you're doing.
 *
 * @since Ant 1.7.1
 */</comment>
<class><specifier>public</specifier> class <name>IgnoreDependenciesExecutor</name> <super><implements>implements <name>Executor</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SingleCheckExecutor</name></type> <name>SUB_EXECUTOR</name> =<init> <expr>new <call><name>SingleCheckExecutor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeTargets</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>targetNames</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>targets</name> =<init> <expr><call><name><name>project</name>.<name>getTargets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BuildException</name></type> <name>thrownException</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>targetNames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>Target</name></type> <name>t</name> =<init> <expr><call><name><name>targets</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>targetNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>t</name> == <name>null</name></expr>)</condition><then> <block>{
                  <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unknown target " + <name><name>targetNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>t</name>.<name>performTasks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
                <if>if <condition>(<expr><call><name><name>project</name>.<name>isKeepGoingMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>thrownException</name> = <name>ex</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <throw>throw <expr><name>ex</name></expr>;</throw>
                }</block></else></if>
            }</block></catch></try>
        }</block></for>
        <if>if <condition>(<expr><name>thrownException</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>thrownException</name></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>Executor</name></type> <name>getSubProjectExecutor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>SUB_EXECUTOR</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
