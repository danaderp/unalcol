<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\CollectionUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Dictionary</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF - bc</comment>

<comment type="javadoc">/**
 * A set of helper methods related to collection manipulation.
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>CollectionUtils</name> <block>{

    <comment type="javadoc">/**
     * Collections.emptyList() is Java5+.
     */</comment>
    <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("rawtypes")</argument_list></annotation>
    <annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>List</name></type> <name>EMPTY_LIST</name> =<init> <expr><name><name>Collections</name>.<name>EMPTY_LIST</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Please use Vector.equals() or List.equals().
     * @param v1 the first vector.
     * @param v2 the second vector.
     * @return true if the vectors are equal.
     * @since Ant 1.5
     * @deprecated since 1.6.x.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>v1</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>v2</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>v1</name> == <name>v2</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>v1</name> == <name>null</name> || <name>v2</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <return>return <expr><call><name><name>v1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Dictionary does not have an equals.
     * Please use  Map.equals().
     *
     * &lt;p&gt;Follows the equals contract of Java 2's Map.&lt;/p&gt;
     * @param d1 the first directory.
     * @param d2 the second directory.
     * @return true if the directories are equal.
     * @since Ant 1.5
     * @deprecated since 1.6.x.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name><name>Dictionary</name><argument_list>&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>d1</name></decl></param>, <param><decl><type><name><name>Dictionary</name><argument_list>&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>d2</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>d1</name> == <name>d2</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>d1</name> == <name>null</name> || <name>d2</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>d1</name>.<name>size</name></name><argument_list>()</argument_list></call> != <call><name><name>d2</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>e1</name> =<init> <expr><call><name><name>d1</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e1</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>key</name> =<init> <expr><call><name><name>e1</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value1</name> =<init> <expr><call><name><name>d1</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value2</name> =<init> <expr><call><name><name>d2</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>value2</name> == <name>null</name> || !<call><name><name>value1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></while>

        <comment type="line">// don't need the opposite check as the Dictionaries have the</comment>
        <comment type="line">// same size, so we've also covered all keys of d2 already.</comment>

        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a comma separated list of all values held in the given
     * collection.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>flattenToString</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Object</name></type> <name>o</name> :<range> <expr><name>c</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>sb</name>.<name>length</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Dictionary does not know the putAll method. Please use Map.putAll().
     * @param m1 the to directory.
     * @param m2 the from directory.
     * @since Ant 1.6
     * @deprecated since 1.6.x.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list> <name>void</name></type> <name>putAll</name><parameter_list>(<param><decl><type><name><name>Dictionary</name><argument_list>&lt;<argument><name>?</name> <super>super <name>K</name></super></argument>, <argument><name>?</name> <super>super <name>V</name></super></argument>&gt;</argument_list></name></type> <name>m1</name></decl></param>, <param><decl><type><name><name>Dictionary</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>K</name></extends></argument>, <argument><name>?</name> <extends>extends <name>V</name></extends></argument>&gt;</argument_list></name></type> <name>m2</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>K</name></extends></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name><name>m2</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>K</name></type> <name>key</name> =<init> <expr><call><name><name>it</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m1</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>m2</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * An empty enumeration.
     * @since Ant 1.6
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name><name>EmptyEnumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></implements></super> <block>{
        <comment type="javadoc">/** Constructor for the EmptyEnumeration */</comment>
        <constructor><specifier>public</specifier> <name>EmptyEnumeration</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>

        <comment type="javadoc">/**
         * @return false always.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasMoreElements</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return nothing.
         * @throws NoSuchElementException always.
         */</comment>
        <function><type><specifier>public</specifier> <name>E</name></type> <name>nextElement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchElementException</name></expr></argument></throws> <block>{
            <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Append one enumeration to another.
     * Elements are evaluated lazily.
     * @param e1 the first enumeration.
     * @param e2 the subsequent enumeration.
     * @return an enumeration representing e1 followed by e2.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list> <name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>append</name><parameter_list>(<param><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>e1</name></decl></param>, <param><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>e2</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name><name>CompoundEnumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adapt the specified Iterator to the Enumeration interface.
     * @param iter the Iterator to adapt.
     * @return an Enumeration.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list> <name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>asEnumeration</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <class><super><name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasMoreElements</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
            <function><type><specifier>public</specifier> <name>E</name></type> <name>nextElement</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adapt the specified Enumeration to the Iterator interface.
     * @param e the Enumeration to adapt.
     * @return an Iterator.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list> <name><name>Iterator</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>asIterator</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <class><super><name><name>Iterator</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
            <function><type><specifier>public</specifier> <name>E</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{
                <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection containing all elements of the iterator.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>Collection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>asCollection</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></type> <name>iter</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>l</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>l</name></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name><name>CompoundEnumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></implements></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>e1</name>, <name>e2</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>CompoundEnumeration</name><parameter_list>(<param><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>e1</name></decl></param>, <param><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>e2</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>e1</name></name> = <name>e1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>e2</name></name> = <name>e2</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasMoreElements</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>e1</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call> || <call><name><name>e2</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>E</name></type> <name>nextElement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchElementException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><call><name><name>e1</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>e1</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><call><name><name>e2</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

    }</block></class>

    <comment type="javadoc">/**
     * Counts how often the given Object occurs in the given
     * collection using equals() for comparison.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>frequency</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>, <param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// same as Collections.frequency introduced with JDK 1.5</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>freq</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>c</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>i</name> =<init> <expr><call><name><name>c</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>) <block>{
                <decl_stmt><decl><type><name>Object</name></type> <name>test</name> =<init> <expr><call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>o</name> == <name>null</name> ? <name>test</name> == <name>null</name> : <call><name><name>o</name>.<name>equals</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>freq</name>++</expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>freq</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
