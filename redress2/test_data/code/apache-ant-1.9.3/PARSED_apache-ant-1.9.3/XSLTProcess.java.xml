<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\XSLTProcess.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>EnumMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>namespace</name>.<name>QName</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>xpath</name>.<name>XPath</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>xpath</name>.<name>XPathConstants</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>xpath</name>.<name>XPathExpression</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>xpath</name>.<name>XPathExpressionException</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>xpath</name>.<name>XPathFactory</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>xpath</name>.<name>XPathVariableResolver</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DynamicConfigurator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>CommandlineJava</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Environment</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PropertySet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>XMLCatalog</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Resources</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ResourceUtils</name></name>;</import>

<comment type="javadoc">/**
 * Processes a set of XML documents via XSLT. This is
 * useful for building views of XML based documentation.
 *
 *
 * @since Ant 1.1
 *
 * @ant.task name="xslt" category="xml"
 */</comment>

<class><specifier>public</specifier> class <name>XSLTProcess</name> <super><extends>extends <name>MatchingTask</name></extends> <implements>implements <name>XSLTLogger</name></implements></super> <block>{
    <comment type="javadoc">/** destination directory */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>destDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** where to find the source XML file, default is the project's basedir */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>baseDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** XSL stylesheet as a filename */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>xslFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** XSL stylesheet as a {@link org.apache.tools.ant.types.Resource} */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resource</name></type> <name>xslResource</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** extension of the files produced by XSL processing */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>targetExtension</name> =<init> <expr>".html"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** name for XSL parameter containing the filename */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>fileNameParameter</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** name for XSL parameter containing the file directory */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>fileDirParameter</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** additional parameters to be passed to the stylesheets */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Param</name></argument>&gt;</argument_list></name></type> <name>params</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Param</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Input XML document to be used */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>inFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Output file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>outFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The name of the XSL processor to use */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>processor</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Classpath to use when trying to load the XSL processor */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>classpath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The Liaison implementation to use to communicate with the XSL
     *  processor */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>XSLTLiaison</name></type> <name>liaison</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Flag which indicates if the stylesheet has been loaded into
     *  the processor */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>stylesheetLoaded</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** force output of target files even if they already exist */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>force</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** XSL output properties to be used */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>outputProperties</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** for resolving entities such as dtds */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>XMLCatalog</name></type> <name>xmlCatalog</name> =<init> <expr>new <call><name>XMLCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether to style all files in the included directories as well.
     *
     * @since Ant 1.5
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>performDirectoryScan</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * factory element for TraX processors only
     * @since Ant 1.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Factory</name></type> <name>factory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * whether to reuse Transformer if transforming multiple files.
     * @since 1.5.2
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>reuseLoadedStylesheet</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * AntClassLoader for the nested &amp;lt;classpath&amp;gt; - if set.
     *
     * &lt;p&gt;We keep this here in order to reset the context classloader
     * in execute.  We can't use liaison.getClass().getClassLoader()
     * since the actual liaison class may have been loaded by a loader
     * higher up (system classloader, for example).&lt;/p&gt;
     *
     * @since Ant 1.6.2
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AntClassLoader</name></type> <name>loader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Mapper to use when a set of files gets processed.
     *
     * @since Ant 1.6.2
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Mapper</name></type> <name>mapperElement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Additional resource collections to process.
     *
     * @since Ant 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Union</name></type> <name>resources</name> =<init> <expr>new <call><name>Union</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether to use the implicit fileset.
     *
     * @since Ant 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useImplicitFileset</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The default processor is trax
     * @since Ant 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROCESSOR_TRAX</name> =<init> <expr>"trax"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * whether to suppress warnings.
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>suppressWarnings</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * whether to fail the build if an error occurs during transformation.
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnTransformationError</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * whether to fail the build if an error occurs.
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether the build should fail if the nested resource collection
     * is empty.
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnNoResources</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * For evaluating template params
     *
     * @since Ant 1.9.3
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>XPathFactory</name></type> <name>xpathFactory</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * For evaluating template params
     *
     * @since Ant 1.9.3
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>XPath</name></type> <name>xpath</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * System properties to set during transformation.
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>CommandlineJava</name>.<name>SysProperties</name></name></type> <name>sysProperties</name> =<init>
        <expr>new <call><name><name>CommandlineJava</name>.<name>SysProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Trace configuration for Xalan2.
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TraceConfiguration</name></type> <name>traceConfiguration</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new XSLTProcess Task.
     */</comment>
    <constructor><specifier>public</specifier> <name>XSLTProcess</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor> <comment type="line">//-- XSLTProcess</comment>

    <comment type="javadoc">/**
     * Whether to style all files in the included directories as well;
     * optional, default is true.
     *
     * @param b true if files in included directories are processed.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setScanIncludedDirectories</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>performDirectoryScan</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Controls whether the stylesheet is reloaded for every transform.
     *
     * &lt;p&gt;Setting this to true may get around a bug in certain
     * Xalan-J versions, default is false.&lt;/p&gt;
     * @param b a &lt;code&gt;boolean&lt;/code&gt; value
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReloadStylesheet</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>reuseLoadedStylesheet</name> = !<name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Defines the mapper to map source to destination files.
     * @param mapper the mapper to use
     * @exception BuildException if more than one mapper is defined
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMapper</name><parameter_list>(<param><decl><type><name>Mapper</name></type> <name>mapper</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mapperElement</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr>"Cannot define more than one mapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>mapperElement</name> = <name>mapper</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a collection of resources to style in addition to the
     * given file or the implicit fileset.
     *
     * @param rc the collection of resources to style
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>resources</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a nested &amp;lt;style&amp;gt; element.
     * @param rc the configured Resources object represented as &amp;lt;style&amp;gt;.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredStyle</name><parameter_list>(<param><decl><type><name>Resources</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>rc</name>.<name>size</name></name><argument_list>()</argument_list></call> != 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr>"The style element must be specified with exactly one"
                        + " nested resource."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>setXslResource</name><argument_list>(<argument><expr><call><name><name>rc</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * API method to set the XSL Resource.
     * @param xslResource Resource to set as the stylesheet.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setXslResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>xslResource</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>xslResource</name></name> = <name>xslResource</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a nested filenamemapper.
     * @param fileNameMapper the mapper to add
     * @exception BuildException if more than one mapper is defined
     * @since Ant 1.7.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
       <decl_stmt><decl><type><name>Mapper</name></type> <name>mapper</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>mapper</name>.<name>add</name></name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>addMapper</name><argument_list>(<argument><expr><name>mapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the task.
     *
     * @exception BuildException if there is an execution problem.
     * @todo validate that if either in or out is defined, then both are
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>"style".<call><name>equals</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Warning: the task name &lt;style&gt; is deprecated. Use &lt;xslt&gt; instead."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>savedBaseDir</name> =<init> <expr><name>baseDir</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>scanner</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type>         <name>list</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type>         <name>dirs</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>baseMessage</name> =<init>
            <expr>"specify the stylesheet either as a filename in style attribute "
            + "or as a nested resource"</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>xslResource</name> == <name>null</name> &amp;&amp; <name>xslFile</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr><name>baseMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>xslResource</name> != <name>null</name> &amp;&amp; <name>xslFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr><name>baseMessage</name> + " but not as both"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>inFile</name> != <name>null</name> &amp;&amp; !<call><name><name>inFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr>"input file " + <name>inFile</name> + " does not exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><call><name>setupLoader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>sysProperties</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sysProperties</name>.<name>setSystem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>Resource</name></type> <name>styleResource</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>baseDir</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>baseDir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>liaison</name> = <call><name>getLiaison</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// check if liaison wants to log errors using us as logger</comment>
            <if>if <condition>(<expr><name>liaison</name> <name>instanceof</name> <name>XSLTLoggerAware</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>XSLTLoggerAware</name>) <name>liaison</name>).<call><name>setLogger</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Using " + <call><name><name>liaison</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>xslFile</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// If we enter here, it means that the stylesheet is supplied</comment>
                <comment type="line">// via style attribute</comment>
                <decl_stmt><decl><type><name>File</name></type> <name>stylesheet</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>xslFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>stylesheet</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>alternative</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr><name>xslFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="block">/*
                     * shouldn't throw out deprecation warnings before we know,
                     * the wrong version has been used.
                     */</comment>
                    <if>if <condition>(<expr><call><name><name>alternative</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"DEPRECATED - the 'style' attribute should be "
                            + "relative to the project's"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"             basedir, not the tasks's basedir."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>stylesheet</name> = <name>alternative</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <decl_stmt><decl><type><name>FileResource</name></type> <name>fr</name> =<init> <expr>new <call><name>FileResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>fr</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fr</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>styleResource</name> = <name>fr</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>styleResource</name> = <name>xslResource</name></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr>!<call><name><name>styleResource</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr>"stylesheet " + <name>styleResource</name> + " doesn't exist."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <comment type="line">// if we have an in file and out then process them</comment>
            <if>if <condition>(<expr><name>inFile</name> != <name>null</name> &amp;&amp; <name>outFile</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name>inFile</name></expr></argument>, <argument><expr><name>outFile</name></expr></argument>, <argument><expr><name>styleResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <comment type="block">/*
             * if we get here, in and out have not been specified, we are
             * in batch processing mode.
             */</comment>

            <comment type="line">//-- make sure destination directory exists...</comment>
            <expr_stmt><expr><call><name>checkDest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>useImplicitFileset</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>scanner</name> = <call><name>getDirectoryScanner</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Transforming into " + <name>destDir</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Process all the files marked for styling</comment>
                <expr_stmt><expr><name>list</name> = <call><name><name>scanner</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
                    <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>destDir</name></expr></argument>, <argument><expr><name>styleResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <if>if <condition>(<expr><name>performDirectoryScan</name></expr>)</condition><then> <block>{
                    <comment type="line">// Process all the directories marked for styling</comment>
                    <expr_stmt><expr><name>dirs</name> = <call><name><name>scanner</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>dirs</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
                        <expr_stmt><expr><name>list</name> = new <call><name>File</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr><name><name>dirs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call>.<call><name>list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
                            <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr><name><name>dirs</name><index>[<expr><name>j</name></expr>]</index></name> + <name><name>File</name>.<name>separator</name></name> + <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>destDir</name></expr></argument>,
                                    <argument><expr><name>styleResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                    }</block></for>
                }</block></then></if>
            }</block></then> <else>else <block>{ <comment type="line">// only resource collections, there better be some</comment>
                <if>if <condition>(<expr><call><name><name>resources</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>failOnNoResources</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr>"no resources specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <return>return;</return>
                }</block></then></if>
            }</block></else></if>
            <expr_stmt><expr><call><name>processResources</name><argument_list>(<argument><expr><name>styleResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>loader</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>loader</name>.<name>resetThreadContextLoader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>loader</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>loader</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>sysProperties</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sysProperties</name>.<name>restoreSystem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>liaison</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>stylesheetLoaded</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><name>baseDir</name> = <name>savedBaseDir</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to check dependencies, or always generate;
     * optional, default is false.
     *
     * @param force true if always generate.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setForce</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>force</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>force</name></name> = <name>force</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the base directory;
     * optional, default is the project's basedir.
     *
     * @param dir the base directory
     **/</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBasedir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>baseDir</name> = <name>dir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the destination directory into which the XSL result
     * files should be copied to;
     * required, unless &lt;tt&gt;in&lt;/tt&gt; and &lt;tt&gt;out&lt;/tt&gt; are
     * specified.
     * @param dir the name of the destination directory
     **/</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDestdir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>destDir</name> = <name>dir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the desired file extension to be used for the target;
     * optional, default is html.
     * @param name the extension to use
     **/</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtension</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>targetExtension</name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Name of the stylesheet to use - given either relative
     * to the project's basedir or as an absolute path; required.
     *
     * @param xslFile the stylesheet to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStyle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>xslFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>xslFile</name></name> = <name>xslFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the optional classpath to the XSL processor
     *
     * @param classpath the classpath to use when loading the XSL processor
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the optional classpath to the XSL processor
     *
     * @return a path instance to be configured by the Ant core.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>classpath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>classpath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the reference to an optional classpath to the XSL processor
     *
     * @param r the id of the Ant path instance to act as the classpath
     *          for loading the XSL processor
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the name of the XSL processor to use; optional, default trax.
     *
     * @param processor the name of the XSL processor
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProcessor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>processor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>processor</name></name> = <name>processor</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to use the implicit fileset.
     *
     * &lt;p&gt;Set this to false if you want explicit control with nested
     * resource collections.&lt;/p&gt;
     * @param useimplicitfileset set to true if you want to use implicit fileset
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseImplicitFileset</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>useimplicitfileset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>useImplicitFileset</name> = <name>useimplicitfileset</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add the catalog to our internal catalog
     *
     * @param xmlCatalog the XMLCatalog instance to use to look up DTDs
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredXMLCatalog</name><parameter_list>(<param><decl><type><name>XMLCatalog</name></type> <name>xmlCatalog</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>xmlCatalog</name>.<name>addConfiguredXMLCatalog</name></name><argument_list>(<argument><expr><name>xmlCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Pass the filename of the current processed file as a xsl parameter
     * to the transformation. This value sets the name of that xsl parameter.
     *
     * @param fileNameParameter name of the xsl parameter retrieving the
     *                          current file name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFileNameParameter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileNameParameter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fileNameParameter</name></name> = <name>fileNameParameter</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Pass the directory name of the current processed file as a xsl parameter
     * to the transformation. This value sets the name of that xsl parameter.
     *
     * @param fileDirParameter name of the xsl parameter retrieving the
     *                         current file directory
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFileDirParameter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileDirParameter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fileDirParameter</name></name> = <name>fileDirParameter</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to suppress warning messages of the processor.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuppressWarnings</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>suppressWarnings</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to suppress warning messages of the processor.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getSuppressWarnings</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>suppressWarnings</name></expr>;</return>
    }</block></function>    

    <comment type="javadoc">/**
     * Whether transformation errors should make the build fail.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnTransformationError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnTransformationError</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether any errors should make the build fail.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnError</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether the build should fail if the nested resource collection is empty.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnNoResources</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnNoResources</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A system property to set during transformation.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSysproperty</name><parameter_list>(<param><decl><type><name><name>Environment</name>.<name>Variable</name></name></type> <name>sysp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sysProperties</name>.<name>addVariable</name></name><argument_list>(<argument><expr><name>sysp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A set of system properties to set during transformation.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSyspropertyset</name><parameter_list>(<param><decl><type><name>PropertySet</name></type> <name>sysp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sysProperties</name>.<name>addSyspropertyset</name></name><argument_list>(<argument><expr><name>sysp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Enables Xalan2 traces and uses the given configuration.
     *
     * &lt;p&gt;Note that this element doesn't have any effect with a
     * processor other than trax or if the Transformer is not Xalan2's
     * transformer implementation.&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>TraceConfiguration</name></type> <name>createTrace</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>traceConfiguration</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"can't have more than one trace"
                                     + " configuration"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>traceConfiguration</name> = new <call><name>TraceConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>traceConfiguration</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Configuration for Xalan2 traces.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>TraceConfiguration</name></type> <name>getTraceConfiguration</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>traceConfiguration</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Load processor here instead of in setProcessor - this will be
     * called from within execute, so we have access to the latest
     * classpath.
     *
     * @param proc the name of the processor to load.
     * @exception Exception if the processor cannot be loaded.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>resolveProcessor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>proc</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>proc</name>.<name>equals</name></name><argument_list>(<argument><expr><name>PROCESSOR_TRAX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>liaison</name> = new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>TraXLiaison</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">//anything else is a classname</comment>
            <decl_stmt><decl><type><name>Class</name></type> <name>clazz</name> =<init> <expr><call><name>loadClass</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>liaison</name> = (<name>XSLTLiaison</name>) <call><name><name>clazz</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Load named class either via the system classloader or a given
     * custom classloader.
     *
     * As a side effect, the loader is set as the thread context classloader
     * @param classname the name of the class to load.
     * @return the requested class.
     * @exception Exception if the class could not be loaded.
     */</comment>
    <function><type><specifier>private</specifier> <name>Class</name></type> <name>loadClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>setupLoader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>loader</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If a custom classpath has been defined but no loader created
     * yet, create the classloader and set it as the context
     * classloader.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setupLoader</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>classpath</name> != <name>null</name> &amp;&amp; <name>loader</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>loader</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>loader</name>.<name>setThreadContextLoader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Specifies the output name for the styled result from the
     * &lt;tt&gt;in&lt;/tt&gt; attribute; required if &lt;tt&gt;in&lt;/tt&gt; is set
     *
     * @param outFile the output File instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOut</name><parameter_list>(<param><decl><type><name>File</name></type> <name>outFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outFile</name></name> = <name>outFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * specifies a single XML document to be styled. Should be used
     * with the &lt;tt&gt;out&lt;/tt&gt; attribute; ; required if &lt;tt&gt;out&lt;/tt&gt; is set
     *
     * @param inFile the input file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIn</name><parameter_list>(<param><decl><type><name>File</name></type> <name>inFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>inFile</name></name> = <name>inFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Throws a BuildException if the destination directory hasn't
     * been specified.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkDest</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>destDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr>"destdir attributes must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Styles all existing resources.
     *
     * @param stylesheet style sheet to use
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>processResources</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>stylesheet</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resources</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr>!<call><name><name>r</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>File</name></type> <name>base</name> =<init> <expr><name>baseDir</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileProvider</name></type> <name>fp</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fp</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>FileResource</name></type> <name>f</name> =<init> <expr><call><name><name>ResourceUtils</name>.<name>asFileResource</name></name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>base</name> = <call><name><name>f</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>base</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>name</name> = <call><name><name>f</name>.<name>getFile</name></name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>destDir</name></expr></argument>, <argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Processes the given input XML file and stores the result
     * in the given resultFile.
     *
     * @param baseDir the base directory for resolving files.
     * @param xmlFile the input file
     * @param destDir the destination directory
     * @param stylesheet the stylesheet to use.
     * @exception BuildException if the processing fails.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>process</name><parameter_list>(<param><decl><type><name>File</name></type> <name>baseDir</name></decl></param>, <param><decl><type><name>String</name></type> <name>xmlFile</name></decl></param>, <param><decl><type><name>File</name></type> <name>destDir</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>stylesheet</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>File</name></type>   <name>outF</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type>   <name>inF</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>styleSheetLastModified</name> =<init> <expr><call><name><name>stylesheet</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>inF</name> = new <call><name>File</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr><name>xmlFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>inF</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Skipping " + <name>inF</name> + " it is a directory."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapper</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mapperElement</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mapper</name> = <call><name><name>mapperElement</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>mapper</name> = new <call><name>StyleMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>outFileName</name> =<init> <expr><call><name><name>mapper</name>.<name>mapFileName</name></name><argument_list>(<argument><expr><name>xmlFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>outFileName</name> == <name>null</name> || <name><name>outFileName</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Skipping " + <name>inFile</name> + " it cannot get mapped to output."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then> <else>else <if>if <condition>(<expr><name>outFileName</name> == <name>null</name> || <name><name>outFileName</name>.<name>length</name></name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Skipping " + <name>inFile</name> + " its mapping is ambiguos."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if></else></if>
            <expr_stmt><expr><name>outF</name> = new <call><name>File</name><argument_list>(<argument><expr><name>destDir</name></expr></argument>, <argument><expr><name><name>outFileName</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>force</name> || <call><name><name>inF</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>outF</name>.<name>lastModified</name></name><argument_list>()</argument_list></call>
                    || <name>styleSheetLastModified</name> &gt; <call><name><name>outF</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ensureDirectoryFor</name><argument_list>(<argument><expr><name>outF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Processing " + <name>inF</name> + " to " + <name>outF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>configureLiaison</name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setLiaisonDynamicFileParameters</name><argument_list>(<argument><expr><name>liaison</name></expr></argument>, <argument><expr><name>inF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>liaison</name>.<name>transform</name></name><argument_list>(<argument><expr><name>inF</name></expr></argument>, <argument><expr><name>outF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <comment type="line">// If failed to process document, must delete target document,</comment>
            <comment type="line">// or it will not attempt to process it the second time</comment>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to process " + <name>inFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>outF</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>outF</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>handleTransformationError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function> <comment type="line">//-- processXML</comment>

    <comment type="javadoc">/**
     * Process the input file to the output file with the given stylesheet.
     *
     * @param inFile the input file to process.
     * @param outFile the destination file.
     * @param stylesheet the stylesheet to use.
     * @exception BuildException if the processing fails.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>process</name><parameter_list>(<param><decl><type><name>File</name></type> <name>inFile</name></decl></param>, <param><decl><type><name>File</name></type> <name>outFile</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>stylesheet</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>styleSheetLastModified</name> =<init> <expr><call><name><name>stylesheet</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"In file " + <name>inFile</name> + " time: " + <call><name><name>inFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Out file " + <name>outFile</name> + " time: " + <call><name><name>outFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Style file " + <name>xslFile</name> + " time: " + <name>styleSheetLastModified</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>force</name> || <call><name><name>inFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>outFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call>
                    || <name>styleSheetLastModified</name> &gt;= <call><name><name>outFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ensureDirectoryFor</name><argument_list>(<argument><expr><name>outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Processing " + <name>inFile</name> + " to " + <name>outFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>configureLiaison</name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setLiaisonDynamicFileParameters</name><argument_list>(<argument><expr><name>liaison</name></expr></argument>, <argument><expr><name>inFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>liaison</name>.<name>transform</name></name><argument_list>(<argument><expr><name>inFile</name></expr></argument>, <argument><expr><name>outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Skipping input file " + <name>inFile</name> + " because it is older than output file "
                        + <name>outFile</name> + " and so is the stylesheet " + <name>stylesheet</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to process " + <name>inFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>outFile</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>outFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>handleTransformationError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Ensure the directory exists for a given file
     *
     * @param targetFile the file for which the directories are required.
     * @exception BuildException if the directories cannot be created.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>ensureDirectoryFor</name><parameter_list>(<param><decl><type><name>File</name></type> <name>targetFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>directory</name> =<init> <expr><call><name><name>targetFile</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>directory</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>directory</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr>"Unable to create directory: "
                            + <call><name><name>directory</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the factory instance configured for this processor
     *
     * @return the factory instance in use
     */</comment>
    <function><type><specifier>public</specifier> <name>Factory</name></type> <name>getFactory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>factory</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the XML catalog containing entity definitions
     *
     * @return the XML catalog for the task.
     */</comment>
    <function><type><specifier>public</specifier> <name>XMLCatalog</name></type> <name>getXMLCatalog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>xmlCatalog</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>xmlCatalog</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an enumeration on the outputproperties.
     * @return the outputproperties
     */</comment>
    <function><type><specifier>public</specifier> <name>Enumeration</name></type> <name>getOutputProperties</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>outputProperties</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the Liaison implementation to use in processing.
     *
     * @return an instance of the XSLTLiaison interface.
     */</comment>
    <function><type><specifier>protected</specifier> <name>XSLTLiaison</name></type> <name>getLiaison</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// if processor wasn't specified, use TraX.</comment>
        <if>if <condition>(<expr><name>liaison</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>processor</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>resolveProcessor</name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then> <else>else <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>resolveProcessor</name><argument_list>(<argument><expr><name>PROCESSOR_TRAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>e1</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>e1</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><name>liaison</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create an instance of an XSL parameter for configuration by Ant.
     *
     * @return an instance of the Param class to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>Param</name></type> <name>createParam</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Param</name></type> <name>p</name> =<init> <expr>new <call><name>Param</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>params</name>.<name>add</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The Param inner class used to store XSL parameters
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Param</name> <block>{
        <comment type="javadoc">/** The parameter name */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** The parameter's value */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>expression</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Type of the expression.
         * @see ParamType
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>ifCond</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>unlessCond</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set the current project
         *
         * @param project the current project
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Set the parameter name.
         *
         * @param name the name of the parameter.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * The parameter value -
         * can be a primitive type value or an XPath expression.
         * @param expression the parameter's value/expression.
         * @see #setType(java.lang.String) 
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setExpression</name><parameter_list>(<param><decl><type><name>String</name></type> <name>expression</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>expression</name></name> = <name>expression</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @see ParamType
         * @since Ant 1.9.3
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        }</block></function>
        
        <comment type="javadoc">/**
         * Get the parameter name
         *
         * @return the parameter name
         * @exception BuildException if the name is not set.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><name>name</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Name attribute is missing."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Get the parameter's value
         *
         * @return the parameter value
         * @exception BuildException if the value is not set.
         * @see #getType()
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getExpression</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><name>expression</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Expression attribute is missing."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr><name>expression</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @see ParamType
         * @since Ant 1.9.3
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>type</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set whether this param should be used.  It will be used if
         * the expression evaluates to true or the name of a property
         * which has been set, otherwise it won't.
         * @param ifCond evaluated expression
         * @since Ant 1.8.0
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>ifCond</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>ifCond</name></name> = <name>ifCond</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Set whether this param should be used.  It will be used if
         * the expression evaluates to true or the name of a property
         * which has been set, otherwise it won't.
         * @param ifProperty evaluated expression
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ifProperty</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setIf</name><argument_list>(<argument><expr>(<name>Object</name>) <name>ifProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Set whether this param should NOT be used. It will not be
         * used if the expression evaluates to true or the name of a
         * property which has been set, otherwise it will be used.
         * @param unlessCond evaluated expression
         * @since Ant 1.8.0
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>unlessCond</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>unlessCond</name></name> = <name>unlessCond</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Set whether this param should NOT be used. It will not be
         * used if the expression evaluates to true or the name of a
         * property which has been set, otherwise it will be used.
         * @param unlessProperty evaluated expression
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>String</name></type> <name>unlessProperty</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setUnless</name><argument_list>(<argument><expr>(<name>Object</name>) <name>unlessProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Ensures that the param passes the conditions placed
         * on it with &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;unless&lt;/code&gt; properties.
         * @return true if the task passes the "if" and "unless" parameters
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldUse</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>PropertyHelper</name></type> <name>ph</name> =<init> <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>ph</name>.<name>testIfCondition</name></name><argument_list>(<argument><expr><name>ifCond</name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name><name>ph</name>.<name>testUnlessCondition</name></name><argument_list>(<argument><expr><name>unlessCond</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class> <comment type="line">// Param</comment>
    
    <comment type="javadoc">/**
     * Enum for types of the parameter expression.
     *
     * &lt;p&gt;The expression can be:&lt;/p&gt;
     * &lt;ul&gt;
     * &lt;li&gt;primitive type that will be parsed from the string value e.g.
     * {@linkplain Integer#parseInt(java.lang.String)}&lt;/li&gt;
     * &lt;li&gt;XPath expression that will be evaluated (outside of the transformed
     * document - on empty one) and casted to given type. Inside XPath
     * expressions the Ant variables (properties) can be used (as XPath
     * variables - e.g. $variable123). n.b. placeholders in form of
     * ${variable123} will be substituted with their values before evaluating the
     * XPath expression (so it can be used for dynamic XPath function names and
     * other hacks).&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;p&gt;The parameter will be then passed to the XSLT template.&lt;/p&gt;
     *
     * &lt;p&gt;Default type (if omited) is primitive String. So if the expression is e.g
     * "true" with no type, in XSLT it will be only a text string, not true
     * boolean.&lt;/p&gt;
     * 
     * @see Param#setType(java.lang.String)
     * @see Param#setExpression(java.lang.String)
     * @since Ant 1.9.3
     */</comment>
    <enum><specifier>public</specifier> enum <name>ParamType</name> <block>{

        <expr_stmt><expr><name>STRING</name></expr>,
        <expr><name>BOOLEAN</name></expr>,
        <expr><name>INT</name></expr>,
        <expr><name>LONG</name></expr>,
        <expr><name>DOUBLE</name></expr>,
        <expr><name>XPATH_STRING</name></expr>,
        <expr><name>XPATH_BOOLEAN</name></expr>,
        <expr><name>XPATH_NUMBER</name></expr>,
        <expr><name>XPATH_NODE</name></expr>,
        <expr><name>XPATH_NODESET</name></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ParamType</name></argument>, <argument><name>QName</name></argument>&gt;</argument_list></name></type> <name>XPATH_TYPES</name></decl>;</decl_stmt>

        static <block>{
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ParamType</name></argument>, <argument><name>QName</name></argument>&gt;</argument_list></name></type> <name>m</name> =<init> <expr>new <call><name><name>EnumMap</name><argument_list>&lt;<argument><name>ParamType</name></argument>, <argument><name>QName</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ParamType</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <constructor_decl><name><name>m</name>.<name>put</name></name><parameter_list>(<param><decl><type><name>XPATH_STRING</name></type></decl></param>, <param><decl><type><name><name>XPathConstants</name>.<name>STRING</name></name></type></decl></param>)</parameter_list>;</constructor_decl>
            <constructor_decl><name><name>m</name>.<name>put</name></name><parameter_list>(<param><decl><type><name>XPATH_BOOLEAN</name></type></decl></param>, <param><decl><type><name><name>XPathConstants</name>.<name>BOOLEAN</name></name></type></decl></param>)</parameter_list>;</constructor_decl>
            <constructor_decl><name><name>m</name>.<name>put</name></name><parameter_list>(<param><decl><type><name>XPATH_NUMBER</name></type></decl></param>, <param><decl><type><name><name>XPathConstants</name>.<name>NUMBER</name></name></type></decl></param>)</parameter_list>;</constructor_decl>
            <constructor_decl><name><name>m</name>.<name>put</name></name><parameter_list>(<param><decl><type><name>XPATH_NODE</name></type></decl></param>, <param><decl><type><name><name>XPathConstants</name>.<name>NODE</name></name></type></decl></param>)</parameter_list>;</constructor_decl>
            <constructor_decl><name><name>m</name>.<name>put</name></name><parameter_list>(<param><decl><type><name>XPATH_NODESET</name></type></decl></param>, <param><decl><type><name><name>XPathConstants</name>.<name>NODESET</name></name></type></decl></param>)</parameter_list>;</constructor_decl>
            <expr_stmt><expr><name>XPATH_TYPES</name> = <call><name><name>Collections</name>.<name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block></enum>

    <comment type="javadoc">/**
     * Create an instance of an output property to be configured.
     * @return the newly created output property.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>OutputProperty</name></type> <name>createOutputProperty</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>OutputProperty</name></type> <name>p</name> =<init> <expr>new <call><name>OutputProperty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>outputProperties</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Specify how the result tree should be output as specified
     * in the &lt;a href="http://www.w3.org/TR/xslt#output"&gt;
     * specification&lt;/a&gt;.
     * @since Ant 1.5
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>OutputProperty</name> <block>{
        <comment type="javadoc">/** output property name */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <comment type="javadoc">/** output property value */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * @return the output property name.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * set the name for this property
         * @param name A non-null String that specifies an
         * output property name, which may be namespace qualified.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the output property value.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>value</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * set the value for this property
         * @param value The non-null string value of the output property.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Initialize internal instance of XMLCatalog.
     * Initialize XPath for parameter evaluation.
     * @throws BuildException on error
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xmlCatalog</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>xpathFactory</name> = <call><name><name>XPathFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xpath</name> = <call><name><name>xpathFactory</name>.<name>newXPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpath</name>.<name>setXPathVariableResolver</name></name><argument_list>(<argument><expr>new <class><super><name>XPathVariableResolver</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>Object</name></type> <name>resolveVariable</name><parameter_list>(<param><decl><type><name>QName</name></type> <name>variableName</name></decl></param>)</parameter_list> <block>{
                <return>return <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><call><name><name>variableName</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Loads the stylesheet and set xsl:param parameters.
     *
     * @param stylesheet the file from which to load the stylesheet.
     * @exception BuildException if the stylesheet cannot be loaded.
     * @deprecated since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>configureLiaison</name><parameter_list>(<param><decl><type><name>File</name></type> <name>stylesheet</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>fr</name> =<init> <expr>new <call><name>FileResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fr</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fr</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureLiaison</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Loads the stylesheet and set xsl:param parameters.
     *
     * @param stylesheet the resource from which to load the stylesheet.
     * @exception BuildException if the stylesheet cannot be loaded.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>configureLiaison</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>stylesheet</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>stylesheetLoaded</name> &amp;&amp; <name>reuseLoadedStylesheet</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>stylesheetLoaded</name> = true</expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Loading stylesheet " + <name>stylesheet</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// We call liaison.configure() and then liaison.setStylesheet()</comment>
            <comment type="line">// so that the internal variables of liaison can be set up</comment>
            <if>if <condition>(<expr><name>liaison</name> <name>instanceof</name> <name>XSLTLiaison2</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>XSLTLiaison2</name>) <name>liaison</name>).<call><name>configure</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>liaison</name> <name>instanceof</name> <name>XSLTLiaison3</name></expr>)</condition><then> <block>{
                <comment type="line">// If we are here we can set the stylesheet as a</comment>
                <comment type="line">// resource</comment>
                <expr_stmt><expr>((<name>XSLTLiaison3</name>) <name>liaison</name>).<call><name>setStylesheet</name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// If we are here we cannot set the stylesheet as</comment>
                <comment type="line">// a resource, but we can set it as a file. So,</comment>
                <comment type="line">// we make an attempt to get it as a file</comment>
                <decl_stmt><decl><type><name>FileProvider</name></type> <name>fp</name> =<init>
                    <expr><call><name><name>stylesheet</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>fp</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>liaison</name>.<name>setStylesheet</name></name><argument_list>(<argument><expr><call><name><name>fp</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr><call><name><name>liaison</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call>
                                + " accepts the stylesheet only as a file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></else></if>
            }</block></else></if>
            <for>for (<init><decl><type><name>Param</name></type> <name>p</name> :<range> <expr><name>params</name></expr></range></decl></init>) <block>{
                <if>if <condition>(<expr><call><name><name>p</name>.<name>shouldUse</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Object</name></type> <name>evaluatedParam</name> =<init> <expr><call><name>evaluateParam</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>liaison</name> <name>instanceof</name> <name>XSLTLiaison4</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr>((<name>XSLTLiaison4</name>)<name>liaison</name>).<call><name>addParam</name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>evaluatedParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <if>if <condition>(<expr><name>evaluatedParam</name> == <name>null</name> || <name>evaluatedParam</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>liaison</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>String</name>)<name>evaluatedParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"XSLTLiaison '" + <call><name><name>liaison</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                                    + "' supports only String parameters. Converting parameter '" + <call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                                    + "' to its String value '" + <name>evaluatedParam</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>liaison</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>evaluatedParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></else></if>
                }</block></then></if>
            }</block></for>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to transform using stylesheet " + <name>stylesheet</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>handleTransformationError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
    
    <comment type="javadoc">/**
     * Evaluates parameter expression according to its type.
     *
     * @param param parameter from Ant build file
     * @return value to be passed to XSLT as parameter
     * @throws IllegalArgumentException if param type is unsupported
     * @throws NumberFormatException if expression of numeric type is not
     * desired numeric type
     * @throws XPathExpressionException if XPath expression can not be compiled
     * @since Ant 1.9.3
     */</comment>
    <function><type><specifier>private</specifier> <name>Object</name></type> <name>evaluateParam</name><parameter_list>(<param><decl><type><name>Param</name></type> <name>param</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>XPathExpressionException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>typeName</name> =<init> <expr><call><name><name>param</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expression</name> =<init> <expr><call><name><name>param</name>.<name>getExpression</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ParamType</name></type> <name>type</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>typeName</name> == <name>null</name> || "".<call><name>equals</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>type</name> = <name><name>ParamType</name>.<name>STRING</name></name></expr>;</expr_stmt> <comment type="line">// String is default</comment>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <expr_stmt><expr><name>type</name> = <call><name><name>ParamType</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid XSLT parameter type: " + <name>typeName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>

        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
            <case>case <expr><name>STRING</name></expr>:
                <return>return <expr><name>expression</name></expr>;</return>
            </case><case>case <expr><name>BOOLEAN</name></expr>:
                <return>return <expr><call><name><name>Boolean</name>.<name>parseBoolean</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>DOUBLE</name></expr>:
                <return>return <expr><call><name><name>Double</name>.<name>parseDouble</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>INT</name></expr>:
                <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>LONG</name></expr>:
                <return>return <expr><call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><default>default: <comment type="line">// XPath expression</comment>
                <decl_stmt><decl><type><name>QName</name></type> <name>xpathType</name> =<init> <expr><call><name><name>ParamType</name>.<name>XPATH_TYPES</name>.<name>get</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>xpathType</name> == <name>null</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid XSLT parameter type: " + <name>typeName</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><name>XPathExpression</name></type> <name>xpe</name> =<init> <expr><call><name><name>xpath</name>.<name>compile</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// null = evaluate XPath on empty XML document</comment>
                    <return>return <expr><call><name><name>xpe</name>.<name>evaluate</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>null</name></expr></argument>, <argument><expr><name>xpathType</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></else></if>
        </default>}</block></switch>
    }</block></function>

    <comment type="javadoc">/**
     * Sets file parameter(s) for directory and filename if the attribute
     * 'filenameparameter' or 'filedirparameter' are set in the task.
     *
     * @param  liaison    to change parameters for
     * @param  inFile     to get the additional file information from
     * @throws Exception  if an exception occurs on filename lookup
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setLiaisonDynamicFileParameters</name><parameter_list>(
        <param><decl><type><name>XSLTLiaison</name></type> <name>liaison</name></decl></param>, <param><decl><type><name>File</name></type> <name>inFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>fileNameParameter</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>liaison</name>.<name>addParam</name></name><argument_list>(<argument><expr><name>fileNameParameter</name></expr></argument>, <argument><expr><call><name><name>inFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>fileDirParameter</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getRelativePath</name></name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr><name>inFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Give always a slash as file separator, so the stylesheet could be sure about that</comment>
            <comment type="line">// Use '.' so a dir+"/"+name would not result in an absolute path</comment>
            <expr_stmt><expr><call><name><name>liaison</name>.<name>addParam</name></name><argument_list>(<argument><expr><name>fileDirParameter</name></expr></argument>, <argument><expr><call><name><name>file</name>.<name>getParent</name></name><argument_list>()</argument_list></call> != <name>null</name> ? <call><name><name>file</name>.<name>getParent</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(
                    <argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> : "."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Create the factory element to configure a trax liaison.
     * @return the newly created factory element.
     * @throws BuildException if the element is created more than one time.
     */</comment>
    <function><type><specifier>public</specifier> <name>Factory</name></type> <name>createFactory</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>factory</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr>"'factory' element must be unique"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>factory</name> = new <call><name>Factory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>factory</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Throws an exception with the given message if failOnError is
     * true, otherwise logs the message using the WARN level.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleError</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Throws an exception with the given nested exception if
     * failOnError is true, otherwise logs the message using the WARN
     * level.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleError</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>ex</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Caught an exception: " + <name>ex</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Throws an exception with the given nested exception if
     * failOnError and failOnTransformationError are true, otherwise
     * logs the message using the WARN level.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleTransformationError</name><parameter_list>(<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>failOnError</name> &amp;&amp; <name>failOnTransformationError</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Caught an error during transformation: " + <name>ex</name></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * The factory element to configure a transformer factory
     * @since Ant 1.6
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Factory</name> <block>{

        <comment type="javadoc">/** the factory class name to use for TraXLiaison */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * the list of factory attributes to use for TraXLiaison
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>attributes</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * @return the name of the factory.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the name of the factory
         * @param name the name of the factory.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Create an instance of a factory attribute.
         * @param attr the newly created factory attribute
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addAttribute</name><parameter_list>(<param><decl><type><name>Attribute</name></type> <name>attr</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>attributes</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * return the attribute elements.
         * @return the enumeration of attributes
         */</comment>
        <function><type><specifier>public</specifier> <name>Enumeration</name></type> <name>getAttributes</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>attributes</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * A JAXP factory attribute. This is mostly processor specific, for
         * example for Xalan 2.3+, the following attributes could be set:
         * &lt;ul&gt;
         *  &lt;li&gt;http://xml.apache.org/xalan/features/optimize (true|false) &lt;/li&gt;
         *  &lt;li&gt;http://xml.apache.org/xalan/features/incremental (true|false) &lt;/li&gt;
         * &lt;/ul&gt;
         */</comment>
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>Attribute</name> <super><implements>implements <name>DynamicConfigurator</name></implements></super> <block>{

            <comment type="javadoc">/** attribute name, mostly processor specific */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

            <comment type="javadoc">/** attribute value, often a boolean string */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>value</name></decl>;</decl_stmt>

            <comment type="javadoc">/**
             * @return the attribute name.
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>name</name></expr>;</return>
            }</block></function>

            <comment type="javadoc">/**
             * @return the output property value.
             */</comment>
            <function><type><specifier>public</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>value</name></expr>;</return>
            }</block></function>

            <comment type="javadoc">/**
             * Not used.
             * @param name not used
             * @return null
             * @throws BuildException never
             */</comment>
            <function><type><specifier>public</specifier> <name>Object</name></type> <name>createDynamicElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></function>

            <comment type="javadoc">/**
             * Set an attribute.
             * Only "name" and "value" are supported as names.
             * @param name the name of the attribute
             * @param value the value of the attribute
             * @throws BuildException on error
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>setDynamicAttribute</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
                <comment type="line">// only 'name' and 'value' exist.</comment>
                <if>if <condition>(<expr>"name".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>value</name></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr>"value".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// a value must be of a given type</comment>
                    <comment type="line">// say boolean|integer|string that are mostly used.</comment>
                    <if>if <condition>(<expr>"true".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name><name>Boolean</name>.<name>TRUE</name></name></expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr>"false".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name><name>Boolean</name>.<name>FALSE</name></name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <try>try <block>{
                            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = new <call><name>Integer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>) <block>{
                            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></else></if></else></if>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unsupported attribute: " + <name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if></else></if>
            }</block></function>
        }</block></class> <comment type="line">// -- class Attribute</comment>
    }</block></class> <comment type="line">// -- class Factory</comment>

    <comment type="javadoc">/**
     * Mapper implementation of the "traditional" way &amp;lt;xslt&amp;gt;
     * mapped filenames.
     *
     * &lt;p&gt;If the file has an extension, chop it off.  Append whatever
     * the user has specified as extension or ".html".&lt;/p&gt;
     *
     * @since Ant 1.6.2
     */</comment>
    <class><specifier>private</specifier> class <name>StyleMapper</name> <super><implements>implements <name>FileNameMapper</name></implements></super> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>from</name></decl></param>)</parameter_list> <block>{
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        }</block></function>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>mapFileName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>xmlFile</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>dotPos</name> =<init> <expr><call><name><name>xmlFile</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dotPos</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>xmlFile</name> = <call><name><name>xmlFile</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>dotPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>xmlFile</name> + <name>targetExtension</name></expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Configuration for Xalan2 traces.
     *
     * @since Ant 1.8.0
     */</comment>
    <class><specifier>public</specifier> <specifier>final</specifier> class <name>TraceConfiguration</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>elements</name>, <name>extension</name>, <name>generation</name>, <name>selection</name>, <name>templates</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set to true if the listener is to print events that occur
         * as each node is 'executed' in the stylesheet.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setElements</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>elements</name> = <name>b</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * True if the listener is to print events that occur as each
         * node is 'executed' in the stylesheet.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getElements</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>elements</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set to true if the listener is to print information after
         * each extension event.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtension</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>extension</name> = <name>b</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * True if the listener is to print information after each
         * extension event.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getExtension</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>extension</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set to true if the listener is to print information after
         * each result-tree generation event.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setGeneration</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>generation</name> = <name>b</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * True if the listener is to print information after each
         * result-tree generation event.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getGeneration</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>generation</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set to true if the listener is to print information after
         * each selection event.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelection</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>selection</name> = <name>b</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * True if the listener is to print information after each
         * selection event.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getSelection</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>selection</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set to true if the listener is to print an event whenever a
         * template is invoked.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTemplates</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>templates</name> = <name>b</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * True if the listener is to print an event whenever a
         * template is invoked.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getTemplates</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>templates</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * The stream to write traces to.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <call><name>LogOutputStream</name><argument_list>(<argument><expr><name><name>XSLTProcess</name>.<name>this</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
