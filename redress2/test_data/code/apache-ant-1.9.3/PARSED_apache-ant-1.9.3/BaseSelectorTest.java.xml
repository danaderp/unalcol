<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\selectors\BaseSelectorTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Base test case for Selectors. Provides a shared test as well as
 * a test bed for selecting on, and a helper method for determining
 * whether selections are correct.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseSelectorTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TaskdefForMakingBed</name></type> <name>tbed</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>basedirname</name> =<init> <expr>"src/etc/testcases/types"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>beddirname</name> =<init> <expr><name>basedirname</name> + "/selectortest"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>mirrordirname</name> =<init> <expr><name>basedirname</name> + "/selectortest2"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>basedir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>basedirname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>beddir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>beddirname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>mirrordir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mirrordirname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name><index>[]</index></type> <name>filenames</name> =<init> <expr><block>{<expr>"."</expr>,<expr>"asf-logo.gif.md5"</expr>,<expr>"asf-logo.gif.bz2"</expr>,
            <expr>"asf-logo.gif.gz"</expr>,<expr>"copy.filterset.filtered"</expr>,<expr>"zip/asf-logo.gif.zip"</expr>,
            <expr>"tar/asf-logo.gif.tar"</expr>,<expr>"tar/asf-logo-huge.tar.gz"</expr>,
            <expr>"tar/gz/asf-logo.gif.tar.gz"</expr>,<expr>"tar/bz2/asf-logo.gif.tar.bz2"</expr>,
            <expr>"tar/bz2/asf-logo-huge.tar.bz2"</expr>,<expr>"tar/bz2"</expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name><index>[]</index></type> <name>files</name> =<init> <expr>new <name><name>File</name><index>[<expr><name><name>filenames</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name><index>[]</index></type> <name>mirrorfiles</name> =<init> <expr>new <name><name>File</name><index>[<expr><name><name>filenames</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BaseSelectorTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setBaseDir</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>x</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>x</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>files</name><index>[<expr><name>x</name></expr>]</index></name> = new <call><name>File</name><argument_list>(<argument><expr><name>beddir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mirrorfiles</name><index>[<expr><name>x</name></expr>]</index></name> = new <call><name>File</name><argument_list>(<argument><expr><name>mirrordir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Override this in child classes to return a specific Selector
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>BaseSelector</name></type> <name>getInstance</name><parameter_list>()</parameter_list>;</function_decl>


    <comment type="javadoc">/**
     * Return a preconfigured selector (with a set reference to
     * project instance).
     * @return the selector
     */</comment>
    <function><type><specifier>public</specifier> <name>BaseSelector</name></type> <name>getSelector</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BaseSelector</name></type> <name>selector</name> =<init> <expr><call><name>getInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>selector</name>.<name>setProject</name></name><argument_list>( <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>selector</name></expr>;</return>
    }</block></function>


    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This is a test that all Selectors derived from BaseSelector can
     * use. It calls the setError() method and checks to ensure that a
     * BuildException is thrown as a result.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRespondsToError</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BaseSelector</name></type> <name>s</name> =<init> <expr><call><name>getInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>s</name>.<name>setError</name></name><argument_list>(<argument><expr>"test error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>beddir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Cannot cause BuildException when setError() is called"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"test error"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/**
     * This is a helper method that takes a selector and calls its
     * isSelected() method on each file in the testbed. It returns
     * a string of "T"s amd "F"s
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>selectionString</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>selectionString</name><argument_list>(<argument><expr><name>beddir</name></expr></argument>,<argument><expr><name>files</name></expr></argument>,<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This is a helper method that takes a selector and calls its
     * isSelected() method on each file in the mirror testbed. This
     * variation is used for dependency checks and to get around the
     * limitations in the touch task when running JDK 1.1. It returns
     * a string of "T"s amd "F"s.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>mirrorSelectionString</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>selectionString</name><argument_list>(<argument><expr><name>mirrordir</name></expr></argument>,<argument><expr><name>mirrorfiles</name></expr></argument>,<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Worker method for the two convenience methods above. Applies a
     * selector on a set of files passed in and returns a string of
     * "T"s amd "F"s from applying the selector to each file.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>selectionString</name><parameter_list>(<param><decl><type><name>File</name></type> <name>basedir</name></decl></param>, <param><decl><type><name><name>File</name><index>[]</index></name></type> <name>files</name></decl></param>, <param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>x</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>x</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>selector</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>'T'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>'F'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Does the selection test for a given selector and prints the
     * filenames of the differing files (selected but shouldn't,
     * not selected but should).
     * @param selector  The selector to test
     * @param expected  The expected result
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>performTests</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>, <param><decl><type><name>String</name></type> <name>expected</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name>selectionString</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>diff</name> =<init> <expr><call><name>diff</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>resolved</name> =<init> <expr><call><name>resolve</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Differing files: " + <name>resolved</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Checks which files are selected and shouldn't be or which
     *  are not selected but should.
     *  @param expected    String containing 'F's and 'T's
     *  @param result      String containing 'F's and 'T's
     *  @return Difference as String containing '-' (equal) and
     *          'X' (difference).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>diff</name><parameter_list>(<param><decl><type><name>String</name></type> <name>expected</name></decl></param>, <param><decl><type><name>String</name></type> <name>result</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length1</name> =<init> <expr><call><name><name>expected</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>length2</name> =<init> <expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>min</name> =<init> <expr>(<name>length1</name> &gt; <name>length2</name>) ? <name>length2</name> : <name>length1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>min</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(
                  <argument><expr>(<call><name><name>expected</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <call><name><name>result</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)
                ? "-"
                : "X"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Resolves a diff-String (@see diff()) against the (inherited) filenames-
     * and files arrays.
     * @param filelist    Diff-String
     * @return String containing the filenames for all differing files,
     *         separated with semicolons ';'
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>resolve</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filelist</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>min</name> =<init> <expr>(<name><name>filenames</name>.<name>length</name></name> &gt; <call><name><name>filelist</name>.<name>length</name></name><argument_list>()</argument_list></call>)
                ? <call><name><name>filelist</name>.<name>length</name></name><argument_list>()</argument_list></call>
                : <name><name>filenames</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>min</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>'X'==<call><name><name>filelist</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>filenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>";"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * &lt;p&gt;Creates a testbed. We avoid the dreaded "test" word so that we
     * don't falsely identify this as a test to be run. The actual
     * setting up of the testbed is done in the
     * &lt;code&gt;src/etc/testcases/types/selectors.xml&lt;/code&gt; build file.&lt;/p&gt;
     *
     * &lt;p&gt;Note that the right way to call this is within a try block,
     * with a finally clause that calls cleanupBed(). You place tests of
     * the isSelected() method within the try block.&lt;/p&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>makeBed</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>tbed</name> = new <call><name>TaskdefForMakingBed</name><argument_list>(<argument><expr>"setupfiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tbed</name>.<name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tbed</name>.<name>makeTestbed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Cleans up the testbed by calling a target in the
     * &lt;code&gt;src/etc/testcases/types/selectors.xml&lt;/code&gt; file.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>cleanupBed</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>tbed</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>tbed</name>.<name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tbed</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * &lt;p&gt;Creates a mirror of the testbed for use in dependency checks.&lt;/p&gt;
     *
     * &lt;p&gt;Note that the right way to call this is within a try block,
     * with a finally clause that calls cleanupMirror(). You place tests of
     * the isSelected() method within the try block.&lt;/p&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>makeMirror</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>tbed</name> = new <call><name>TaskdefForMakingBed</name><argument_list>(<argument><expr>"mirrorfiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tbed</name>.<name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tbed</name>.<name>makeMirror</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Cleans up the mirror testbed by calling a target in the
     * &lt;code&gt;src/etc/testcases/types/selectors.xml&lt;/code&gt; file.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>cleanupMirror</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>tbed</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>tbed</name>.<name>deleteMirror</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tbed</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <class><specifier>private</specifier> class <name>TaskdefForMakingBed</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

        <constructor><name>TaskdefForMakingBed</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/types/selectors.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>makeTestbed</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"setupfiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>makeMirror</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"mirrorfiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteMirror</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup.mirrorfiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>



}</block></class>
</unit>
