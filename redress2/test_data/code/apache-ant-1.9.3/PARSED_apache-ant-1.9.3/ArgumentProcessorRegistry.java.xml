<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\ArgumentProcessorRegistry.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>LoaderUtils</name></name>;</import>

<comment type="javadoc">/**
 * The global registry for {@link ArgumentProcessor}s.
 * &lt;p&gt;
 * An {@link ArgumentProcessor} implementation can be registered via the system
 * property &lt;code&gt;org.apache.tools.ant.ArgumentProcessor&lt;/code&gt;, or via a JDK1.3
 * 'service', by putting the fully qualified name of the implementation into the
 * file &lt;code&gt;META-INF/services/org.apache.tools.ant.ArgumentProcessor&lt;/code&gt;
 * &lt;p&gt;
 * Use the system property &lt;code&gt;ant.argument-processor.debug&lt;/code&gt; to enable
 * the print of debug log.
 * 
 * @since 1.9
 */</comment>
<class><specifier>public</specifier> class <name>ArgumentProcessorRegistry</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEBUG_ARGUMENT_PROCESSOR_REPOSITORY</name> =<init> <expr>"ant.argument-processor-repo.debug"</expr></init></decl>;</decl_stmt>

    <comment type="line">// The message log level is not accessible here because everything</comment>
    <comment type="line">// is instanciated statically</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEBUG</name> =<init> <expr>"true".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>DEBUG_ARGUMENT_PROCESSOR_REPOSITORY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SERVICE_ID</name> =<init> <expr>"META-INF/services/org.apache.tools.ant.ArgumentProcessor"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ArgumentProcessorRegistry</name></type> <name>instance</name> =<init> <expr>new <call><name>ArgumentProcessorRegistry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ArgumentProcessor</name></argument>&gt;</argument_list></name></type> <name>processors</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ArgumentProcessor</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ArgumentProcessorRegistry</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>instance</name></expr>;</return>
    }</block></function>

    <constructor><specifier>private</specifier> <name>ArgumentProcessorRegistry</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>collectArgumentProcessors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ArgumentProcessor</name></argument>&gt;</argument_list></name></type> <name>getProcessors</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>processors</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>collectArgumentProcessors</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>ClassLoader</name></type> <name>classLoader</name> =<init> <expr><call><name><name>LoaderUtils</name>.<name>getContextClassLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>classLoader</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>resources</name> =<init> <expr><call><name><name>classLoader</name>.<name>getResources</name></name><argument_list>(<argument><expr><name>SERVICE_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>resources</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>URL</name></type> <name>resource</name> =<init> <expr><call><name><name>resources</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ArgumentProcessor</name></type> <name>processor</name> =<init> <expr><call><name>getProcessorByService</name><argument_list>(<argument><expr><call><name><name>resource</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>registerArgumentProcessor</name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>

            <decl_stmt><decl><type><name>InputStream</name></type> <name>systemResource</name> =<init> <expr><call><name><name>ClassLoader</name>.<name>getSystemResourceAsStream</name></name><argument_list>(<argument><expr><name>SERVICE_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>systemResource</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ArgumentProcessor</name></type> <name>processor</name> =<init> <expr><call><name>getProcessorByService</name><argument_list>(<argument><expr><name>systemResource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>registerArgumentProcessor</name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Unable to load ArgumentProcessor from service "
                    + <name>SERVICE_ID</name> + " (" + <call><name><name>e</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + ": "
                    + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerArgumentProcessor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>helperClassName</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>registerArgumentProcessor</name><argument_list>(<argument><expr><call><name>getProcessor</name><argument_list>(<argument><expr><name>helperClassName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerArgumentProcessor</name><parameter_list>(
            <param><decl><type><name><name>Class</name><argument_list>&lt; <argument><name>?</name> <extends>extends <name>ArgumentProcessor</name></extends></argument>&gt;</argument_list></name></type> <name>helperClass</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>registerArgumentProcessor</name><argument_list>(<argument><expr><call><name>getProcessor</name><argument_list>(<argument><expr><name>helperClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ArgumentProcessor</name></type> <name>getProcessor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>helperClassName</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
            <name><name>Class</name><argument_list>&lt; <argument><name>?</name> <extends>extends <name>ArgumentProcessor</name></extends></argument>&gt;</argument_list></name></type> <name>cl</name> =<init> <expr>(<name><name>Class</name><argument_list>&lt; <argument><name>?</name> <extends>extends <name>ArgumentProcessor</name></extends></argument>&gt;</argument_list></name>) <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>helperClassName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>getProcessor</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Argument processor class "
                    + <name>helperClassName</name> + " was not found"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ArgumentProcessor</name></type> <name>getProcessor</name><parameter_list>(
            <param><decl><type><name><name>Class</name><argument_list>&lt; <argument><name>?</name> <extends>extends <name>ArgumentProcessor</name></extends></argument>&gt;</argument_list></name></type> <name>processorClass</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ArgumentProcessor</name></type> <name>processor</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>processor</name> = <call><name><name>processorClass</name>.<name>getConstructor</name></name><argument_list>()</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The argument processor class"
                    + <call><name><name>processorClass</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                    + " could not be instanciated with a default constructor"</expr></argument>,
                    <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>processor</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerArgumentProcessor</name><parameter_list>(<param><decl><type><name>ArgumentProcessor</name></type> <name>processor</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>processor</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>processors</name>.<name>add</name></name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Argument processor "
                    + <call><name><name>processor</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + " registered."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ArgumentProcessor</name></type> <name>getProcessorByService</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <try>try <block>{
                <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>rd</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>processorClassName</name> =<init> <expr><call><name><name>rd</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>processorClassName</name> != <name>null</name> &amp;&amp; !"".<call><name>equals</name><argument_list>(<argument><expr><name>processorClassName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><call><name>getProcessor</name><argument_list>(<argument><expr><name>processorClassName</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block> <finally>finally <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>isr</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// ignore</comment>
            }</block></catch></try>
        }</block></finally></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
