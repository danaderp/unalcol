<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\Equals.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Simple comparison condition.
 *
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> class <name>Equals</name> <super><implements>implements <name>Condition</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>REQUIRED</name> =<init> <expr>1 | 2</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>arg1</name>, <name>arg2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>trim</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>caseSensitive</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>forcestring</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the first argument
     * @param arg1 the first argument.
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArg1</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>arg1</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>arg1</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setArg1</name><argument_list>(<argument><expr>(<name>String</name>) <name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>setArg1Internal</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set the first string
     *
     * @param a1 the first string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArg1</name><parameter_list>(<param><decl><type><name>String</name></type> <name>a1</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setArg1Internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setArg1Internal</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>arg1</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>arg1</name></name> = <name>arg1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> |= 1</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the second argument
     * @param arg2 the second argument.
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArg2</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>arg2</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>arg2</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setArg2</name><argument_list>(<argument><expr>(<name>String</name>) <name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>setArg2Internal</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set the second string
     *
     * @param a2 the second string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArg2</name><parameter_list>(<param><decl><type><name>String</name></type> <name>a2</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setArg2Internal</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setArg2Internal</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>arg2</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>arg2</name></name> = <name>arg2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> |= 2</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Should we want to trim the arguments before comparing them?
     * @param b if true trim the arguments
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTrim</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>trim</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Should the comparison be case sensitive?
     * @param b if true use a case sensitive comparison (this is the
     *          default)
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCasesensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>caseSensitive</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to force string comparisons for non-equal, non-string objects.
     * This allows object properties (legal in Ant 1.8.x+) to be compared as strings.
     * @param forcestring value to set
     * @since Ant 1.8.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setForcestring</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>forcestring</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>forcestring</name></name> = <name>forcestring</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return true if the two strings are equal
     * @exception BuildException if the attributes are not set correctly
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>(<name>args</name> &amp; <name>REQUIRED</name>) != <name>REQUIRED</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"both arg1 and arg2 are required in equals"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>arg1</name> == <name>arg2</name> || <name>arg1</name> != <name>null</name> &amp;&amp; <call><name><name>arg1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>forcestring</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>arg1</name> = <name>arg1</name> == <name>null</name> || <name>arg1</name> <name>instanceof</name> <name>String</name> ? <name>arg1</name> : <call><name><name>arg1</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>arg2</name> = <name>arg2</name> == <name>null</name> || <name>arg2</name> <name>instanceof</name> <name>String</name> ? <name>arg2</name> : <call><name><name>arg2</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>arg1</name> <name>instanceof</name> <name>String</name> &amp;&amp; <name>trim</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>arg1</name> = ((<name>String</name>) <name>arg1</name>).<call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>arg2</name> <name>instanceof</name> <name>String</name> &amp;&amp; <name>trim</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>arg2</name> = ((<name>String</name>) <name>arg2</name>).<call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>arg1</name> <name>instanceof</name> <name>String</name> &amp;&amp; <name>arg2</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s1</name> =<init> <expr>(<name>String</name>) <name>arg1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>s2</name> =<init> <expr>(<name>String</name>) <name>arg2</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>caseSensitive</name> ? <call><name><name>s1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call> : <call><name><name>s1</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>
}</block></class>
</unit>
