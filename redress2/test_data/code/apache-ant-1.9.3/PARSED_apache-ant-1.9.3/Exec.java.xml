<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Exec.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * Executes a given command if the os platform is appropriate.
 *
 * &lt;p&gt;&lt;strong&gt;As of Ant 1.2, this class is no longer the
 * implementation of Ant's &amp;lt;exec&amp;gt; task - it is considered to be
 * dead code by the Ant developers and is unmaintained.  Don't use
 * it.&lt;/strong&gt;&lt;/p&gt;
 *
 * @deprecated since 1.2.
 *             delegate to {@link org.apache.tools.ant.taskdefs.Execute Execute}
 *             instead.
 */</comment>
<class><specifier>public</specifier> class <name>Exec</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>os</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>command</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>PrintWriter</name></type> <name>fos</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for Exec.
     * Prints a warning message to std error.
     */</comment>
    <constructor><specifier>public</specifier> <name>Exec</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"As of Ant 1.2 released in October 2000, "
            + "the Exec class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"is considered to be dead code by the Ant "
            + "developers and is unmaintained."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Don\'t use it!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Execute the task.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>run</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the command.
     * @param command the command to exec
     * @return the exit value of the command
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>run</name><parameter_list>(<param><decl><type><name>String</name></type> <name>command</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>err</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt> <comment type="line">// assume the worst</comment>

        <comment type="line">// test if os match</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>myos</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Myos = " + <name>myos</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>(<name>os</name> != <name>null</name>) &amp;&amp; (<call><name><name>os</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>myos</name></expr></argument>)</argument_list></call> &lt; 0)</expr>)</condition><then> <block>{
            <comment type="line">// this command will be executed only on the specified OS</comment>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Not found in " + <name>os</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <comment type="line">// default directory to the project's base directory</comment>
        <if>if <condition>(<expr><name>dir</name> == <name>null</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>dir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>myos</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"windows"</expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>dir</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>myos</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"nt"</expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>command</name> = "cmd /c cd " + <name>dir</name> + " &amp;&amp; " + <name>command</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>ant</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_HOME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>ant</name> == <name>null</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Property '" + <name><name>MagicNames</name>.<name>ANT_HOME</name></name> + "' not "
                            + "found"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>

                    <decl_stmt><decl><type><name>String</name></type> <name>antRun</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>ant</name> + "/bin/antRun.bat"</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>command</name> = <name>antRun</name> + " " + <name>dir</name> + " " + <name>command</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>ant</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_HOME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ant</name> == <name>null</name></expr>)</condition><then> <block>{
              <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Property '" + <name><name>MagicNames</name>.<name>ANT_HOME</name></name> + "' not found"</expr></argument>,
                                       <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>String</name></type> <name>antRun</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>ant</name> + "/bin/antRun"</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>command</name> = <name>antRun</name> + " " + <name>dir</name> + " " + <name>command</name></expr>;</expr_stmt>
        }</block></else></if>

        <try>try <block>{
            <comment type="line">// show the command</comment>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// exec command on system runtime</comment>
            <decl_stmt><decl><type><name>Process</name></type> <name>proc</name> =<init> <expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>exec</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>out</name> != <name>null</name></expr>)</condition><then>  <block>{
                <expr_stmt><expr><name>fos</name> = new <call><name>PrintWriter</name><argument_list>(<argument><expr>new <call><name>FileWriter</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Output redirected to " + <name>out</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// copy input and error to the output stream</comment>
            <decl_stmt><decl><type><name>StreamPumper</name></type> <name>inputPumper</name> =<init>
                <expr>new <call><name>StreamPumper</name><argument_list>(<argument><expr><call><name><name>proc</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StreamPumper</name></type> <name>errorPumper</name> =<init>
                <expr>new <call><name>StreamPumper</name><argument_list>(<argument><expr><call><name><name>proc</name>.<name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// starts pumping away the generated output/error</comment>
            <expr_stmt><expr><call><name><name>inputPumper</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>errorPumper</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Wait for everything to finish</comment>
            <expr_stmt><expr><call><name><name>proc</name>.<name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>inputPumper</name>.<name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>errorPumper</name>.<name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>proc</name>.<name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// close the output file if required</comment>
            <expr_stmt><expr><call><name>logFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// check its exit value</comment>
            <expr_stmt><expr><name>err</name> = <call><name><name>proc</name>.<name>exitValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Exec returned: " + <name>err</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Result: " + <name>err</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error exec: " + <name>command</name></expr></argument>, <argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></param>) <block>{
            <comment type="line">//ignore</comment>
        }</block></catch></try>

        <return>return <expr><name>err</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the directory.
     * @param d a &lt;code&gt;String&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dir</name></name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the Operating System that this exec is to run in.
     * @param os a &lt;code&gt;String&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>os</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>os</name></name> = <name>os</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the command to exec.
     * @param command a &lt;code&gt;String&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>command</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>command</name></name> = <name>command</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the output filename.
     * @param out a &lt;code&gt;String&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the failOnError attribute.
     * Default is false.
     * @param fail a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailonerror</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>fail</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnError</name> = <name>fail</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Log an output message.
     * @param line the line to putput
     * @param messageLevel the level of logging - ignored
     *                     if output is going to a file
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>outputLog</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>messageLevel</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>fos</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>messageLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>fos</name>.<name>println</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Close output.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>logFlush</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>fos</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="line">// Inner class for continually pumping the input stream during</comment>
    <comment type="line">// Process's runtime.</comment>
    <class>class <name>StreamPumper</name> <super><extends>extends <name>Thread</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>BufferedReader</name></type> <name>din</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>messageLevel</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>endOfStream</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SLEEP_TIME</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>StreamPumper</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>int</name></type> <name>messageLevel</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>din</name></name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>messageLevel</name></name> = <name>messageLevel</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>pumpStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr>!<name>endOfStream</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr><call><name><name>din</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>line</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>outputLog</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>messageLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>endOfStream</name> = true</expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <try>try <block>{
                <try>try <block>{
                    <while>while <condition>(<expr>!<name>endOfStream</name></expr>)</condition> <block>{
                        <expr_stmt><expr><call><name>pumpStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name>SLEEP_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></while>
                }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{
                    <comment type="line">//ignore</comment>
                }</block></catch></try>
                <expr_stmt><expr><call><name><name>din</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <comment type="line">// ignore</comment>
            }</block></catch></try>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
