<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Exit.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ExitStatusException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Condition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>ConditionBase</name></name>;</import>

<comment type="javadoc">/**
 * Exits the active build, giving an additional message
 * if available.
 *
 * The &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;unless&lt;/code&gt; attributes make the
 * failure conditional -both probe for the named property being defined.
 * The &lt;code&gt;if&lt;/code&gt; tests for the property being defined, the
 * &lt;code&gt;unless&lt;/code&gt; for a property being undefined.
 *
 * If both attributes are set, then the test fails only if both tests
 * are true. i.e.
 * &lt;pre&gt;fail := defined(ifProperty) &amp;&amp; !defined(unlessProperty)&lt;/pre&gt;
 *
 * A single nested&lt;code&gt;&amp;lt;condition&amp;gt;&lt;/code&gt; element can be specified
 * instead of using &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;unless&lt;/code&gt; (a combined
 * effect can be achieved using &lt;code&gt;isset&lt;/code&gt; conditions).
 *
 * @since Ant 1.2
 *
 * @ant.task name="fail" category="control"
 */</comment>
<class><specifier>public</specifier> class <name>Exit</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>NestedCondition</name> <super><extends>extends <name>ConditionBase</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><call><name>countConditions</name><argument_list>()</argument_list></call> != 1</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"A single nested condition is required."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr>(<call>(<name>Condition</name>) <argument_list>(<argument><expr><call><name>getConditions</name><argument_list>()</argument_list></call>.<call><name>nextElement</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>).<call><name>eval</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>ifCondition</name>, <name>unlessCondition</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NestedCondition</name></type> <name>nestedCondition</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>status</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A message giving further information on why the build exited.
     *
     * @param value message to output
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>message</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Only fail if the given expression evaluates to true or the name
     * of an existing property.
     * @param c property name or evaluated expression
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>ifCondition</name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Only fail if the given expression evaluates to true or the name
     * of an existing property.
     * @param c property name or evaluated expression
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>String</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setIf</name><argument_list>(<argument><expr>(<name>Object</name>) <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Only fail if the given expression evaluates to false or tno
     * property of the given name exists.
     * @param c property name or evaluated expression
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>unlessCondition</name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Only fail if the given expression evaluates to false or tno
     * property of the given name exists.
     * @param c property name or evaluated expression
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>String</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setUnless</name><argument_list>(<argument><expr>(<name>Object</name>) <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the status code to associate with the thrown Exception.
     * @param i   the &lt;code&gt;int&lt;/code&gt; status
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStatus</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>status</name> = new <call><name>Integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Throw a &lt;code&gt;BuildException&lt;/code&gt; to exit (fail) the build.
     * If specified, evaluate conditions:
     * A single nested condition is accepted, but requires that the
     * &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;unless&lt;/code&gt; attributes be omitted.
     * If the nested condition evaluates to true, or the
     * ifCondition is true or unlessCondition is false, the build will exit.
     * The error message is constructed from the text fields, from
     * the nested condition (if specified), or finally from
     * the if and unless parameters (if present).
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>fail</name> =<init> <expr>(<call><name>nestedConditionPresent</name><argument_list>()</argument_list></call>) ? <call><name>testNestedCondition</name><argument_list>()</argument_list></call>
                     : (<call><name>testIfCondition</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>testUnlessCondition</name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fail</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>message</name> != <name>null</name> &amp;&amp; <call><name><name>message</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>text</name> = <call><name><name>message</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>ifCondition</name> != <name>null</name> &amp;&amp; !"".<call><name>equals</name><argument_list>(<argument><expr><name>ifCondition</name></expr></argument>)</argument_list></call>
                    &amp;&amp; <call><name>testIfCondition</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>text</name> = "if=" + <name>ifCondition</name></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>unlessCondition</name> != <name>null</name> &amp;&amp; !"".<call><name>equals</name><argument_list>(<argument><expr><name>unlessCondition</name></expr></argument>)</argument_list></call>
                    &amp;&amp; <call><name>testUnlessCondition</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>text</name> = ""</expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>text</name> += " and "</expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>text</name> += "unless=" + <name>unlessCondition</name></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><call><name>nestedConditionPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>text</name> = "condition satisfied"</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>text</name> = "No message"</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></else></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"failing due to " + <name>text</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>((<name>status</name> == <name>null</name>) ? new <call><name>BuildException</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call>
             : new <call><name>ExitStatusException</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name><name>status</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set a multiline message.
     * @param msg the message to display
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>message</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>message</name> = ""</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>message</name> += <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a condition element.
     * @return &lt;code&gt;ConditionBase&lt;/code&gt;.
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>ConditionBase</name></type> <name>createCondition</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>nestedCondition</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one nested condition is allowed."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>nestedCondition</name> = new <call><name>NestedCondition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>nestedCondition</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * test the if condition
     * @return true if there is no if condition, or the named property exists
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>testIfCondition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            .<call><name>testIfCondition</name><argument_list>(<argument><expr><name>ifCondition</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * test the unless condition
     * @return true if there is no unless condition,
     *  or there is a named property but it doesn't exist
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>testUnlessCondition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            .<call><name>testUnlessCondition</name><argument_list>(<argument><expr><name>unlessCondition</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * test the nested condition
     * @return true if there is none, or it evaluates to true
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>testNestedCondition</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr><call><name>nestedConditionPresent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>result</name> &amp;&amp; <name>ifCondition</name> != <name>null</name> || <name>unlessCondition</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Nested conditions "
                + "not permitted in conjunction with if/unless attributes"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <return>return <expr><name>result</name> &amp;&amp; <call><name><name>nestedCondition</name>.<name>eval</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * test whether there is a nested condition.
     * @return &lt;code&gt;boolean&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>nestedConditionPresent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>nestedCondition</name> != <name>null</name>)</expr>;</return>
    }</block></function>

}</block></class>
</unit>
