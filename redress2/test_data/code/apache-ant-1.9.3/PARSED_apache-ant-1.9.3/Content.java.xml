<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\comparators\Content.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>comparators</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ResourceUtils</name></name>;</import>

<comment type="javadoc">/**
 * Compares Resources by content.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Content</name> <super><extends>extends <name>ResourceComparator</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>binary</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set binary mode for this Content ResourceComparator. If this
     * attribute is set to false, Resource content will be compared
     * ignoring platform line-ending conventions.
     * Default is &lt;code&gt;true&lt;/code&gt;.
     * @param b whether to compare content in binary mode.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBinary</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>binary</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether this Content ResourceComparator is operating in binary mode.
     * @return boolean binary flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBinary</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>binary</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compare two Resources by content.
     * @param foo the first Resource.
     * @param bar the second Resource.
     * @return a negative integer, zero, or a positive integer as the first
     *         argument is less than, equal to, or greater than the second.
     * @throws BuildException if I/O errors occur.
     * @see org.apache.tools.ant.util.ResourceUtils#compareContent(Resource, Resource, boolean).
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>resourceCompare</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>foo</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>bar</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>ResourceUtils</name>.<name>compareContent</name></name><argument_list>(<argument><expr><name>foo</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, <argument><expr>!<name>binary</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

}</block></class>
</unit>
