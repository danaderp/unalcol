<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\zip\AsiExtraFieldTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.zip.AsiExtraField.
 *
 */</comment>
<class><specifier>public</specifier> class <name>AsiExtraFieldTest</name> <super><extends>extends <name>TestCase</name></extends> <implements>implements <name>UnixStat</name></implements></super> <block>{
    <constructor><specifier>public</specifier> <name>AsiExtraFieldTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Test file mode magic.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testModes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>AsiExtraField</name></type> <name>a</name> =<init> <expr>new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setMode</name></name><argument_list>(<argument><expr>0123</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"plain file"</expr></argument>, <argument><expr>0100123</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setDirectory</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"directory"</expr></argument>, <argument><expr>040123</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setLinkedFile</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"symbolic link"</expr></argument>, <argument><expr>0120123</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test content.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContent</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>AsiExtraField</name></type> <name>a</name> =<init> <expr>new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setMode</name></name><argument_list>(<argument><expr>0123</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setUserId</name></name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setGroupId</name></name><argument_list>(<argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>b</name> =<init> <expr><call><name><name>a</name>.<name>getLocalFileDataData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// CRC manually calculated, sorry</comment>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>expect</name> =<init> <expr><block>{<expr>(<name>byte</name>)0xC6</expr>, <expr>0x02</expr>, <expr>0x78</expr>, <expr>(<name>byte</name>)0xB6</expr>, <comment type="line">// CRC</comment>
                         <expr>0123</expr>, <expr>(<name>byte</name>)0x80</expr>,                   <comment type="line">// mode</comment>
                         <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,                         <comment type="line">// link length</comment>
                         <expr>5</expr>, <expr>0</expr>, <expr>6</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>                        <comment type="line">// uid, gid</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no link"</expr></argument>, <argument><expr><name><name>expect</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>b</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>expect</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no link, byte "+<name>i</name></expr></argument>, <argument><expr><name><name>expect</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>a</name>.<name>setLinkedFile</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expect</name> = new <name><name>byte</name><index>[]</index></name> <block>{<expr>0x75</expr>, <expr>(<name>byte</name>)0x8E</expr>, <expr>0x41</expr>, <expr>(<name>byte</name>)0xFD</expr>, <comment type="line">// CRC</comment>
                             <expr>0123</expr>, <expr>(<name>byte</name>)0xA0</expr>,                   <comment type="line">// mode</comment>
                             <expr>4</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,                         <comment type="line">// link length</comment>
                             <expr>5</expr>, <expr>0</expr>, <expr>6</expr>, <expr>0</expr>,                         <comment type="line">// uid, gid</comment>
                             <expr>(<name>byte</name>)'t'</expr>, <expr>(<name>byte</name>)'e'</expr>, <expr>(<name>byte</name>)'s'</expr>, <expr>(<name>byte</name>)'t'</expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> = <call><name><name>a</name>.<name>getLocalFileDataData</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no link"</expr></argument>, <argument><expr><name><name>expect</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>b</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>expect</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no link, byte "+<name>i</name></expr></argument>, <argument><expr><name><name>expect</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Test reparse
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReparse</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <comment type="line">// CRC manually calculated, sorry</comment>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data</name> =<init> <expr><block>{<expr>(<name>byte</name>)0xC6</expr>, <expr>0x02</expr>, <expr>0x78</expr>, <expr>(<name>byte</name>)0xB6</expr>, <comment type="line">// CRC</comment>
                       <expr>0123</expr>, <expr>(<name>byte</name>)0x80</expr>,                   <comment type="line">// mode</comment>
                       <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,                         <comment type="line">// link length</comment>
                       <expr>5</expr>, <expr>0</expr>, <expr>6</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>                        <comment type="line">// uid, gid</comment>
        <decl_stmt><decl><type><name>AsiExtraField</name></type> <name>a</name> =<init> <expr>new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>parseFromLocalFileData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"length plain file"</expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name></expr></argument>,
                     <argument><expr><call><name><name>a</name>.<name>getLocalFileDataLength</name></name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"plain file, no link"</expr></argument>, <argument><expr>!<call><name><name>a</name>.<name>isLink</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"plain file, no dir"</expr></argument>, <argument><expr>!<call><name><name>a</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"mode plain file"</expr></argument>, <argument><expr><name>FILE_FLAG</name> | 0123</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"uid plain file"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"gid plain file"</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getGroupId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>data</name> = new <name><name>byte</name><index>[]</index></name> <block>{<expr>0x75</expr>, <expr>(<name>byte</name>)0x8E</expr>, <expr>0x41</expr>, <expr>(<name>byte</name>)0xFD</expr>, <comment type="line">// CRC</comment>
                           <expr>0123</expr>, <expr>(<name>byte</name>)0xA0</expr>,                   <comment type="line">// mode</comment>
                           <expr>4</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,                         <comment type="line">// link length</comment>
                           <expr>5</expr>, <expr>0</expr>, <expr>6</expr>, <expr>0</expr>,                         <comment type="line">// uid, gid</comment>
                           <expr>(<name>byte</name>)'t'</expr>, <expr>(<name>byte</name>)'e'</expr>, <expr>(<name>byte</name>)'s'</expr>, <expr>(<name>byte</name>)'t'</expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> = new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>parseFromLocalFileData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"length link"</expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name></expr></argument>,
                     <argument><expr><call><name><name>a</name>.<name>getLocalFileDataLength</name></name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"link, is link"</expr></argument>, <argument><expr><call><name><name>a</name>.<name>isLink</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"link, no dir"</expr></argument>, <argument><expr>!<call><name><name>a</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"mode link"</expr></argument>, <argument><expr><name>LINK_FLAG</name> | 0123</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"uid link"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"gid link"</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getGroupId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getLinkedFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>data</name> = new <name><name>byte</name><index>[]</index></name> <block>{<expr>(<name>byte</name>)0x8E</expr>, <expr>0x01</expr>, <expr>(<name>byte</name>)0xBF</expr>, <expr>(<name>byte</name>)0x0E</expr>, <comment type="line">// CRC</comment>
                           <expr>0123</expr>, <expr>(<name>byte</name>)0x40</expr>,                         <comment type="line">// mode</comment>
                           <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,                               <comment type="line">// link</comment>
                           <expr>5</expr>, <expr>0</expr>, <expr>6</expr>, <expr>0</expr>}</block></expr>;</expr_stmt>                          <comment type="line">// uid, gid</comment>
        <expr_stmt><expr><name>a</name> = new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>parseFromLocalFileData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"length dir"</expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name></expr></argument>,
                     <argument><expr><call><name><name>a</name>.<name>getLocalFileDataLength</name></name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"dir, no link"</expr></argument>, <argument><expr>!<call><name><name>a</name>.<name>isLink</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"dir, is dir"</expr></argument>, <argument><expr><call><name><name>a</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"mode dir"</expr></argument>, <argument><expr><name>DIR_FLAG</name> | 0123</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"uid dir"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"gid dir"</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getGroupId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>data</name> = new <name><name>byte</name><index>[]</index></name> <block>{<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,                           <comment type="line">// bad CRC</comment>
                           <expr>0123</expr>, <expr>(<name>byte</name>)0x40</expr>,                     <comment type="line">// mode</comment>
                           <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,                           <comment type="line">// link</comment>
                           <expr>5</expr>, <expr>0</expr>, <expr>6</expr>, <expr>0</expr>}</block></expr>;</expr_stmt>                          <comment type="line">// uid, gid</comment>
        <expr_stmt><expr><name>a</name> = new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>a</name>.<name>parseFromLocalFileData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"should raise bad CRC exception"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bad CRC checksum 0 instead of ebf018e"</expr></argument>,
                         <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testClone</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>AsiExtraField</name></type> <name>s1</name> =<init> <expr>new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s1</name>.<name>setUserId</name></name><argument_list>(<argument><expr>42</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s1</name>.<name>setGroupId</name></name><argument_list>(<argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s1</name>.<name>setLinkedFile</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s1</name>.<name>setMode</name></name><argument_list>(<argument><expr>0644</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s1</name>.<name>setDirectory</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AsiExtraField</name></type> <name>s2</name> =<init> <expr>(<name>AsiExtraField</name>) <call><name><name>s1</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotSame</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>s1</name>.<name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s2</name>.<name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>s1</name>.<name>getGroupId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s2</name>.<name>getGroupId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>s1</name>.<name>getLinkedFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s2</name>.<name>getLinkedFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>s1</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s2</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>s1</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s2</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
