<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\XMLCatalogBuildFileTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 * BuildFileTest testcases for org.apache.tools.ant.types.XMLCatalog
 *
 * @see org.apache.tools.ant.types.XMLCatalogTest
 *
 */</comment>
<class><specifier>public</specifier> class <name>XMLCatalogBuildFileTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>XMLCatalogBuildFileTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <comment type="line">//</comment>
    <comment type="line">// Ensure that an external entity resolves as expected with NO</comment>
    <comment type="line">// XMLCatalog involvement:</comment>
    <comment type="line">//</comment>
    <comment type="line">// Transform an XML file that refers to the entity into a text</comment>
    <comment type="line">// file, stuff result into property: val1</comment>
    <comment type="line">//</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEntityNoCatalog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/types/xmlcatalog.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"testentitynocatalog"</expr></argument>, <argument><expr>"val1"</expr></argument>,
                          <argument><expr>"A stitch in time saves nine"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//</comment>
    <comment type="line">// Ensure that an external entity resolves as expected Using an</comment>
    <comment type="line">// XMLCatalog:</comment>
    <comment type="line">//</comment>
    <comment type="line">// Transform an XML file that refers to the entity into a text</comment>
    <comment type="line">// file, entity is listed in the XMLCatalog pointing to a</comment>
    <comment type="line">// different file.  Stuff result into property: val2</comment>
    <comment type="line">//</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEntityWithCatalog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/types/xmlcatalog.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"testentitywithcatalog"</expr></argument>, <argument><expr>"val2"</expr></argument>,
                          <argument><expr>"No news is good news"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//</comment>
    <comment type="line">// Ensure that an external entity resolves as expected with NO</comment>
    <comment type="line">// XMLCatalog involvement:</comment>
    <comment type="line">//</comment>
    <comment type="line">// Transform an XML file that contains a reference to a _second_ XML file</comment>
    <comment type="line">// via the document() function.  The _second_ XML file refers to an entity.</comment>
    <comment type="line">// Stuff result into the property: val3</comment>
    <comment type="line">//</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDocumentNoCatalog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/types/xmlcatalog.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"testdocumentnocatalog"</expr></argument>, <argument><expr>"val3"</expr></argument>,
                          <argument><expr>"A stitch in time saves nine"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//</comment>
    <comment type="line">// Ensure that an external entity resolves as expected Using an</comment>
    <comment type="line">// XMLCatalog:</comment>
    <comment type="line">//</comment>
    <comment type="line">// Transform an XML file that contains a reference to a _second_ XML file</comment>
    <comment type="line">// via the document() function.  The _second_ XML file refers to an entity.</comment>
    <comment type="line">// The entity is listed in the XMLCatalog pointing to a different file.</comment>
    <comment type="line">// Stuff result into the property: val4</comment>
    <comment type="line">//</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDocumentWithCatalog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/types/xmlcatalog.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"testdocumentwithcatalog"</expr></argument>, <argument><expr>"val4"</expr></argument>,
                          <argument><expr>"No news is good news"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
