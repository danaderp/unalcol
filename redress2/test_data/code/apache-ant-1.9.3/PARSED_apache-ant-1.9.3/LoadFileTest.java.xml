<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\LoadFileTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 * Test the load file task
 *
 * @created 10 December 2001
 */</comment>
<class><specifier>public</specifier> class <name>LoadFileTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Constructor for the LoadFileTest object
     *
     * @param name Description of Parameter
     */</comment>
    <constructor><specifier>public</specifier> <name>LoadFileTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * The JUnit setup method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/loadfile.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * The teardown method for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoSourcefileDefined</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testNoSourcefileDefined"</expr></argument>,
                <argument><expr>"source file not defined"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoPropertyDefined</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testNoPropertyDefined"</expr></argument>,
                <argument><expr>"output property not defined"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoSourcefilefound</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testNoSourcefilefound"</expr></argument>,
                <argument><expr>"File not found"</expr></argument>, <argument><expr>" doesn't exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFailOnError</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"testFailOnError"</expr></argument>,<argument><expr>"testFailOnError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLoadAFile</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testLoadAFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"testLoadAFile"</expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"eh?"</expr></argument>)</argument_list></call>&lt;0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"property is not all in the file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLoadAFileEnc</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testLoadAFileEnc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"testLoadAFileEnc"</expr></argument>)</argument_list></call>==<name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"file load failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEvalProps</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testEvalProps"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"testEvalProps"</expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"rain"</expr></argument>)</argument_list></call>&lt;0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"property eval broken"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Test FilterChain and FilterReaders
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterChain</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilterChain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"testFilterChain"</expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"World!"</expr></argument>)</argument_list></call>&lt;0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Filter Chain broken"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Test StripJavaComments filterreader functionality.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testStripJavaComments</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testStripJavaComments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"expected"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>generated</name> =<init> <expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"testStripJavaComments"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>generated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOneLine</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"testOneLine"</expr></argument>,<argument><expr>"testOneLine"</expr></argument>,<argument><expr>"1,2,3,4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
}</block></class>
</unit>
