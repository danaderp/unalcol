<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\Os.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Condition that tests the OS type.
 *
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> class <name>Os</name> <super><implements>implements <name>Condition</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OS_NAME</name> =<init>
        <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OS_ARCH</name> =<init>
        <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.arch"</expr></argument>)</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OS_VERSION</name> =<init>
        <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.version"</expr></argument>)</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PATH_SEP</name> =<init>
        <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"path.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * OS family to look for
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>family</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Name of OS
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * version of OS
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>version</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS architecture
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>arch</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_WINDOWS</name> =<init> <expr>"windows"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_9X</name> =<init> <expr>"win9x"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_NT</name> =<init> <expr>"winnt"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_OS2</name> =<init> <expr>"os/2"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_NETWARE</name> =<init> <expr>"netware"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_DOS</name> =<init> <expr>"dos"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_MAC</name> =<init> <expr>"mac"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_TANDEM</name> =<init> <expr>"tandem"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_UNIX</name> =<init> <expr>"unix"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_VMS</name> =<init> <expr>"openvms"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * OS family that can be tested for. {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_ZOS</name> =<init> <expr>"z/os"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** OS family that can be tested for. {@value} */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAMILY_OS400</name> =<init> <expr>"os/400"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * OpenJDK is reported to call MacOS X "Darwin"
     * @see https://issues.apache.org/bugzilla/show_bug.cgi?id=44889
     * @see https://issues.apache.org/jira/browse/HADOOP-3318
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DARWIN</name> =<init> <expr>"darwin"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor
     *
     */</comment>
    <constructor><specifier>public</specifier> <name>Os</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//default</comment>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor that sets the family attribute
     * @param family a String value
     */</comment>
    <constructor><specifier>public</specifier> <name>Os</name><parameter_list>(<param><decl><type><name>String</name></type> <name>family</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setFamily</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets the desired OS family type
     *
     * @param f      The OS family type desired&lt;br /&gt;
     *               Possible values:&lt;br /&gt;
     *               &lt;ul&gt;
     *               &lt;li&gt;dos&lt;/li&gt;
     *               &lt;li&gt;mac&lt;/li&gt;
     *               &lt;li&gt;netware&lt;/li&gt;
     *               &lt;li&gt;os/2&lt;/li&gt;
     *               &lt;li&gt;tandem&lt;/li&gt;
     *               &lt;li&gt;unix&lt;/li&gt;
     *               &lt;li&gt;windows&lt;/li&gt;
     *               &lt;li&gt;win9x&lt;/li&gt;
     *               &lt;li&gt;z/os&lt;/li&gt;
     *               &lt;li&gt;os/400&lt;/li&gt;
     *               &lt;/ul&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFamily</name><parameter_list>(<param><decl><type><name>String</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>family</name> = <call><name><name>f</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the desired OS name
     *
     * @param name   The OS name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <call><name><name>name</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the desired OS architecture
     *
     * @param arch   The OS architecture
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArch</name><parameter_list>(<param><decl><type><name>String</name></type> <name>arch</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>arch</name></name> = <call><name><name>arch</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the desired OS version
     *
     * @param version   The OS version
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVersion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>version</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>version</name></name> = <call><name><name>version</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the OS on which Ant is executing matches the type of
     * that set in setFamily.
     * @return true if the os matches.
     * @throws BuildException if there is an error.
     * @see Os#setFamily(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>isOs</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the OS on which Ant is executing matches the
     * given OS family.
     * @param family the family to check for
     * @return true if the OS matches
     * @since 1.5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isFamily</name><parameter_list>(<param><decl><type><name>String</name></type> <name>family</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>isOs</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the OS on which Ant is executing matches the
     * given OS name.
     *
     * @param name the OS name to check for
     * @return true if the OS matches
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>isOs</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the OS on which Ant is executing matches the
     * given OS architecture.
     *
     * @param arch the OS architecture to check for
     * @return true if the OS matches
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isArch</name><parameter_list>(<param><decl><type><name>String</name></type> <name>arch</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>isOs</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the OS on which Ant is executing matches the
     * given OS version.
     *
     * @param version the OS version to check for
     * @return true if the OS matches
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isVersion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>version</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>isOs</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the OS on which Ant is executing matches the
     * given OS family, name, architecture and version
     *
     * @param family   The OS family
     * @param name   The OS name
     * @param arch   The OS architecture
     * @param version   The OS version
     * @return true if the OS matches
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isOs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>family</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>arch</name></decl></param>,
                               <param><decl><type><name>String</name></type> <name>version</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>retValue</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>family</name> != <name>null</name> || <name>name</name> != <name>null</name> || <name>arch</name> != <name>null</name>
            || <name>version</name> != <name>null</name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>boolean</name></type> <name>isFamily</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isName</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isArch</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isVersion</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>family</name> != <name>null</name></expr>)</condition><then> <block>{

                <comment type="line">//windows probing logic relies on the word 'windows' in</comment>
                <comment type="line">//the OS</comment>
                <decl_stmt><decl><type><name>boolean</name></type> <name>isWindows</name> =<init> <expr><call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>FAMILY_WINDOWS</name></expr></argument>)</argument_list></call> &gt; -1</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>is9x</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>isNT</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>isWindows</name></expr>)</condition><then> <block>{
                    <comment type="line">//there are only four 9x platforms that we look for</comment>
                    <expr_stmt><expr><name>is9x</name> = (<call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"95"</expr></argument>)</argument_list></call> &gt;= 0
                            || <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"98"</expr></argument>)</argument_list></call> &gt;= 0
                            || <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"me"</expr></argument>)</argument_list></call> &gt;= 0
                            <comment type="line">//wince isn't really 9x, but crippled enough to</comment>
                            <comment type="line">//be a muchness. Ant doesnt run on CE, anyway.</comment>
                            || <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"ce"</expr></argument>)</argument_list></call> &gt;= 0)</expr>;</expr_stmt>
                    <expr_stmt><expr><name>isNT</name> = !<name>is9x</name></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_WINDOWS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <name>isWindows</name></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_9X</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <name>isWindows</name> &amp;&amp; <name>is9x</name></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_NT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <name>isWindows</name> &amp;&amp; <name>isNT</name></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_OS2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>FAMILY_OS2</name></expr></argument>)</argument_list></call> &gt; -1</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_NETWARE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>FAMILY_NETWARE</name></expr></argument>)</argument_list></call> &gt; -1</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_DOS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <call><name><name>PATH_SEP</name>.<name>equals</name></name><argument_list>(<argument><expr>";"</expr></argument>)</argument_list></call> &amp;&amp; !<call><name>isFamily</name><argument_list>(<argument><expr><name>FAMILY_NETWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_MAC</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>FAMILY_MAC</name></expr></argument>)</argument_list></call> &gt; -1
                        || <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call> &gt; -1</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_TANDEM</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"nonstop_kernel"</expr></argument>)</argument_list></call> &gt; -1</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_UNIX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <call><name><name>PATH_SEP</name>.<name>equals</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call>
                        &amp;&amp; !<call><name>isFamily</name><argument_list>(<argument><expr><name>FAMILY_VMS</name></expr></argument>)</argument_list></call>
                        &amp;&amp; (!<call><name>isFamily</name><argument_list>(<argument><expr><name>FAMILY_MAC</name></expr></argument>)</argument_list></call> || <call><name><name>OS_NAME</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"x"</expr></argument>)</argument_list></call>
                            || <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call> &gt; -1)</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_ZOS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>FAMILY_ZOS</name></expr></argument>)</argument_list></call> &gt; -1
                        || <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"os/390"</expr></argument>)</argument_list></call> &gt; -1</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_OS400</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>FAMILY_OS400</name></expr></argument>)</argument_list></call> &gt; -1</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>family</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FAMILY_VMS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>isFamily</name> = <call><name><name>OS_NAME</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>FAMILY_VMS</name></expr></argument>)</argument_list></call> &gt; -1</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                        <argument><expr>"Don\'t know how to detect os family \""
                        + <name>family</name> + "\""</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>name</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>isName</name> = <call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name>OS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>arch</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>isArch</name> = <call><name><name>arch</name>.<name>equals</name></name><argument_list>(<argument><expr><name>OS_ARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>version</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>isVersion</name> = <call><name><name>version</name>.<name>equals</name></name><argument_list>(<argument><expr><name>OS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>retValue</name> = <name>isFamily</name> &amp;&amp; <name>isName</name> &amp;&amp; <name>isArch</name> &amp;&amp; <name>isVersion</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>retValue</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
