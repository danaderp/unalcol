<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\ConditionBase.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Available</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Checksum</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>UpToDate</name></name>;</import>

<comment type="javadoc">/**
 * Baseclass for the &amp;lt;condition&amp;gt; task as well as several
 * conditions - ensures that the types of conditions inside the task
 * and the "container" conditions are in sync.
 *
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ConditionBase</name> <super><extends>extends <name>ProjectComponent</name></extends></super> <block>{

    <comment type="javadoc">/**
     * name of the component
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>taskName</name> =<init> <expr>"condition"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>conditions</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Simple constructor.
     */</comment>
    <constructor><specifier>protected</specifier> <name>ConditionBase</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>taskName</name> = "component"</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor that takes the name of the task in the task name.
     * @param taskName the name of the task.
     * @since Ant 1.7
     */</comment>
    <constructor><specifier>protected</specifier> <name>ConditionBase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>taskName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>taskName</name></name> = <name>taskName</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Count the conditions.
     *
     * @return the number of conditions in the container
     * @since 1.1
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>countConditions</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>conditions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Iterate through all conditions.
     *
     * @return an enumeration to use for iteration
     * @since 1.1
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>Enumeration</name></type> <name>getConditions</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>conditions</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name to use in logging messages.
     *
     * @param name The name to use in logging messages.
     *             Should not be &lt;code&gt;null&lt;/code&gt;.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTaskName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>taskName</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the name to use in logging messages.
     *
     * @return the name to use in logging messages.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTaskName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>taskName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;available&amp;gt; condition.
     * @param a an available condition
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAvailable</name><parameter_list>(<param><decl><type><name>Available</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;checksum&amp;gt; condition.
     *
     * @param c a Checksum condition
     * @since 1.4, Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addChecksum</name><parameter_list>(<param><decl><type><name>Checksum</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;uptodate&amp;gt; condition.
     *
     * @param u an UpToDate condition
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addUptodate</name><parameter_list>(<param><decl><type><name>UpToDate</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;not&amp;gt; condition "container".
     *
     * @param n a Not condition
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNot</name><parameter_list>(<param><decl><type><name>Not</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;and&amp;gt; condition "container".
     *
     * @param a an And condition
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAnd</name><parameter_list>(<param><decl><type><name>And</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;or&amp;gt; condition "container".
     *
     * @param o an Or condition
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addOr</name><parameter_list>(<param><decl><type><name>Or</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;equals&amp;gt; condition.
     *
     * @param e an Equals condition
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addEquals</name><parameter_list>(<param><decl><type><name>Equals</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;os&amp;gt; condition.
     *
     * @param o an Os condition
     * @since 1.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addOs</name><parameter_list>(<param><decl><type><name>Os</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;isset&amp;gt; condition.
     *
     * @param i an IsSet condition
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addIsSet</name><parameter_list>(<param><decl><type><name>IsSet</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;http&amp;gt; condition.
     *
     * @param h an Http condition
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addHttp</name><parameter_list>(<param><decl><type><name>Http</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &amp;lt;socket&amp;gt; condition.
     *
     * @param s a Socket condition
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSocket</name><parameter_list>(<param><decl><type><name>Socket</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &amp;lt;filesmatch&amp;gt; condition.
     *
     * @param test a FilesMatch condition
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilesMatch</name><parameter_list>(<param><decl><type><name>FilesMatch</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &amp;lt;contains&amp;gt; condition.
     *
     * @param test a Contains condition
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addContains</name><parameter_list>(<param><decl><type><name>Contains</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &amp;lt;istrue&amp;gt; condition.
     *
     * @param test an IsTrue condition
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addIsTrue</name><parameter_list>(<param><decl><type><name>IsTrue</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &amp;lt;isfalse&amp;gt; condition.
     *
     * @param test an IsFalse condition
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addIsFalse</name><parameter_list>(<param><decl><type><name>IsFalse</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;isreference&amp;gt; condition.
     *
     * @param i an IsReference condition
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addIsReference</name><parameter_list>(<param><decl><type><name>IsReference</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an &amp;lt;isfileselected&amp;gt; condition.
     * @param test the condition
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addIsFileSelected</name><parameter_list>(<param><decl><type><name>IsFileSelected</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an arbitrary condition
     * @param c a condition
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Condition</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>conditions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
