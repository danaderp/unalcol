<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\GlobPatternMapper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Implementation of FileNameMapper that does simple wildcard pattern
 * replacements.
 *
 * &lt;p&gt;This does simple translations like *.foo -&gt; *.bar where the
 * prefix to .foo will be left unchanged. It only handles a single *
 * character, use regular expressions for more complicated
 * situations.&lt;/p&gt;
 *
 * &lt;p&gt;This is one of the more useful Mappers, it is used by javac for
 * example.&lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>GlobPatternMapper</name> <super><implements>implements <name>FileNameMapper</name></implements></super> <block>{

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <comment type="javadoc">/**
     * Part of &amp;quot;from&amp;quot; pattern before the *.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>fromPrefix</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Part of &amp;quot;from&amp;quot; pattern after the *.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>fromPostfix</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Length of the prefix (&amp;quot;from&amp;quot; pattern).
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>prefixLength</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Length of the postfix (&amp;quot;from&amp;quot; pattern).
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>postfixLength</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Part of &amp;quot;to&amp;quot; pattern before the *.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>toPrefix</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Part of &amp;quot;to&amp;quot; pattern after the *.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>toPostfix</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fromContainsStar</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>toContainsStar</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>handleDirSep</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>caseSensitive</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Attribute specifying whether to ignore the difference
     * between / and \ (the two common directory characters).
     * @param handleDirSep a boolean, default is false.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHandleDirSep</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>handleDirSep</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>handleDirSep</name></name> = <name>handleDirSep</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Attribute specifying whether to ignore the difference
     * between / and \ (the two common directory characters).
     * @since Ant 1.8.3
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getHandleDirSep</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>handleDirSep</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Attribute specifying whether to ignore the case difference
     * in the names.
     *
     * @param caseSensitive a boolean, default is false.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCaseSensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>caseSensitive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>caseSensitive</name></name> = <name>caseSensitive</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the &amp;quot;from&amp;quot; pattern. Required.
     * @param from a string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>from</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>from</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>from</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>index</name> == -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fromPrefix</name> = <name>from</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>fromPostfix</name> = ""</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>fromPrefix</name> = <call><name><name>from</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fromPostfix</name> = <call><name><name>from</name>.<name>substring</name></name><argument_list>(<argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fromContainsStar</name> = true</expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>prefixLength</name> = <call><name><name>fromPrefix</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>postfixLength</name> = <call><name><name>fromPostfix</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"this mapper requires a 'from' attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the &amp;quot;to&amp;quot; pattern. Required.
     * @param to a string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>to</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>to</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>index</name> == -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>toPrefix</name> = <name>to</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>toPostfix</name> = ""</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>toPrefix</name> = <call><name><name>to</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>toPostfix</name> = <call><name><name>to</name>.<name>substring</name></name><argument_list>(<argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>toContainsStar</name> = true</expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"this mapper requires a 'to' attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns null if the source file name doesn't match the
     * &amp;quot;from&amp;quot; pattern, an one-element array containing the
     * translated file otherwise.
     * @param sourceFileName the filename to map
     * @return a list of converted filenames
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>mapFileName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sourceFileName</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>modName</name> =<init> <expr><call><name>modifyName</name><argument_list>(<argument><expr><name>sourceFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fromPrefix</name> == <name>null</name>
            || (<call><name><name>sourceFileName</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt; (<name>prefixLength</name> + <name>postfixLength</name>))
            || (!<name>fromContainsStar</name>
                &amp;&amp; !<call><name><name>modName</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name>modifyName</name><argument_list>(<argument><expr><name>fromPrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                )
            || (<name>fromContainsStar</name>
                &amp;&amp; (!<call><name><name>modName</name>.<name>startsWith</name></name><argument_list>(<argument><expr><call><name>modifyName</name><argument_list>(<argument><expr><name>fromPrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    || !<call><name><name>modName</name>.<name>endsWith</name></name><argument_list>(<argument><expr><call><name>modifyName</name><argument_list>(<argument><expr><name>fromPostfix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)
                )</expr>
            )</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>toPrefix</name>
                             + (<name>toContainsStar</name>
                                ? <call><name>extractVariablePart</name><argument_list>(<argument><expr><name>sourceFileName</name></expr></argument>)</argument_list></call>
                                  + <name>toPostfix</name>
                                : "")</expr>}</block></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the part of the given string that matches the * in the
     * &amp;quot;from&amp;quot; pattern.
     * @param name the source file name
     * @return the variable part of the name
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>extractVariablePart</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr><name>prefixLength</name></expr></argument>,
                              <argument><expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> - <name>postfixLength</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * modify string based on dir char mapping and case sensitivity
     * @param name the name to convert
     * @return the converted name
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>modifyName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>caseSensitive</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>name</name> = <call><name><name>name</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>handleDirSep</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>name</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'\\'</expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>name</name> = <call><name><name>name</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
