package edu.wayne.cs.severe.redress2.parser;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import edu.wayne.cs.severe.redress2.entity.CompilationUnit;
import edu.wayne.cs.severe.redress2.entity.ProgLang;
import edu.wayne.cs.severe.redress2.utils.GeneralConstants;

/**
 * Class that parses the source code files of a system using srcML
 * 
 * @author ojcchar
 * @version 1.0
 * @created 23-Mar-2014 12:28:47
 */
public class CodeParser {

	// constants
	private static final String XML_EXT = ".xml";
	private static final String PREFIX_XML_FOLDER = "PARSED_";

	// parameters of the system to parse
	private String sysName;
	private ProgLang lang;

	// folder of the XML generated by srcML
	private File xmlFolder;
	private boolean parseSrcML;

	// logger
	private static Logger LOGGER = LoggerFactory.getLogger(CodeParser.class);

	/**
	 * Default constructor
	 * 
	 * @param sysName
	 *            name of the target system
	 * @param lang
	 *            programming language
	 * @param parseSrcML
	 */
	public CodeParser(String sysName, ProgLang lang, boolean parseSrcML) {
		this.sysName = sysName;
		this.lang = lang;
		this.parseSrcML = parseSrcML;
	}

	/**
	 * Parse the source code files in the folder path provided
	 * 
	 * @param foldPath
	 *            the source folder
	 * @return the list of compilation units parsed in the folder
	 * @throws IOException
	 */
	public List<CompilationUnit> parseCodeInFolder(File foldPath)
			throws IOException {

		// create the folder where the srcML files are stored
		xmlFolder = new File(foldPath + File.separator + PREFIX_XML_FOLDER
				+ sysName);

		List<CompilationUnit> compUnits = null;
		if (parseSrcML) {
			compUnits = parseFolder(foldPath);
		} else {
			compUnits = readXmlFolder();
		}
		return compUnits;
	}

	private List<CompilationUnit> readXmlFolder() throws IOException {

		LOGGER.debug("Reading XML files");

		if (!xmlFolder.exists()) {
			throw new IOException("Folder " + xmlFolder.getAbsolutePath()
					+ " does not exist");
		}

		// list of files
		List<CompilationUnit> compUnits = new ArrayList<CompilationUnit>();

		// children files of the folder
		File[] listFiles = xmlFolder.listFiles();
		// iterate the list
		for (File file : listFiles) {

			// if it is a file, check its extension and add it to the list
			if (file.isFile()) {
				if (file.getAbsolutePath().endsWith(XML_EXT)) {
					compUnits.add(new CompilationUnit(file));
				}
			}
		}

		return compUnits;

	}

	private List<CompilationUnit> parseFolder(File foldPath) throws IOException {

		LOGGER.debug("Generating XML files");

		if (xmlFolder.exists()) {
			FileUtils.deleteDirectory(xmlFolder);
		}
		boolean mkdir = xmlFolder.mkdir();
		if (!mkdir) {
			throw new IOException("Folder " + xmlFolder.getAbsolutePath()
					+ " not created");
		}
		// get all the source code files
		List<File> sourceFiles = getSourceFiles(foldPath);
		// parse the files
		List<CompilationUnit> parseFiles = parseFiles(sourceFiles);

		return parseFiles;
	}

	/**
	 * Parse all the files using srcML and return the list of compilation units
	 * 
	 * @param sourceFiles
	 *            the source code files
	 * @return the list of compilation units
	 */
	private List<CompilationUnit> parseFiles(List<File> sourceFiles) {

		// declarations
		Runtime rt = Runtime.getRuntime();
		List<CompilationUnit> compUnits = new ArrayList<CompilationUnit>();

		// for each file
		for (File srcFile : sourceFiles) {
			try {

				// the compilation unit file
				File xmlFile = getValidXmlFile(srcFile);

				// srcML command
				String command = "srcML/src2srcml.exe --language="
						+ getSrcMLLang() + " \"" + srcFile.getAbsolutePath()
						+ "\" -o \"" + xmlFile.getAbsolutePath() + "\"";

				// LOGGER.debug(command);

				// execute the command
				Process pr = rt.exec(command);
				int exitValue = pr.waitFor();

				// create the compilation unit if the command was executed
				// successfully
				if (exitValue == 0) {
					CompilationUnit compUnit = new CompilationUnit(xmlFile);
					compUnits.add(compUnit);
				} else {
					throw new RuntimeException(
							"The srcML command did not successfully terminate, exit value: "
									+ exitValue + ", command: " + command);
				}
			} catch (Exception e) {
				LOGGER.error(e.getMessage(), e);
			}
		}

		return compUnits;
	}

	private HashMap<String, Integer> indxRptds = new HashMap<String, Integer>();

	private File getValidXmlFile(File srcFile) {
		String pathname = xmlFolder + File.separator + srcFile.getName()
				+ XML_EXT;
		File file = new File(pathname);
		if (file.exists()) {
			Integer idx = indxRptds.get(pathname);
			if (idx == null) {
				idx = 0;
			}
			indxRptds.put(pathname, idx + 1);

			pathname = xmlFolder + File.separator + srcFile.getName() + idx
					+ XML_EXT;
			file = new File(pathname);
		}

		return file;
	}

	/**
	 * Get the language argument of the srcML program
	 * 
	 * @return the srcML language argument
	 */
	private String getSrcMLLang() {
		String langStr = "Java";
		if (ProgLang.CS == lang) {
			langStr = "C#";
		}
		return langStr;
	}

	/**
	 * Get all the source code files in the folder, recursively
	 * 
	 * @param foldPath
	 *            the source folder
	 * @return the list of source code files
	 */
	private List<File> getSourceFiles(File foldPath) {

		// list of files
		List<File> sourceFiles = new ArrayList<File>();

		// children files of the folder
		File[] listFiles = foldPath.listFiles();
		// iterate the list
		for (File file : listFiles) {

			// if it is a file, check its extension and add it to the list
			if (file.isFile()) {
				if (ProgLang.JAVA == lang
						&& file.getAbsolutePath().endsWith(
								GeneralConstants.JAVA_EXT)) {
					sourceFiles.add(file);
				} else if (ProgLang.CS == lang
						&& file.getAbsolutePath().endsWith(
								GeneralConstants.CS_EXT)) {
					sourceFiles.add(file);
				}
			} else {
				// it is a folder, recursively get the list of files of the
				// folder
				sourceFiles.addAll(getSourceFiles(file));
			}
		}

		return sourceFiles;
	}

	public File getXmlFolder() {
		return xmlFolder;
	}

}// end CodeParser