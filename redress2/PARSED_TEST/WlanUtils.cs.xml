<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="D:\thesisCode\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouter.Wlan\WlanUtils.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>ComponentModel</name></name>;</using>
<using>using <name><name>System</name>.<name>Diagnostics</name></name>;</using>
<using>using <name><name>System</name>.<name>Text</name></name>;</using>
<using>using <name><name>VirtualRouter</name>.<name>Wlan</name>.<name>WinAPI</name></name>;</using>

<namespace>namespace <name><name>VirtualRouter</name>.<name>Wlan</name></name>
<block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WlanUtils</name>
    <block>{
        <function><type><attribute>[<expr><name>DebuggerStepThrough</name></expr>]</attribute>
        <specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Throw_On_Win32_Error</name><parameter_list>(<param><decl><type><name>uint</name></type> <name>retCode</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>retCode</name> != 0</expr>)</condition><then> <comment type="line">// 0 = ERROR_SUCCESS</comment>
            <block>{
                <throw>throw <expr>new <call><name>Win32Exception</name><argument_list>(<argument><expr>(<name>int</name>)<name>retCode</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>ConvertToString</name><parameter_list>(<param><decl><type><name>this</name> <name>DOT11_MAC_ADDRESS</name></type> <name>mac</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name><name>mac</name>.<name>one</name>.<name>ConvertToHexString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name><name>mac</name>.<name>two</name>.<name>ConvertToHexString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name><name>mac</name>.<name>three</name>.<name>ConvertToHexString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name><name>mac</name>.<name>four</name>.<name>ConvertToHexString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name><name>mac</name>.<name>five</name>.<name>ConvertToHexString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name><name>mac</name>.<name>six</name>.<name>ConvertToHexString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name><name>sb</name>.<name>ToString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>ConvertToString</name><parameter_list>(<param><decl><type><name>this</name> <name>DOT11_SSID</name></type> <name>ssid</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name><name>ssid</name>.<name>ucSSID</name></name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>ConvertToHexString</name><parameter_list>(<param><decl><type><name>this</name> <name>byte</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>Convert</name>.<name>ToString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0x10</expr></argument>)</argument_list></call>.<call><name>PadLeft</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>'0'</expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DOT11_SSID</name></type> <name>ConvertStringToDOT11_SSID</name><parameter_list>(<param><decl><type><name>string</name></type> <name>ssid</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>DOT11_SSID</name><argument_list>()</argument_list></call>
            <block>{
                 <expr><name>ucSSID</name> = <name>ssid</name></expr>,
                <expr><name>uSSIDLength</name> = <name><name>ssid</name>.<name>Length</name></name></expr>
            }</block></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
