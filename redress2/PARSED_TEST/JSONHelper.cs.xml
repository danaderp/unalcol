<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterClient\JSONHelper.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<comment type="block">/*
This code was originally posted here: 
http://pietschsoft.com/post/2008/02/NET-35-JSON-Serialization-using-the-DataContractJsonSerializer.aspx
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>IO</name></name>;</using>
<using>using <name><name>System</name>.<name>Text</name></name>;</using>

<namespace>namespace <name>VirtualRouterClient</name>
<block>{
    <class><specifier>public</specifier> class <name>JSONHelper</name>
    <block>{
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name><name>Serialize</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><parameter_list>(<param><decl><type><name>T</name></type> <name>obj</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name><name>System</name>.<name>Runtime</name>.<name>Serialization</name>.<name>Json</name>.<name>DataContractJsonSerializer</name></name></type> <name>serializer</name> =<init> <expr>new <call><name><name>System</name>.<name>Runtime</name>.<name>Serialization</name>.<name>Json</name>.<name>DataContractJsonSerializer</name></name><argument_list>(<argument><expr><call><name><name>obj</name>.<name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>MemoryStream</name></type> <name>ms</name> =<init> <expr>new <call><name>MemoryStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>serializer</name>.<name>WriteObject</name></name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>string</name></type> <name>retVal</name> =<init> <expr><call><name><name>Encoding</name>.<name>Default</name>.<name>GetString</name></name><argument_list>(<argument><expr><call><name><name>ms</name>.<name>ToArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>retVal</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>T</name></type> <name><name>Deserialize</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><parameter_list>(<param><decl><type><name>string</name></type> <name>json</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>T</name></type> <name>obj</name> =<init> <expr><call><name><name>Activator</name>.<name><name>CreateInstance</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>MemoryStream</name></type> <name>ms</name> =<init> <expr>new <call><name>MemoryStream</name><argument_list>(<argument><expr><call><name><name>Encoding</name>.<name>Unicode</name>.<name>GetBytes</name></name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>System</name>.<name>Runtime</name>.<name>Serialization</name>.<name>Json</name>.<name>DataContractJsonSerializer</name></name></type> <name>serializer</name> =<init> <expr>new <call><name><name>System</name>.<name>Runtime</name>.<name>Serialization</name>.<name>Json</name>.<name>DataContractJsonSerializer</name></name><argument_list>(<argument><expr><call><name><name>obj</name>.<name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>obj</name> = (<name>T</name>)<call><name><name>serializer</name>.<name>ReadObject</name></name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ms</name>.<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>obj</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
