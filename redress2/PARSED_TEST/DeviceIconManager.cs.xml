<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="D:\thesisCode\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterClient\DeviceIcon\DeviceIconManager.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name><name>System</name>.<name>Collections</name>.<name>Generic</name></name>;</using>
<using>using <name><name>System</name>.<name>Linq</name></name>;</using>
<using>using <name><name>VirtualRouterClient</name>.<name>Properties</name></name>;</using>

<namespace>namespace <name>VirtualRouterClient</name>
<block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>DeviceIconManager</name>
    <block>{
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DeviceIcon</name></type> <name>LoadIcon</name><parameter_list>(<param><decl><type><name>string</name></type> <name>macAddress</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">//if (Settings.Default.DeviceIcons == null)</comment>
            <comment type="line">//</comment>{
            <comment type="line">//    Settings.Default.DeviceIcons = new System.Collections.ArrayList();</comment>
            <comment type="line">//</comment>}

            <comment type="line">////retrieve setting</comment>
            <comment type="line">//DeviceIcon di = (from obj in Settings.Default.DeviceIcons.ToArray()</comment>
            <comment type="line">//                 where (obj as DeviceIcon).MacAddress.Replace(":", "-").ToLowerInvariant() == macAddress.Replace(":", "-").ToLowerInvariant()</comment>
            <comment type="line">//                 select obj as DeviceIcon).FirstOrDefault();</comment>
            <comment type="line">//if (di == null)</comment>
            <comment type="line">//    return new DeviceIcon(macAddress, DeviceIconEnum.Default);</comment>
            <comment type="line">//else</comment>
            <comment type="line">//    return di;</comment>

            <decl_stmt><decl><type><name>var</name></type> <name>icons</name> =<init> <expr><call><name>GetDeviceIcons</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//retrieve setting</comment>
            <decl_stmt><decl><type><name>DeviceIcon</name></type> <name>di</name> =<init> <expr>(<linq><from>from <expr><name>obj</name></expr> <in>in <expr><name>icons</name></expr></in></from>
                             <where>where <expr><call><name><name>obj</name>.<name>MacAddress</name>.<name>Replace</name></name><argument_list>(<argument><expr>":"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call>.<call><name>ToLowerInvariant</name><argument_list>()</argument_list></call> == <call><name><name>macAddress</name>.<name>Replace</name></name><argument_list>(<argument><expr>":"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call>.<call><name>ToLowerInvariant</name><argument_list>()</argument_list></call></expr></where>
                             <select>select <expr><name>obj</name></expr></select></linq>).<call><name>FirstOrDefault</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>di</name> == <name>null</name></expr>)</condition><then>
                <return>return <expr>new <call><name>DeviceIcon</name><argument_list>(<argument><expr><name>macAddress</name></expr></argument>, <argument><expr><name><name>DeviceIconEnum</name>.<name>Default</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
            <else>else
                <return>return <expr><name>di</name></expr>;</return></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>SaveIcon</name><parameter_list>(<param><decl><type><name>string</name></type> <name>macAddress</name></decl></param>, <param><decl><type><name>DeviceIconEnum</name></type> <name>icon</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">//if (Settings.Default.DeviceIcons == null)</comment>
            <comment type="line">//</comment>{
            <comment type="line">//    Settings.Default.DeviceIcons = new System.Collections.ArrayList();</comment>

            <comment type="line">//</comment>}
            <comment type="line">//// Remove existing setting</comment>
            <comment type="line">//Settings.Default.DeviceIcons.Remove(</comment>
            <comment type="line">//        (from obj in Settings.Default.DeviceIcons.ToArray()</comment>
            <comment type="line">//         where (obj as DeviceIcon).MacAddress.Replace(":", "-").ToLowerInvariant() == macAddress.Replace(":", "-").ToLowerInvariant()</comment>
            <comment type="line">//             select obj).FirstOrDefault()</comment>
            <comment type="line">//    );</comment>

            <comment type="line">////Save new setting</comment>
            <comment type="line">//Settings.Default.DeviceIcons.Add(new DeviceIcon(macAddress, icon));</comment>
            <comment type="line">//Settings.Default.Save();</comment>

            <decl_stmt><decl><type><name>var</name></type> <name>icons</name> =<init> <expr><call><name>GetDeviceIcons</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach>foreach(<init><decl><type><name>var</name></type> <name>item</name> <init>in
                    <expr>(<linq><from>from <expr><name>i</name></expr> <in>in <expr><name>icons</name></expr></in></from>
                    <where>where <expr><call><name><name>i</name>.<name>MacAddress</name>.<name>Replace</name></name><argument_list>(<argument><expr>":"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call>.<call><name>ToLowerInvariant</name><argument_list>()</argument_list></call> == <call><name><name>macAddress</name>.<name>Replace</name></name><argument_list>(<argument><expr>":"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call>.<call><name>ToLowerInvariant</name><argument_list>()</argument_list></call></expr></where>
                    <select>select <expr><name>i</name></expr></select></linq>).<call><name>ToArray</name><argument_list>()</argument_list></call></expr></init></decl></init>
                ) <block>{
                        <expr><call><name><name>icons</name>.<name>Remove</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;
            }</block>

            <expr_stmt><expr><call><name><name>icons</name>.<name>Add</name></name><argument_list>(<argument><expr>new <call><name>DeviceIcon</name><argument_list>(<argument><expr><name>macAddress</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
            <expr_stmt><expr><call><name>SaveDeviceIcons</name><argument_list>(<argument><expr><name>icons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>DeviceIcon</name></argument>&gt;</argument_list></name></type> <name>GetDeviceIcons</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><call><name><name>string</name>.<name>IsNullOrEmpty</name></name><argument_list>(<argument><expr><name><name>Settings</name>.<name>Default</name>.<name>DeviceIcons</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <return>return <expr>new <call><name><name>List</name><argument_list>&lt;<argument><name>DeviceIcon</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <try>try
                <block>{
                    <return>return <expr><call><name><name>JSONHelper</name>.<name><name>Deserialize</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>DeviceIcon</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name><name>Settings</name>.<name>Default</name>.<name>DeviceIcons</name></name></expr></argument>)</argument_list></call></expr>;</return>
                }</block>
                <catch>catch
                <block>{
                    <return>return <expr>new <call><name><name>List</name><argument_list>&lt;<argument><name>DeviceIcon</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
                }</block></catch></try>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>SaveDeviceIcons</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>DeviceIcon</name></argument>&gt;</argument_list></name></type> <name>icons</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>Settings</name>.<name>Default</name>.<name>DeviceIcons</name></name> = <call><name><name>JSONHelper</name>.<name><name>Serialize</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>DeviceIcon</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>icons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Settings</name>.<name>Default</name>.<name>Save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> class <name>DeviceIcon</name>
    <block>{
        <constructor><specifier>public</specifier> <name>DeviceIcon</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
        <constructor><specifier>public</specifier> <name>DeviceIcon</name><parameter_list>(<param><decl><type><name>string</name></type> <name>macAddress</name></decl></param>, <param><decl><type><name>DeviceIconEnum</name></type> <name>icon</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>MacAddress</name></name> = <name>macAddress</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>Icon</name></name> = <name>icon</name></expr>;</expr_stmt>
        }</block></constructor>
        <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>MacAddress</name> <block>{ <function_decl><name>get</name>;</function_decl> <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>DeviceIconEnum</name></type> <name>Icon</name> <block>{ <function_decl><name>get</name>;</function_decl> <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
