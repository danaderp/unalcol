<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="D:\thesisCode\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterClient\App.xaml.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Threading</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name></name>;</using>
<using>using <name><name>System</name>.<name>Diagnostics</name></name>;</using>
<using>using <name><name>System</name>.<name>Collections</name>.<name>Generic</name></name>;</using>

<namespace>namespace <name>VirtualRouterClient</name>
<block>{
    <comment type="line">/// &lt;summary&gt;</comment>
    <comment type="line">/// Interaction logic for App.xaml</comment>
    <comment type="line">/// &lt;/summary&gt;</comment>
    <class><specifier>public</specifier> <specifier>partial</specifier> class <name>App</name> <super>: <name>Application</name></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Thread</name></type> <name>threadServiceChecker</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>Activate</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>MainWindow</name>.<name>WindowState</name></name> = <name><name>WindowState</name>.<name>Normal</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>MainWindow</name>.<name>Activate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>protected</specifier> <specifier>override</specifier> <name>void</name></type> <name>OnStartup</name><parameter_list>(<param><decl><type><name>StartupEventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>base</name>.<name>OnStartup</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>this</name>.<name>ConnectService</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>threadServiceChecker</name></name> = new <call><name>Thread</name><argument_list>(<argument><expr>new <call><name>ThreadStart</name><argument_list>(<argument><expr><name><name>this</name>.<name>ServiceChecker</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>threadServiceChecker</name>.<name>Start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>protected</specifier> <specifier>override</specifier> <name>void</name></type> <name>OnExit</name><parameter_list>(<param><decl><type><name>ExitEventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>threadServiceChecker</name>.<name>Abort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>base</name>.<name>OnExit</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>ServiceChecker</name><parameter_list>()</parameter_list>
        <block>{
            <while>while <condition>(<expr>true</expr>)</condition>
            <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>_VirtualRouter</name>.<name>State</name></name> == <name><name>System</name>.<name>ServiceModel</name>.<name>CommunicationState</name>.<name>Faulted</name></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>_VirtualRouter</name></name> = <name>null</name></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><name><name>this</name>.<name>_VirtualRouter</name></name> == <name>null</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>ConnectService</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>Thread</name>.<name>Sleep</name></name><argument_list>(<argument><expr>5000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>ConnectService</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>_VirtualRouter</name></name> == <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>this</name>.<name>_VirtualRouter</name></name> = new <call><name><name>VirtualRouterClient</name>.<name>VirtualRouterService</name>.<name>VirtualRouterHostClient</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>_VirtualRouter</name>.<name>InnerChannel</name>.<name>Faulted</name></name> += new <call><name>EventHandler</name><argument_list>(<argument><expr><name>InnerChannel_Faulted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>_VirtualRouter</name>.<name>InnerChannel</name>.<name>Closed</name></name> += new <call><name>EventHandler</name><argument_list>(<argument><expr><name>InnerChannel_Closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>_VirtualRouter</name>.<name>InnerChannel</name>.<name>Opened</name></name> += new <call><name>EventHandler</name><argument_list>(<argument><expr><name>InnerChannel_Opened</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try
                <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>_VirtualRouter</name>.<name>Open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <block>{ }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>VirtualRouterService</name>.<name>VirtualRouterHostClient</name></name></type> <name>_VirtualRouter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name><name>VirtualRouterService</name>.<name>VirtualRouterHostClient</name></name></type> <name>VirtualRouter</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><name><name>this</name>.<name>_VirtualRouter</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>event</specifier> <name>EventHandler</name></type> <name>VirtualRouterServiceConnected</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>event</specifier> <name>EventHandler</name></type> <name>VirtualRouterServiceDisconnected</name></decl>;</decl_stmt>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>InvokeVirtualRouterServiceDisconnected</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>VirtualRouterServiceDisconnected</name></name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>Dispatcher</name>.<name>Invoke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>VirtualRouterServiceDisconnected</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EventArgs</name>.<name>Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>InnerChannel_Opened</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>_IsVirtualRouterServiceConnected</name></name> = true</expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>VirtualRouterServiceConnected</name></name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>Dispatcher</name>.<name>Invoke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>VirtualRouterServiceConnected</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EventArgs</name>.<name>Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>InnerChannel_Closed</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>_IsVirtualRouterServiceConnected</name></name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>InvokeVirtualRouterServiceDisconnected</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>InnerChannel_Faulted</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>_IsVirtualRouterServiceConnected</name></name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>InvokeVirtualRouterServiceDisconnected</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><type><specifier>private</specifier> <name>bool</name></type> <name>_IsVirtualRouterServiceConnected</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>bool</name></type> <name>IsVirtualRouterServiceConnected</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><name><name>this</name>.<name>_IsVirtualRouterServiceConnected</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
