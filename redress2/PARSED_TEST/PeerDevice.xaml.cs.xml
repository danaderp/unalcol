<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterClient\PeerDevice.xaml.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Threading</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Controls</name></name>;</using>
<using>using <name><name>VirtualRouterClient</name>.<name>VirtualRouterService</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Media</name></name>;</using>

<namespace>namespace <name>VirtualRouterClient</name>
<block>{
    <comment type="line">/// &lt;summary&gt;</comment>
    <comment type="line">/// Interaction logic for PeerDevice.xaml</comment>
    <comment type="line">/// &lt;/summary&gt;</comment>
    <class><specifier>public</specifier> <specifier>partial</specifier> class <name>PeerDevice</name> <super>: <name>UserControl</name></super>
    <block>{
        <decl_stmt><decl><type><name>Thread</name></type> <name>thread</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>PeerDevice</name><parameter_list>(<param><decl><type><name>ConnectedPeer</name></type> <name>peer</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>InitializeComponent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>ContextMenu</name></name> = new <call><name>ContextMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>var</name></type> <name>propertiesMenuItem</name> =<init> <expr>new <call><name>MenuItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>propertiesMenuItem</name>.<name>Header</name></name> = "_Properties..."</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>propertiesMenuItem</name>.<name>Click</name></name>+=new <call><name><name>System</name>.<name>Windows</name>.<name>RoutedEventHandler</name></name><argument_list>(<argument><expr><name>PropertiesMenuItem_Click</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>ContextMenu</name>.<name>Items</name>.<name>Add</name></name><argument_list>(<argument><expr><name>propertiesMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt><expr><name><name>this</name>.<name>Peer</name></name> = <name>peer</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier>private</specifier> <name>ConnectedPeer</name></type> <name>_Peer</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>ConnectedPeer</name></type> <name>Peer</name> <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><name><name>this</name>.<name>_Peer</name></name></expr>;</return>
            }</block></function>
            private <function><name>set</name>
            <block>{
                <expr_stmt><expr><name><name>this</name>.<name>_Peer</name></name> = <name>value</name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>lblDisplayName</name>.<name>Content</name></name> = <name><name>lblDisplayName</name>.<name>ToolTip</name></name> = <name><name>this</name>.<name>_Peer</name>.<name>MacAddress</name></name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>UpdateDeviceIcon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>lblMACAddress</name>.<name>Content</name></name> = ""</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lblIPAddress</name>.<name>Content</name></name> = ""</expr>;</expr_stmt>
                
                <comment type="line">// TODO - Need to get IP Address</comment>
                <expr_stmt><expr><name><name>lblMACAddress</name>.<name>Content</name></name> = "Retrieving Host Name..."</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lblIPAddress</name>.<name>Content</name></name> = "Retrieving IP Address..."</expr>;</expr_stmt>

                <expr_stmt><expr><name>thread</name> = new <call><name>Thread</name><argument_list>(<argument><expr>new <call><name>ParameterizedThreadStart</name><argument_list>(<argument><expr><name><name>this</name>.<name>getIPInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>thread</name>.<name>Start</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>UpdateDeviceIcon</name><parameter_list>()</parameter_list>
        <block>{   
            <decl_stmt><decl><type><name>var</name></type> <name>icon</name> =<init> <expr><call><name><name>DeviceIconManager</name>.<name>LoadIcon</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_Peer</name>.<name>MacAddress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>var</name></type> <name>resourceName</name> =<init> <expr><call><name><name>icon</name>.<name>Icon</name>.<name>ToResourceName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>imgDeviceIcon</name>.<name>Source</name></name> = (<name>ImageSource</name>)<call><name>FindResource</name><argument_list>(<argument><expr><name>resourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>IPAddress</name> <block>{ <function_decl><name>get</name>;</function_decl> <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>HostName</name> <block>{ <function_decl><name>get</name>;</function_decl> <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>SetIPInfoDisplay</name><parameter_list>(<param><decl><type><name>IPInfo</name></type> <name>ipinfo</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name><name>ipinfo</name>.<name>HostName</name></name> == <name><name>ipinfo</name>.<name>IPAddress</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>lblDisplayName</name>.<name>Content</name></name> = <name><name>lblDisplayName</name>.<name>ToolTip</name></name> = <name><name>ipinfo</name>.<name>HostName</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <if>if <condition>(<expr><call><name><name>string</name>.<name>IsNullOrEmpty</name></name><argument_list>(<argument><expr><name><name>ipinfo</name>.<name>HostName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>lblDisplayName</name>.<name>Content</name></name> = <name><name>lblDisplayName</name>.<name>ToolTip</name></name> = <name><name>ipinfo</name>.<name>IPAddress</name></name></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name><name>lblDisplayName</name>.<name>Content</name></name> = <name><name>lblDisplayName</name>.<name>ToolTip</name></name> = <name><name>ipinfo</name>.<name>HostName</name></name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>

            <expr_stmt><expr><name><name>this</name>.<name>lblMACAddress</name>.<name>Content</name></name> = "MAC: " + <name><name>ipinfo</name>.<name>MacAddress</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>lblIPAddress</name>.<name>Content</name></name> = "IP: " + <name><name>ipinfo</name>.<name>IPAddress</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>IPAddress</name></name> = <name><name>ipinfo</name>.<name>IPAddress</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>HostName</name></name> = <name><name>ipinfo</name>.<name>HostName</name></name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>SetIPNotFound</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>lblMACAddress</name>.<name>Content</name></name> = "Host Name could not be found."</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>lblIPAddress</name>.<name>Content</name></name> = "IP Address could not be found."</expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>getIPInfo</name><parameter_list>(<param><decl><type><name>object</name></type> <name>data</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>ipinfoFound</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>var</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

            <comment type="line">// count is used to only check a certain number of times before giving up</comment>
            <comment type="line">// This will keep the thread from preventing the app from exiting when the user closes the main window.</comment>

            <while>while <condition>(<expr>!<name>ipinfoFound</name> &amp;&amp; <name>count</name> &lt; 10</expr>)</condition>
            <block>{
                <try>try
                <block>{
                    <decl_stmt><decl><type><name>var</name></type> <name>pd</name> =<init> <expr><name>data</name> as <name>PeerDevice</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>var</name></type> <name>ipinfo</name> =<init> <expr><call><name><name>IPInfo</name>.<name>GetIPInfo</name></name><argument_list>(<argument><expr><call><name><name>pd</name>.<name>Peer</name>.<name>MacAddress</name>.<name>Replace</name></name><argument_list>(<argument><expr>":"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>ipinfo</name> != <name>null</name></expr>)</condition><then>
                    <block>{
                        <decl_stmt><decl><type><name>var</name></type> <name>hostname</name> =<init> <expr><name><name>ipinfo</name>.<name>HostName</name></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>this</name>.<name>Dispatcher</name>.<name>Invoke</name></name><argument_list>(<argument><expr>(<name>Action</name>)<function><name>delegate</name><parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt><expr><call><name><name>this</name>.<name>SetIPInfoDisplay</name></name><argument_list>(<argument><expr><name>ipinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ipinfoFound</name> = true</expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <expr_stmt><expr><call><name><name>Thread</name>.<name>Sleep</name></name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ipinfoFound</name> = false</expr>;</expr_stmt>
                    }</block></else></if>
                }</block>
                <catch>catch
                <block>{
                    <expr_stmt><expr><name>ipinfoFound</name> = false</expr>;</expr_stmt>
                }</block></catch></try>
                <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
            }</block></while>
            <if>if <condition>(<expr>!<name>ipinfoFound</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>Dispatcher</name>.<name>Invoke</name></name><argument_list>(<argument><expr>(<name>Action</name>)<function><name>delegate</name><parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>SetIPNotFound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>UserControl_MouseDoubleClick</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name><name>System</name>.<name>Windows</name>.<name>Input</name>.<name>MouseButtonEventArgs</name></name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>ShowPropertiesDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>PropertiesMenuItem_Click</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name><name>System</name>.<name>Windows</name>.<name>RoutedEventArgs</name></name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>ShowPropertiesDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>ShowPropertiesDialog</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>window</name> =<init> <expr>new <call><name>PeerDeviceProperties</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>window</name>.<name>Owner</name></name> = <name><name>App</name>.<name>Current</name>.<name>MainWindow</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>window</name>.<name>ShowDialog</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></namespace>
</unit>
