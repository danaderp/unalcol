<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterHostConsole\Program.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Linq</name></name>;</using>
<using>using <name><name>System</name>.<name>Reflection</name></name>;</using>
<using>using <name><name>System</name>.<name>ServiceModel</name></name>;</using>

<namespace>namespace <name>VirtualRouterHostConsole</name>
<block>{
    <class>class <name>Program</name>
    <block>{
        <function><type><specifier>static</specifier> <name>void</name></type> <name>Main</name><parameter_list>(<param><decl><type><name><name>string</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr><name>AssemblyTitle</name> + " " + <name>AssemblyVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr><name>AssemblyCopyright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>args</name>.<name>Length</name></name> &gt; 0 &amp;&amp; <name><name>args</name><index>[<expr>0</expr>]</index></name> == "/?"</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"Usage: VirtualRouterHostConsole [SSID] [Passkey]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>


            <decl_stmt><decl><type><name>var</name></type> <name>virtualRouterHost</name> =<init> <expr>new <call><name><name>VirtualRouterHost</name>.<name>VirtualRouterHost</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>var</name></type> <name>serviceHost</name> =<init> <expr>new <call><name>ServiceHost</name><argument_list>(<argument><expr><name>virtualRouterHost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if<condition>(<expr><name><name>args</name>.<name>Length</name></name> == 2</expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>var</name></type> <name>strSSID</name> =<init> <expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>var</name></type> <name>strPassKey</name> =<init> <expr><name><name>args</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>virtualRouterHost</name>.<name>SetConnectionSettings</name></name><argument_list>(<argument><expr><name>strSSID</name></expr></argument>, <argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>virtualRouterHost</name>.<name>SetPassword</name></name><argument_list>(<argument><expr><name>strPassKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"SSID: " + <name>strSSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"Passkey: " + <name>strPassKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>           


            <decl_stmt><decl><type><name>var</name></type> <name>conns</name> =<init> <expr><call><name><name>virtualRouterHost</name>.<name>GetSharableConnections</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>var</name></type> <name>connToShare</name> =<init> <expr><call><name><name>conns</name>.<name>FirstOrDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>virtualRouterHost</name>.<name>Start</name></name><argument_list>(<argument><expr><name>connToShare</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"ERROR: Virtual Router could not be started. Supported hardware may not have been found."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>


            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"Starting Service..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>serviceHost</name>.<name>State</name></name> != <name><name>CommunicationState</name>.<name>Opened</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>serviceHost</name>.<name>Open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"Virtual Router Service Running... [Press Enter To Stop]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Console</name>.<name>ReadLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>serviceHost</name>.<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


            <expr_stmt><expr><call><name><name>virtualRouterHost</name>.<name>Stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"Virtual Router Service Stopped."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>



        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>AssemblyTitle</name>
        <block>{
            <function><name>get</name>
            <block>{
                <decl_stmt><decl><type><name>object</name><index>[]</index></type> <name>attributes</name> =<init> <expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<call><name>GetCustomAttributes</name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>AssemblyTitleAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>attributes</name>.<name>Length</name></name> &gt; 0</expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>AssemblyTitleAttribute</name></type> <name>titleAttribute</name> =<init> <expr>(<name>AssemblyTitleAttribute</name>)<name><name>attributes</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>titleAttribute</name>.<name>Title</name></name> != ""</expr>)</condition><then>
                    <block>{
                        <return>return <expr><name><name>titleAttribute</name>.<name>Title</name></name></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
                <return>return <expr><call><name><name>System</name>.<name>IO</name>.<name>Path</name>.<name>GetFileNameWithoutExtension</name></name><argument_list>(<argument><expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<name>CodeBase</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>AssemblyVersion</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<call><name>GetName</name><argument_list>()</argument_list></call>.<call><name><name>Version</name>.<name>ToString</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>AssemblyCopyright</name>
        <block>{
            <function><name>get</name>
            <block>{
                <decl_stmt><decl><type><name>object</name><index>[]</index></type> <name>attributes</name> =<init> <expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<call><name>GetCustomAttributes</name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>AssemblyCopyrightAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>attributes</name>.<name>Length</name></name> == 0</expr>)</condition><then>
                <block>{
                    <return>return <expr>""</expr>;</return>
                }</block></then></if>
                <return>return <expr>((<name>AssemblyCopyrightAttribute</name>)<name><name>attributes</name><index>[<expr>0</expr>]</index></name>).<name>Copyright</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
