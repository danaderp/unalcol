<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="D:\thesisCode\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterClient\AeroGlass\AeroGlassHelper.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Runtime</name>.<name>InteropServices</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Interop</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Media</name></name>;</using>

<namespace>namespace <name><name>VirtualRouterClient</name>.<name>AeroGlass</name></name>
<block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>AeroGlassHelper</name>
    <block>{
        <cpp:region>#<cpp:directive>region</cpp:directive> "Generic Static Methods"</cpp:region>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>ExtendGlass</name><parameter_list>(<param><decl><type><name>IntPtr</name></type> <name>windowHandle</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>ExtendGlass</name><argument_list>(<argument><expr><name>windowHandle</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>ExtendGlass</name><parameter_list>(<param><decl><type><name>IntPtr</name></type> <name>windowHandle</name></decl></param>, <param><decl><type><name>int</name></type> <name>left</name></decl></param>, <param><decl><type><name>int</name></type> <name>right</name></decl></param>, <param><decl><type><name>int</name></type> <name>top</name></decl></param>, <param><decl><type><name>int</name></type> <name>bottom</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>internalExtendGlass</name><argument_list>(<argument><expr><name>windowHandle</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>internalExtendGlass</name><parameter_list>(<param><decl><type><name>IntPtr</name></type> <name>windowHandle</name></decl></param>, <param><decl><type><name>int</name></type> <name>left</name></decl></param>, <param><decl><type><name>int</name></type> <name>right</name></decl></param>, <param><decl><type><name>int</name></type> <name>top</name></decl></param>, <param><decl><type><name>int</name></type> <name>bottom</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>retVal</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt> <comment type="line">// Returning less than zero will indicate that Aero Glass could not be extended</comment>

            <comment type="line">// Calculate the Aero Glass Margins</comment>
            <decl_stmt><decl><type><name><name>Win32</name>.<name>Margins</name></name></type> <name>margins</name> =<init> <expr><call><name><name>Win32</name>.<name>GetDpiAdjustedMargins</name></name><argument_list>(<argument><expr><name>windowHandle</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{
                <comment type="line">// Actually Enable Aero Glass</comment>
                <expr_stmt><expr><name>retVal</name> = <call><name><name>Win32</name>.<name>DwmExtendFrameIntoClientArea</name></name><argument_list>(<argument><expr><name>windowHandle</name></expr></argument>, <argument><specifier>ref</specifier> <expr><name>margins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch (<param><decl><type><name>Exception</name></type></decl></param>)
            <block>{
                <expr_stmt><expr><name>retVal</name> = -1</expr>;</expr_stmt>
            }</block></catch></try>

            <return>return <expr><name>retVal</name></expr>;</return>
        }</block></function>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>

        <cpp:region>#<cpp:directive>region</cpp:directive> "WPF Static Methods"</cpp:region>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>ExtendGlass</name><parameter_list>(<param><decl><type><name>Window</name></type> <name>win</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>ExtendGlass</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>ExtendGlass</name><parameter_list>(<param><decl><type><name>Window</name></type> <name>win</name></decl></param>, <param><decl><type><name>int</name></type> <name>left</name></decl></param>, <param><decl><type><name>int</name></type> <name>right</name></decl></param>, <param><decl><type><name>int</name></type> <name>top</name></decl></param>, <param><decl><type><name>int</name></type> <name>bottom</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Brush</name></type> <name>originalBackgroundBrush</name> =<init> <expr><name><name>win</name>.<name>Background</name></name></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>retVal</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>Win32</name>.<name>DwmIsCompositionEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>win</name>.<name>Background</name></name> = <name><name>Brushes</name>.<name>Transparent</name></name></expr>;</expr_stmt>

                    <comment type="line">// Obtain the window handle for WPF application</comment>
                    <decl_stmt><decl><type><name>WindowInteropHelper</name></type> <name>windowInterop</name> =<init> <expr>new <call><name>WindowInteropHelper</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>IntPtr</name></type> <name>windowHandle</name> =<init> <expr><name><name>windowInterop</name>.<name>Handle</name></name></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Set the Window background to be Transparent so the Aero Glass will show through</comment>
                    <decl_stmt><decl><type><name>HwndSource</name></type> <name>mainWindowSrc</name> =<init> <expr><call><name><name>HwndSource</name>.<name>FromHwnd</name></name><argument_list>(<argument><expr><name>windowHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>mainWindowSrc</name>.<name>CompositionTarget</name>.<name>BackgroundColor</name></name> = <name><name>Colors</name>.<name>Transparent</name></name></expr>;</expr_stmt>

                    <expr_stmt><expr><name>retVal</name> = <call><name>internalExtendGlass</name><argument_list>(<argument><expr><name>windowHandle</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>retVal</name> &lt; 0</expr>)</condition><then>
                <block>{
                    <throw>throw <expr>new <call><name>NotSupportedException</name><argument_list>(<argument><expr>"Operation Failed: Aero Glass Not Supported"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block>
            <catch>catch
            <block>{
                <comment type="line">// If an error occurred then change the Window.Background back to what it was</comment>
                <expr_stmt><expr><name><name>win</name>.<name>Background</name></name> = <name>originalBackgroundBrush</name></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>

        <comment type="line">//#region "Windows.Forms Static Methods"</comment>

        <comment type="line">//public static void ExtendGlass(Form form)</comment>
        <comment type="line">//</comment>{
        <comment type="line">//    ExtendGlass(form, -1, -1, -1, -1);</comment>
        <comment type="line">//</comment>}

        <comment type="line">//public static void ExtendGlass(Form form, int left, int right, int top, int bottom)</comment>
        <comment type="line">//</comment>{
        <comment type="line">//    System.Drawing.Color oldBackColor = form.BackColor;</comment>
        <comment type="line">//    System.Drawing.Color oldTransparencyKey = form.TransparencyKey;</comment>

        <comment type="line">//    int retVal = -1;</comment>

        <comment type="line">//    try</comment>
        <comment type="line">//    {</comment>
        <comment type="line">//        form.TransparencyKey = System.Drawing.Color.Beige;</comment>
        <comment type="line">//        form.BackColor = form.TransparencyKey;</comment>

        <comment type="line">//        retVal = internalExtendGlass(form.Handle, left, right, top, bottom);</comment>
        <comment type="line">//    }</comment>
        <comment type="line">//    catch (Exception)</comment>
        <comment type="line">//    {</comment>
        <comment type="line">//        retVal = -1;</comment>
        <comment type="line">//    }</comment>

        <comment type="line">//    if (retVal &lt; 0)</comment>
        <comment type="line">//    {</comment>
        <comment type="line">//        form.BackColor = oldBackColor;</comment>
        <comment type="line">//        form.TransparencyKey = oldTransparencyKey;</comment>
        <comment type="line">//    }</comment>
        <comment type="line">//</comment>}

        <comment type="line">//#endregion</comment>

        <cpp:region>#<cpp:directive>region</cpp:directive> "Win32 / pinvoke"</cpp:region>
        
        <class><specifier>private</specifier> <specifier>static</specifier> class <name>Win32</name>
        <block>{
            <function_decl><type><attribute>[<expr><call><name>DllImport</name><argument_list>(<argument><expr>"DwmApi.dll"</expr></argument>, <argument><expr><name>PreserveSig</name> = false</expr></argument>)</argument_list></call></expr>]</attribute>
            <specifier>public</specifier> <specifier>static</specifier> <specifier>extern</specifier> <name>int</name></type> <name>DwmExtendFrameIntoClientArea</name><parameter_list>(<param><decl><type><name>IntPtr</name></type> <name>hwnd</name></decl></param>, <param><decl><type><specifier>ref</specifier> <name>Margins</name></type> <name>margins</name></decl></param>)</parameter_list>;</function_decl>

            <function_decl><type><attribute>[<expr><call><name>DllImport</name><argument_list>(<argument><expr>"dwmapi.dll"</expr></argument>, <argument><expr><name>PreserveSig</name> = false</expr></argument>)</argument_list></call></expr>]</attribute>
            <specifier>public</specifier> <specifier>static</specifier> <specifier>extern</specifier> <name>bool</name></type> <name>DwmIsCompositionEnabled</name><parameter_list>()</parameter_list>;</function_decl>


            <struct><attribute>[<expr><call><name>StructLayout</name><argument_list>(<argument><expr><name><name>LayoutKind</name>.<name>Sequential</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
            <specifier>public</specifier> struct <name>Margins</name>
            <block>{
                <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>Left</name></decl>;</decl_stmt>    <comment type="line">// width of left border that retains its size</comment>
                <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>Right</name></decl>;</decl_stmt>   <comment type="line">// width of right border that retains its size</comment>
                <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>Top</name></decl>;</decl_stmt>     <comment type="line">// height of top border that retains its size</comment>
                <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>Bottom</name></decl>;</decl_stmt>  <comment type="line">// height of bottom border that retains its size</comment>
            }</block></struct>

            <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Win32</name>.<name>Margins</name></name></type> <name>GetDpiAdjustedMargins</name><parameter_list>(<param><decl><type><name>IntPtr</name></type> <name>windowHandle</name></decl></param>, <param><decl><type><name>int</name></type> <name>left</name></decl></param>, <param><decl><type><name>int</name></type> <name>right</name></decl></param>, <param><decl><type><name>int</name></type> <name>top</name></decl></param>, <param><decl><type><name>int</name></type> <name>bottom</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>DesktopDpiX</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>DesktopDpiY</name></decl>;</decl_stmt>
                <comment type="line">// Get System Dpi</comment>
                <using>using (<decl><type><name><name>System</name>.<name>Drawing</name>.<name>Graphics</name></name></type> <name>desktop</name> =<init> <expr><call><name><name>System</name>.<name>Drawing</name>.<name>Graphics</name>.<name>FromHwnd</name></name><argument_list>(<argument><expr><name>windowHandle</name></expr></argument>)</argument_list></call></expr></init></decl>)
                <block>{
                    <expr_stmt><expr><name>DesktopDpiX</name> = <name><name>desktop</name>.<name>DpiX</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>DesktopDpiY</name> = <name><name>desktop</name>.<name>DpiY</name></name></expr>;</expr_stmt>
                }</block></using>

                <comment type="line">// Set Margins</comment>
                <decl_stmt><decl><type><name><name>Win32</name>.<name>Margins</name></name></type> <name>margins</name> =<init> <expr>new <call><name><name>Win32</name>.<name>Margins</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                
                <comment type="line">// Note that the default desktop Dpi is 96dpi. The  margins are</comment>
                <comment type="line">// adjusted for the system Dpi.</comment>
                <expr_stmt><expr><name><name>margins</name>.<name>Left</name></name> = <call><name><name>Convert</name>.<name>ToInt32</name></name><argument_list>(<argument><expr><name>left</name> * (<name>DesktopDpiX</name> / 96)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>margins</name>.<name>Right</name></name> = <call><name><name>Convert</name>.<name>ToInt32</name></name><argument_list>(<argument><expr><name>right</name> * (<name>DesktopDpiX</name> / 96)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>margins</name>.<name>Top</name></name> = <call><name><name>Convert</name>.<name>ToInt32</name></name><argument_list>(<argument><expr><name>top</name> * (<name>DesktopDpiX</name> / 96)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>margins</name>.<name>Bottom</name></name> = <call><name><name>Convert</name>.<name>ToInt32</name></name><argument_list>(<argument><expr><name>bottom</name> * (<name>DesktopDpiX</name> / 96)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>margins</name></expr>;</return>
            }</block></function>
        }</block></class>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
