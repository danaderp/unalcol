<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouter.Wlan\WlanManager.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Collections</name>.<name>Generic</name></name>;</using>
<using>using <name><name>System</name>.<name>Runtime</name>.<name>InteropServices</name></name>;</using>
<using>using <name><name>System</name>.<name>Threading</name></name>;</using>
<using>using <name><name>VirtualRouter</name>.<name>Wlan</name>.<name>WinAPI</name></name>;</using>

<namespace>namespace <name><name>VirtualRouter</name>.<name>Wlan</name></name>
<block>{
    <class><specifier>public</specifier> class <name>WlanManager</name> <super>: <name>IDisposable</name></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>IntPtr</name></type> <name>_WlanHandle</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>uint</name></type> <name>_ServerVersion</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>wlanapi</name>.<name>WLAN_NOTIFICATION_CALLBACK</name></name></type> <name>_notificationCallback</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>WLAN_HOSTED_NETWORK_STATE</name></type> <name>_HostedNetworkState</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Dictionary</name><argument_list>&lt;<argument><name>string</name></argument>, <argument><name>WlanStation</name></argument>&gt;</argument_list></name></type> <name>_Stations</name> =<init> <expr>new <call><name><name>Dictionary</name><argument_list>&lt;<argument><name>string</name></argument>, <argument><name>WlanStation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>WlanManager</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>_notificationCallback</name></name> = new <call><name><name>wlanapi</name>.<name>WLAN_NOTIFICATION_CALLBACK</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>OnNotification</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>Init</name><parameter_list>()</parameter_list>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanOpenHandle</name></name><argument_list>(<argument><expr><name><name>wlanapi</name>.<name>WLAN_CLIENT_VERSION_VISTA</name></name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>, <argument><specifier>out</specifier> <expr><name><name>this</name>.<name>_ServerVersion</name></name></expr></argument>, <argument><specifier>ref</specifier> <expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <decl_stmt><decl><type><name>WLAN_NOTIFICATION_SOURCE</name></type> <name>notifSource</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanRegisterNotification</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><expr><name><name>WLAN_NOTIFICATION_SOURCE</name>.<name>All</name></name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name><name>this</name>.<name>_notificationCallback</name></name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>, <argument><specifier>out</specifier> <expr><name>notifSource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>failReason</name> =<init> <expr><call><name><name>this</name>.<name>InitSettings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>failReason</name> != <name><name>WLAN_HOSTED_NETWORK_REASON</name>.<name>wlan_hosted_network_reason_success</name></name></expr>)</condition><then>
                <block>{
                    <throw>throw <expr>new <call><name>Exception</name><argument_list>(<argument><expr>"Init Error WlanHostedNetworkInitSettings: " + <call><name><name>failReason</name>.<name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>

            }</block>
            <catch>catch
            <block>{
                <expr_stmt><expr><call><name><name>wlanapi</name>.<name>WlanCloseHandle</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw;</throw>
            }</block></catch></try>
        }</block></function>

        <cpp:region>#<cpp:directive>region</cpp:directive> "Events"</cpp:region>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>event</specifier> <name>EventHandler</name></type> <name>HostedNetworkStarted</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>event</specifier> <name>EventHandler</name></type> <name>HostedNetworkStopped</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>event</specifier> <name>EventHandler</name></type> <name>HostedNetworkAvailable</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>event</specifier> <name>EventHandler</name></type> <name>StationJoin</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>event</specifier> <name>EventHandler</name></type> <name>StationLeave</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>event</specifier> <name>EventHandler</name></type> <name>StationStateChange</name></decl>;</decl_stmt>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>

        <cpp:region>#<cpp:directive>region</cpp:directive> "OnNotification"</cpp:region>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>onHostedNetworkStarted</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>_HostedNetworkState</name></name> = <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_active</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>HostedNetworkStarted</name></name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>HostedNetworkStarted</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EventArgs</name>.<name>Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>onHostedNetworkStopped</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>_HostedNetworkState</name></name> = <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_idle</name></name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>this</name>.<name>HostedNetworkStopped</name></name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>HostedNetworkStopped</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EventArgs</name>.<name>Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>onHostedNetworkAvailable</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>_HostedNetworkState</name></name> = <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_idle</name></name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>this</name>.<name>HostedNetworkAvailable</name></name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>HostedNetworkAvailable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EventArgs</name>.<name>Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>onStationJoin</name><parameter_list>(<param><decl><type><name>WLAN_HOSTED_NETWORK_PEER_STATE</name></type> <name>stationState</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>pStation</name> =<init> <expr>new <call><name>WlanStation</name><argument_list>(<argument><expr><name>stationState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>_Stations</name><index>[<expr><name><name>pStation</name>.<name>MacAddress</name></name></expr>]</index></name> = <name>pStation</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>this</name>.<name>StationJoin</name></name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>StationJoin</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EventArgs</name>.<name>Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>onStationLeave</name><parameter_list>(<param><decl><type><name>WLAN_HOSTED_NETWORK_PEER_STATE</name></type> <name>stationState</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>_Stations</name>.<name>Remove</name></name><argument_list>(<argument><expr><call><name><name>stationState</name>.<name>PeerMacAddress</name>.<name>ConvertToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>this</name>.<name>StationLeave</name></name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>StationLeave</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EventArgs</name>.<name>Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>onStationStateChange</name><parameter_list>(<param><decl><type><name>WLAN_HOSTED_NETWORK_PEER_STATE</name></type> <name>stationState</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>StationStateChange</name></name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>StationStateChange</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EventArgs</name>.<name>Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>OnNotification</name><parameter_list>(<param><decl><type><specifier>ref</specifier> <name>WLAN_NOTIFICATION_DATA</name></type> <name>notifData</name></decl></param>, <param><decl><type><name>IntPtr</name></type> <name>context</name></decl></param>)</parameter_list>
        <block>{
            <switch>switch <condition>(<expr><name><name>notifData</name>.<name>notificationCode</name></name></expr>)</condition>
            <block>{
                <case>case <expr>(<name>int</name>)<name><name>WLAN_HOSTED_NETWORK_NOTIFICATION_CODE</name>.<name>wlan_hosted_network_state_change</name></name></expr>:

                    <if>if <condition>(<expr><name><name>notifData</name>.<name>dataSize</name></name> &gt; 0 &amp;&amp; <name><name>notifData</name>.<name>dataPtr</name></name> != <name><name>IntPtr</name>.<name>Zero</name></name></expr>)</condition><then>
                    <block>{
                        <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_STATE_CHANGE</name></type> <name>pStateChange</name> =<init> <expr>(<name>WLAN_HOSTED_NETWORK_STATE_CHANGE</name>)<call><name><name>Marshal</name>.<name>PtrToStructure</name></name><argument_list>(<argument><expr><name><name>notifData</name>.<name>dataPtr</name></name></expr></argument>, <argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>WLAN_HOSTED_NETWORK_STATE_CHANGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <switch>switch <condition>(<expr><name><name>pStateChange</name>.<name>NewState</name></name></expr>)</condition>
                        <block>{
                            <case>case <expr><name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_active</name></name></expr>:
                                <expr_stmt><expr><call><name><name>this</name>.<name>onHostedNetworkStarted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <break>break;</break>

                            </case><case>case <expr><name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_idle</name></name></expr>:
                                <if>if <condition>(<expr><name><name>pStateChange</name>.<name>OldState</name></name> == <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_active</name></name></expr>)</condition><then>
                                <block>{
                                    <expr_stmt><expr><call><name><name>this</name>.<name>onHostedNetworkStopped</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                }</block></then>
                                <else>else
                                <block>{
                                    <expr_stmt><expr><call><name><name>this</name>.<name>onHostedNetworkAvailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                }</block></else></if>
                                <break>break;</break>

                            </case><case>case <expr><name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_unavailable</name></name></expr>:
                                <if>if <condition>(<expr><name><name>pStateChange</name>.<name>OldState</name></name> == <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_active</name></name></expr>)</condition><then>
                                <block>{
                                    <expr_stmt><expr><call><name><name>this</name>.<name>onHostedNetworkStopped</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                                <expr_stmt><expr><call><name><name>this</name>.<name>onHostedNetworkAvailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <break>break;</break>
                        </case>}</block></switch>
                    }</block></then></if>

                    <break>break;</break>

                </case><case>case <expr>(<name>int</name>)<name><name>WLAN_HOSTED_NETWORK_NOTIFICATION_CODE</name>.<name>wlan_hosted_network_peer_state_change</name></name></expr>:

                    <if>if <condition>(<expr><name><name>notifData</name>.<name>dataSize</name></name> &gt; 0 &amp;&amp; <name><name>notifData</name>.<name>dataPtr</name></name> != <name><name>IntPtr</name>.<name>Zero</name></name></expr>)</condition><then>
                    <block>{
                        <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE</name></type> <name>pPeerStateChange</name> =<init> <expr>(<name>WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE</name>)<call><name><name>Marshal</name>.<name>PtrToStructure</name></name><argument_list>(<argument><expr><name><name>notifData</name>.<name>dataPtr</name></name></expr></argument>, <argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if>if <condition>(<expr><name><name>pPeerStateChange</name>.<name>NewState</name>.<name>PeerAuthState</name></name> == <name><name>WLAN_HOSTED_NETWORK_PEER_AUTH_STATE</name>.<name>wlan_hosted_network_peer_state_authenticated</name></name></expr>)</condition><then>
                        <block>{
                            <comment type="line">// Station joined the hosted network</comment>
                            <expr_stmt><expr><call><name><name>this</name>.<name>onStationJoin</name></name><argument_list>(<argument><expr><name><name>pPeerStateChange</name>.<name>NewState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <if>if <condition>(<expr><name><name>pPeerStateChange</name>.<name>NewState</name>.<name>PeerAuthState</name></name> == <name><name>WLAN_HOSTED_NETWORK_PEER_AUTH_STATE</name>.<name>wlan_hosted_network_peer_state_invalid</name></name></expr>)</condition><then>
                        <block>{
                            <comment type="line">// Station left the hosted network</comment>
                            <expr_stmt><expr><call><name><name>this</name>.<name>onStationLeave</name></name><argument_list>(<argument><expr><name><name>pPeerStateChange</name>.<name>NewState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else
                        <block>{
                            <comment type="line">// Authentication state changed</comment>
                            <expr_stmt><expr><call><name><name>this</name>.<name>onStationStateChange</name></name><argument_list>(<argument><expr><name><name>pPeerStateChange</name>.<name>NewState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if></else></if>
                    }</block></then></if>

                    <break>break;</break>

                </case><case>case <expr>(<name>int</name>)<name><name>WLAN_HOSTED_NETWORK_NOTIFICATION_CODE</name>.<name>wlan_hosted_network_radio_state_change</name></name></expr>:
                    <if>if <condition>(<expr><name><name>notifData</name>.<name>dataSize</name></name> &gt; 0 &amp;&amp; <name><name>notifData</name>.<name>dataPtr</name></name> != <name><name>IntPtr</name>.<name>Zero</name></name></expr>)</condition><then>
                    <block>{
                        <comment type="line">//WLAN_HOSTED_NETWORK_RADIO_STATE pRadioState = (WLAN_HOSTED_NETWORK_RADIO_STATE)Marshal.PtrToStructure(notifData.dataPtr, typeof(WLAN_HOSTED_NETWORK_RADIO_STATE));</comment>
                        <comment type="line">// Do nothing for now</comment>
                    }</block></then></if>
                    <comment type="line">//else</comment>
                    <comment type="line">//</comment>{
                    <comment type="line">//    // // Shall NOT happen</comment>
                    <comment type="line">//    // _ASSERT(FAILSE);</comment>
                    <comment type="line">//</comment>}
                    <break>break;</break>
            </case>}</block></switch>

        }</block></function>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>

        <cpp:region>#<cpp:directive>region</cpp:directive> "Public Methods"</cpp:region>

        <function><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>ForceStart</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>failReason</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkForceStart</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><specifier>out</specifier> <expr><name>failReason</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>_HostedNetworkState</name></name> = <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_active</name></name></expr>;</expr_stmt>

            <return>return <expr><name>failReason</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>ForceStop</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>failReason</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkForceStop</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><specifier>out</specifier> <expr><name>failReason</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>_HostedNetworkState</name></name> = <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_idle</name></name></expr>;</expr_stmt>

            <return>return <expr><name>failReason</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>StartUsing</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>failReason</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkStartUsing</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><specifier>out</specifier> <expr><name>failReason</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>_HostedNetworkState</name></name> = <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_active</name></name></expr>;</expr_stmt>

            <return>return <expr><name>failReason</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>StopUsing</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>failReason</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkStopUsing</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><specifier>out</specifier> <expr><name>failReason</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>_HostedNetworkState</name></name> = <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_idle</name></name></expr>;</expr_stmt>

            <return>return <expr><name>failReason</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>InitSettings</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>failReason</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkInitSettings</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><specifier>out</specifier> <expr><name>failReason</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>failReason</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>QuerySecondaryKey</name><parameter_list>(<param><decl><type><specifier>out</specifier> <name>string</name></type> <name>passKey</name></decl></param>, <param><decl><type><specifier>out</specifier> <name>bool</name></type> <name>isPassPhrase</name></decl></param>, <param><decl><type><specifier>out</specifier> <name>bool</name></type> <name>isPersistent</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>failReason</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint</name></type> <name>keyLen</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkQuerySecondaryKey</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><specifier>out</specifier> <expr><name>keyLen</name></expr></argument>, <argument><specifier>out</specifier> <expr><name>passKey</name></expr></argument>, <argument><specifier>out</specifier> <expr><name>isPassPhrase</name></expr></argument>, <argument><specifier>out</specifier> <expr><name>isPersistent</name></expr></argument>, <argument><specifier>out</specifier> <expr><name>failReason</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>failReason</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>SetSecondaryKey</name><parameter_list>(<param><decl><type><name>string</name></type> <name>passKey</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>failReason</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkSetSecondaryKey</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><expr><call>(<name>uint</name>)<argument_list>(<argument><expr><name><name>passKey</name>.<name>Length</name></name> + 1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>passKey</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>, <argument><specifier>out</specifier> <expr><name>failReason</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>failReason</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_STATUS</name></type> <name>QueryStatus</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(<argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkQueryStatus</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><specifier>out</specifier> <expr><name>status</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>status</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>SetConnectionSettings</name><parameter_list>(<param><decl><type><name>string</name></type> <name>hostedNetworkSSID</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxNumberOfPeers</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_REASON</name></type> <name>failReason</name></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS</name></type> <name>settings</name> =<init> <expr>new <call><name>WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>settings</name>.<name>hostedNetworkSSID</name></name> = <call><name><name>WlanUtils</name>.<name>ConvertStringToDOT11_SSID</name></name><argument_list>(<argument><expr><name>hostedNetworkSSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>settings</name>.<name>dwMaxNumberOfPeers</name></name> = (<name>uint</name>)<name>maxNumberOfPeers</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>IntPtr</name></type> <name>settingsPtr</name> =<init> <expr><call><name><name>Marshal</name>.<name>AllocHGlobal</name></name><argument_list>(<argument><expr><call><name><name>Marshal</name>.<name>SizeOf</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Marshal</name>.<name>StructureToPtr</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>settingsPtr</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(
                <argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkSetProperty</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>,
                    <argument><expr><name><name>WLAN_HOSTED_NETWORK_OPCODE</name>.<name>wlan_hosted_network_opcode_connection_settings</name></name></expr></argument>,
                    <argument><expr>(<name>uint</name>)<call><name><name>Marshal</name>.<name>SizeOf</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>settingsPtr</name></expr></argument>, <argument><specifier>out</specifier> <expr><name>failReason</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>
                )</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>failReason</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WLAN_OPCODE_VALUE_TYPE</name></type> <name>QueryConnectionSettings</name><parameter_list>(<param><decl><type><specifier>out</specifier> <name>string</name></type> <name>hostedNetworkSSID</name></decl></param>, <param><decl><type><specifier>out</specifier> <name>int</name></type> <name>maxNumberOfPeers</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>uint</name></type> <name>dataSize</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>IntPtr</name></type> <name>dataPtr</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>WLAN_OPCODE_VALUE_TYPE</name></type> <name>opcode</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>WlanUtils</name>.<name>Throw_On_Win32_Error</name></name><argument_list>(
                <argument><expr><call><name><name>wlanapi</name>.<name>WlanHostedNetworkQueryProperty</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>,
                    <argument><expr><name><name>WLAN_HOSTED_NETWORK_OPCODE</name>.<name>wlan_hosted_network_opcode_connection_settings</name></name></expr></argument>,
                    <argument><specifier>out</specifier> <expr><name>dataSize</name></expr></argument>, <argument><specifier>out</specifier> <expr><name>dataPtr</name></expr></argument>, <argument><specifier>out</specifier> <expr><name>opcode</name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>
                )</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>var</name></type> <name>settings</name> =<init> <expr>(<name>WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS</name>)<call><name><name>Marshal</name>.<name>PtrToStructure</name></name><argument_list>(<argument><expr><name>dataPtr</name></expr></argument>, <argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name>hostedNetworkSSID</name> = <call><name><name>settings</name>.<name>hostedNetworkSSID</name>.<name>ConvertToString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>maxNumberOfPeers</name> = (<name>int</name>)<name><name>settings</name>.<name>dwMaxNumberOfPeers</name></name></expr>;</expr_stmt>

            <return>return <expr><name>opcode</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>StartHostedNetwork</name><parameter_list>()</parameter_list>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>ForceStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>var</name></type> <name>failReason</name> =<init> <expr><call><name><name>this</name>.<name>StartUsing</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>failReason</name> != <name><name>WLAN_HOSTED_NETWORK_REASON</name>.<name>wlan_hosted_network_reason_success</name></name></expr>)</condition><then>
                <block>{
                    <throw>throw <expr>new <call><name>Exception</name><argument_list>(<argument><expr>"Could Not Start Hosted Network!\n\n" + <call><name><name>failReason</name>.<name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block>
            <catch>catch
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>ForceStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>StopHostedNetwork</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>ForceStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>

        <cpp:region>#<cpp:directive>region</cpp:directive> "Properties"</cpp:region>

        <decl_stmt><decl><type><specifier>public</specifier> <name>Guid</name></type> <name>HostedNetworkInterfaceGuid</name>
        <block>{
            <function><name>get</name>
            <block>{
                <decl_stmt><decl><type><name>var</name></type> <name>status</name> =<init> <expr><call><name><name>this</name>.<name>QueryStatus</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><name><name>status</name>.<name>IPDeviceID</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>WLAN_HOSTED_NETWORK_STATE</name></type> <name>HostedNetworkState</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><name><name>this</name>.<name>_HostedNetworkState</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name><name>Dictionary</name><argument_list>&lt;<argument><name>string</name></argument>, <argument><name>WlanStation</name></argument>&gt;</argument_list></name></type> <name>Stations</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><name><name>this</name>.<name>_Stations</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>bool</name></type> <name>IsHostedNetworkStarted</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr>(<name><name>this</name>.<name>_HostedNetworkState</name></name> == <name><name>WLAN_HOSTED_NETWORK_STATE</name>.<name>wlan_hosted_network_active</name></name>)</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>


        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>

        <cpp:region>#<cpp:directive>region</cpp:directive> IDisposable Members</cpp:region>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>Dispose</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>ForceStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>this</name>.<name>_WlanHandle</name></name> != <name><name>IntPtr</name>.<name>Zero</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>wlanapi</name>.<name>WlanCloseHandle</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>_WlanHandle</name></name></expr></argument>, <argument><expr><name><name>IntPtr</name>.<name>Zero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
