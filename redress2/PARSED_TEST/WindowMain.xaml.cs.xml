<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="D:\thesisCode\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterClient\WindowMain.xaml.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Linq</name></name>;</using>
<using>using <name><name>System</name>.<name>Runtime</name>.<name>InteropServices</name></name>;</using>
<using>using <name><name>System</name>.<name>Threading</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Interop</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Media</name>.<name>Imaging</name></name>;</using>
<using>using <name><name>VirtualRouterClient</name>.<name>VirtualRouterService</name></name>;</using>
<using>using <name><name>System</name>.<name>Diagnostics</name></name>;</using>
<using>using <name><name>System</name>.<name>Collections</name>.<name>Generic</name></name>;</using>
<using>using <name><name>VirtualRouterClient</name>.<name>Properties</name></name>;</using>
<using>using <name><name>VirtualRouterClient</name>.<name>AeroGlass</name></name>;</using>
<using>using <name><name>System</name>.<name>Reflection</name></name>;</using>

<namespace>namespace <name>VirtualRouterClient</name>
<block>{
    <comment type="line">/// &lt;summary&gt;</comment>
    <comment type="line">/// Interaction logic for WindowMain.xaml</comment>
    <comment type="line">/// &lt;/summary&gt;</comment>
    <class><specifier>public</specifier> <specifier>partial</specifier> class <name>WindowMain</name> <super>: <name>Window</name></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>App</name></type> <name>myApp</name> =<init> <expr>(<name>App</name>)<name><name>App</name>.<name>Current</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Thread</name></type> <name>threadUpdateUI</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>WpfNotifyIcon</name></type> <name>trayIcon</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>WindowMain</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>InitializeComponent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>Loaded</name></name> += new <call><name>RoutedEventHandler</name><argument_list>(<argument><expr><name>Window1_Loaded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>Closing</name></name> += new <call><name><name>System</name>.<name>ComponentModel</name>.<name>CancelEventHandler</name></name><argument_list>(<argument><expr><name>WindowMain_Closing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>myApp</name>.<name>VirtualRouterServiceConnected</name></name> += new <call><name>EventHandler</name><argument_list>(<argument><expr><name>myApp_VirtualRouterServiceConnected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>myApp</name>.<name>VirtualRouterServiceDisconnected</name></name> += new <call><name>EventHandler</name><argument_list>(<argument><expr><name>myApp_VirtualRouterServiceDisconnected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>WindowMain_Closing</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name><name>System</name>.<name>ComponentModel</name>.<name>CancelEventArgs</name></name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>Settings</name>.<name>Default</name>.<name>SSID</name></name> = <name><name>txtSSID</name>.<name>Text</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Settings</name>.<name>Default</name>.<name>Password</name></name> = <name><name>txtPassword</name>.<name>Text</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Settings</name>.<name>Default</name>.<name>Save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>Window1_Loaded</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>RoutedEventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>AeroGlassHelper</name>.<name>ExtendGlass</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>windowContent</name>.<name>Margin</name>.<name>Left</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>windowContent</name>.<name>Margin</name>.<name>Right</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>windowContent</name>.<name>Margin</name>.<name>Top</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>windowContent</name>.<name>Margin</name>.<name>Bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>txtSSID</name>.<name>Text</name></name> = <name><name>Settings</name>.<name>Default</name>.<name>SSID</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txtPassword</name>.<name>Text</name></name> = <name><name>Settings</name>.<name>Default</name>.<name>Password</name></name></expr>;</expr_stmt>

            <comment type="line">// This line is for testing purposes</comment>
            <comment type="line">//panelConnections.Children.Add(new PeerDevice(new ConnectedPeer() { MacAddress = "AA-22-33-EE-EE-FF" }));</comment>

            <decl_stmt><decl><type><name>var</name></type> <name>args</name> =<init> <expr><call><name><name>System</name>.<name>Environment</name>.<name>GetCommandLineArgs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>var</name></type> <name>minarg</name> =<init> <expr>(<linq><from>from <expr><name>a</name></expr> <in>in <expr><name>args</name></expr></in></from>
                          <where>where <expr><call><name><name>a</name>.<name>ToLowerInvariant</name></name><argument_list>()</argument_list></call>.<call><name>Contains</name><argument_list>(<argument><expr>"/min"</expr></argument>)</argument_list></call></expr></where>
                          <select>select <expr><name>a</name></expr></select></linq>).<call><name>FirstOrDefault</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>string</name>.<name>IsNullOrEmpty</name></name><argument_list>(<argument><expr><name>minarg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>this</name>.<name>WindowState</name></name> = <name><name>WindowState</name>.<name>Minimized</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>ShowInTaskbar</name></name> = false</expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>this</name>.<name>AddSystemMenuItems</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>threadUpdateUI</name></name> = new <call><name>Thread</name><argument_list>(<argument><expr>new <call><name>ThreadStart</name><argument_list>(<argument><expr><name><name>this</name>.<name>UpdateUIThread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>threadUpdateUI</name>.<name>Start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>Closed</name></name> += new <call><name>EventHandler</name><argument_list>(<argument><expr><name>Window1_Closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <comment type="line">// Show System Tray Icon</comment>
            <decl_stmt><decl><type><name>var</name></type> <name>stream</name> =<init> <expr><call><name><name>Application</name>.<name>GetResourceStream</name></name><argument_list>(<argument><expr>new <call><name>Uri</name><argument_list>(<argument><expr>"icons/virtualrouterdisabled.ico"</expr></argument>, <argument><expr><name><name>UriKind</name>.<name>Relative</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>Stream</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>var</name></type> <name>icon</name> =<init> <expr>new <call><name><name>System</name>.<name>Drawing</name>.<name>Icon</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name></name> = new <call><name>WpfNotifyIcon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name>.<name>Icon</name></name> = <name>icon</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>trayIcon</name>.<name>Show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name>.<name>Text</name></name> = "Virtual Router (Disabled)"</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name>.<name>DoubleClick</name></name> += new <call><name>EventHandler</name><argument_list>(<argument><expr><name>trayIcon_DoubleClick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>var</name></type> <name>trayMenu</name> =<init> <expr>new <call><name><name>System</name>.<name>Windows</name>.<name>Forms</name>.<name>ContextMenuStrip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>trayMenu</name>.<name>Items</name>.<name>Add</name></name><argument_list>(<argument><expr>"&amp;Manage Virtual Router..."</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>new <call><name>EventHandler</name><argument_list>(<argument><expr><name><name>this</name>.<name>TrayIcon_Menu_Manage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>trayMenu</name>.<name>Items</name>.<name>Add</name></name><argument_list>(<argument><expr>new <call><name><name>System</name>.<name>Windows</name>.<name>Forms</name>.<name>ToolStripSeparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>trayMenu</name>.<name>Items</name>.<name>Add</name></name><argument_list>(<argument><expr>"Check for &amp;Updates..."</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>new <call><name>EventHandler</name><argument_list>(<argument><expr><name><name>this</name>.<name>TrayIcon_Menu_Update</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>trayMenu</name>.<name>Items</name>.<name>Add</name></name><argument_list>(<argument><expr>"&amp;About..."</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>new <call><name>EventHandler</name><argument_list>(<argument><expr><name><name>this</name>.<name>TrayIcon_Menu_About</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name>.<name>ContextMenuStrip</name></name> = <name>trayMenu</name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>StateChanged</name></name> += new <call><name>EventHandler</name><argument_list>(<argument><expr><name>WindowMain_StateChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>UpdateDisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><name>void</name></type> <name>TrayIcon_Menu_Update</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>CheckUpdates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>CheckUpdates</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>Process</name>.<name>Start</name></name><argument_list>(<argument><expr>"http://virtualrouter.codeplex.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><name>void</name></type> <name>TrayIcon_Menu_About</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>ShowAboutBox</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><name>void</name></type> <name>TrayIcon_Menu_Manage</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>WindowState</name></name> = <name><name>WindowState</name>.<name>Normal</name></name></expr>;</expr_stmt>
        }</block></function>

        <function><type><name>void</name></type> <name>WindowMain_StateChanged</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>WindowState</name></name> == <name><name>WindowState</name>.<name>Minimized</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>this</name>.<name>ShowInTaskbar</name></name> = false</expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>this</name>.<name>ShowInTaskbar</name></name> = true</expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><name>void</name></type> <name>trayIcon_DoubleClick</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>WindowState</name></name> = <name><name>WindowState</name>.<name>Normal</name></name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>Window1_Closed</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>threadUpdateUI</name>.<name>Abort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>trayIcon</name>.<name>Hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>trayIcon</name>.<name>Dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><name>void</name></type> <name>UpdateUIThread</name><parameter_list>()</parameter_list>
        <block>{
            <while>while <condition>(<expr>true</expr>)</condition>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>Dispatcher</name>.<name>Invoke</name></name><argument_list>(<argument><expr>new <call><name>Action</name><argument_list>(<argument><expr><name><name>this</name>.<name>UpdateDisplay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Thread</name>.<name>Sleep</name></name><argument_list>(<argument><expr>5000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 5 Seconds</comment>
            }</block></while>
        }</block></function>

        <function><type><name>void</name></type> <name>myApp_VirtualRouterServiceDisconnected</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>lblStatus</name>.<name>Content</name></name> = "Can not manage Virtual Router. The Service is not running."</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name>.<name>Text</name></name> = "Virtual Router (Disabled)"</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>UpdateDisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><name>void</name></type> <name>myApp_VirtualRouterServiceConnected</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>EventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>lblStatus</name>.<name>Content</name></name> = "Virtual Router can now be managed."</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>UpdateDisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>UpdateDisplay</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>UpdateUIDisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>RefreshSharableConnectionsDisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>myApp</name>.<name>IsVirtualRouterServiceConnected</name></name></expr>)</condition><then>
            <block>{
                <comment type="line">//panelConnections.Children.Clear();</comment>
                <decl_stmt><decl><type><name>var</name></type> <name>peers</name> =<init> <expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>GetConnectedPeers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>groupBoxPeersConnected</name>.<name>Header</name></name> = "Peers Connected (" + <call><name><name>peers</name>.<name>Count</name></name><argument_list>()</argument_list></call>.<call><name>ToString</name><argument_list>()</argument_list></call> + "):"</expr>;</expr_stmt>
                <foreach>foreach (<init><decl><type><name>var</name></type> <name>p</name> <init>in <expr><name>peers</name></expr></init></decl></init>)
                <block>{
                    <if>if <condition>(<expr>!<call><name><name>this</name>.<name>isPeerAlreadyConnected</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>panelConnections</name>.<name>Children</name>.<name>Add</name></name><argument_list>(<argument><expr>new <call><name>PeerDevice</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
                <expr_stmt><expr><call><name><name>this</name>.<name>removeDisconnectedPeers</name></name><argument_list>(<argument><expr><name>peers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>groupBoxPeersConnected</name>.<name>Header</name></name> = "Peers Connected (0):"</expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>private</specifier> <name>bool</name></type> <name>isPeerAlreadyConnected</name><parameter_list>(<param><decl><type><name>ConnectedPeer</name></type> <name>peer</name></decl></param>)</parameter_list>
        <block>{
            <foreach>foreach (<init><decl><type><name>var</name></type> <name>element</name> <init>in <expr><name><name>panelConnections</name>.<name>Children</name></name></expr></init></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>var</name></type> <name>elem</name> =<init> <expr><name>element</name> as <name>PeerDevice</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>elem</name> != <name>null</name></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><call><name><name>elem</name>.<name>Peer</name>.<name>MacAddress</name>.<name>ToLowerInvariant</name></name><argument_list>()</argument_list></call> == <call><name><name>peer</name>.<name>MacAddress</name>.<name>ToLowerInvariant</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block>{
                        <return>return <expr>true</expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>
            <return>return <expr>false</expr>;</return>
        }</block></function>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>removeDisconnectedPeers</name><parameter_list>(<param><decl><type><name><name>ConnectedPeer</name><index>[]</index></name></type> <name>peers</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>PeerDevice</name></argument>&gt;</argument_list></name></type> <name>peersToRemove</name> =<init> <expr>new <call><name><name>List</name><argument_list>&lt;<argument><name>PeerDevice</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach>foreach (<init><decl><type><name>var</name></type> <name>element</name> <init>in <expr><name><name>panelConnections</name>.<name>Children</name></name></expr></init></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>var</name></type> <name>elem</name> =<init> <expr><name>element</name> as <name>PeerDevice</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>elem</name> != <name>null</name></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>var</name></type> <name>exists</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                    <foreach>foreach (<init><decl><type><name>var</name></type> <name>p</name> <init>in <expr><name>peers</name></expr></init></decl></init>)
                    <block>{
                        <if>if <condition>(<expr><call><name><name>p</name>.<name>MacAddress</name>.<name>ToLowerInvariant</name></name><argument_list>()</argument_list></call> == <call><name><name>elem</name>.<name>Peer</name>.<name>MacAddress</name>.<name>ToLowerInvariant</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name>exists</name> = true</expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                    }</block></foreach>
                    <if>if <condition>(<expr>!<name>exists</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>peersToRemove</name>.<name>Add</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>
            <foreach>foreach (<init><decl><type><name>var</name></type> <name>elem</name> <init>in <expr><name>peersToRemove</name></expr></init></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>panelConnections</name>.<name>Children</name>.<name>Remove</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <cpp:region>#<cpp:directive>region</cpp:directive> "System Menu Stuff"</cpp:region>

        <cpp:region>#<cpp:directive>region</cpp:directive> Win32 API Stuff</cpp:region>

        <comment type="line">// Define the Win32 API methods we are going to use</comment>
        <function_decl><type><attribute>[<expr><call><name>DllImport</name><argument_list>(<argument><expr>"user32.dll"</expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier>private</specifier> <specifier>static</specifier> <specifier>extern</specifier> <name>IntPtr</name></type> <name>GetSystemMenu</name><parameter_list>(<param><decl><type><name>IntPtr</name></type> <name>hWnd</name></decl></param>, <param><decl><type><name>bool</name></type> <name>bRevert</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><attribute>[<expr><call><name>DllImport</name><argument_list>(<argument><expr>"user32.dll"</expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier>private</specifier> <specifier>static</specifier> <specifier>extern</specifier> <name>bool</name></type> <name>InsertMenu</name><parameter_list>(<param><decl><type><name>IntPtr</name></type> <name>hMenu</name></decl></param>, <param><decl><type><name>Int32</name></type> <name>wPosition</name></decl></param>, <param><decl><type><name>Int32</name></type> <name>wFlags</name></decl></param>, <param><decl><type><name>Int32</name></type> <name>wIDNewItem</name></decl></param>, <param><decl><type><name>string</name></type> <name>lpNewItem</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line">/// Define our Constants we will use</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>const</specifier> <name>Int32</name></type> <name>WM_SYSCOMMAND</name> =<init> <expr>0x112</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>const</specifier> <name>Int32</name></type> <name>MF_SEPARATOR</name> =<init> <expr>0x800</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>const</specifier> <name>Int32</name></type> <name>MF_BYPOSITION</name> =<init> <expr>0x400</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>const</specifier> <name>Int32</name></type> <name>MF_STRING</name> =<init> <expr>0x0</expr></init></decl>;</decl_stmt>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion> 

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>const</specifier> <name>int</name></type> <name>_AboutSysMenuID</name> =<init> <expr>1001</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>const</specifier> <name>int</name></type> <name>_UpdateSysMenuID</name> =<init> <expr>1002</expr></init></decl>;</decl_stmt>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>AddSystemMenuItems</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>IntPtr</name></type> <name>windowHandle</name> =<init> <expr>new <call><name>WindowInteropHelper</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>.<name>Handle</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>IntPtr</name></type> <name>systemMenu</name> =<init> <expr><call><name>GetSystemMenu</name><argument_list>(<argument><expr><name>windowHandle</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>InsertMenu</name><argument_list>(<argument><expr><name>systemMenu</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>MF_BYPOSITION</name> | <name>MF_SEPARATOR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>string</name>.<name>Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>InsertMenu</name><argument_list>(<argument><expr><name>systemMenu</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><name>_UpdateSysMenuID</name></expr></argument>, <argument><expr>"Check for Updates..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>InsertMenu</name><argument_list>(<argument><expr><name>systemMenu</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><name>_AboutSysMenuID</name></expr></argument>, <argument><expr>"About..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>HwndSource</name></type> <name>source</name> =<init> <expr><call><name><name>HwndSource</name>.<name>FromHwnd</name></name><argument_list>(<argument><expr><name>windowHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>source</name>.<name>AddHook</name></name><argument_list>(<argument><expr>new <call><name>HwndSourceHook</name><argument_list>(<argument><expr><name>WndProc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IntPtr</name></type> <name>WndProc</name><parameter_list>(<param><decl><type><name>IntPtr</name></type> <name>hwnd</name></decl></param>, <param><decl><type><name>int</name></type> <name>msg</name></decl></param>, <param><decl><type><name>IntPtr</name></type> <name>wParam</name></decl></param>, <param><decl><type><name>IntPtr</name></type> <name>lParam</name></decl></param>, <param><decl><type><specifier>ref</specifier> <name>bool</name></type> <name>handled</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// Check if a System Command has been executed</comment>
            <if>if <condition>(<expr><name>msg</name> == <name>WM_SYSCOMMAND</name></expr>)</condition><then>
            <block>{
                <comment type="line">// Execute the appropriate code for the System Menu item that was clicked</comment>
                <switch>switch <condition>(<expr><call><name><name>wParam</name>.<name>ToInt32</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{
                    <case>case <expr><name>_AboutSysMenuID</name></expr>:
                        <expr_stmt><expr><call><name>ShowAboutBox</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>handled</name> = true</expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>_UpdateSysMenuID</name></expr>:
                        <expr_stmt><expr><call><name>CheckUpdates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>handled</name> = true</expr>;</expr_stmt>
                        <break>break;</break>
                </case>}</block></switch>
            }</block></then></if>

            <return>return <expr><name><name>IntPtr</name>.<name>Zero</name></name></expr>;</return>
        }</block></function>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>

        <function><type><specifier>static</specifier> <name>void</name></type> <name>ShowAboutBox</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>Windows</name>.<name>MessageBox</name>.<name>Show</name></name><argument_list>(
                            <argument><expr><name><name>AssemblyAttributes</name>.<name>AssemblyProduct</name></name> + " " + <name><name>AssemblyAttributes</name>.<name>AssemblyVersion</name></name> + <name><name>Environment</name>.<name>NewLine</name></name>
                            + <name><name>Environment</name>.<name>NewLine</name></name> + <name><name>AssemblyAttributes</name>.<name>AssemblyDescription</name></name> + <name><name>Environment</name>.<name>NewLine</name></name>
                            + <name><name>Environment</name>.<name>NewLine</name></name> + "Licensed under the Microsoft Public License (Ms-PL)" + <name><name>Environment</name>.<name>NewLine</name></name>
                            + <name><name>Environment</name>.<name>NewLine</name></name> + <name><name>AssemblyAttributes</name>.<name>AssemblyCopyright</name></name> + <name><name>Environment</name>.<name>NewLine</name></name>
                            + <name><name>Environment</name>.<name>NewLine</name></name> + "http://virtualrouter.codeplex.com"</expr></argument>
                            
                            , <argument><expr>"About " + <name><name>AssemblyAttributes</name>.<name>AssemblyProduct</name></name> + "..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>btnToggleHostedNetwork_Click</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>RoutedEventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name><name>myApp</name>.<name>IsVirtualRouterServiceConnected</name></name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>IsStarted</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>Stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <if>if <condition>(<expr><call><name><name>this</name>.<name>ValidateFields</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block>{

                        <expr_stmt><expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>SetConnectionSettings</name></name><argument_list>(<argument><expr><name><name>txtSSID</name>.<name>Text</name></name></expr></argument>, <argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>SetPassword</name></name><argument_list>(<argument><expr><name><name>txtPassword</name>.<name>Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>(<expr>!<call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>Start</name></name><argument_list>(<argument><expr>(<name>SharableConnection</name>)<name><name>cbSharedConnection</name>.<name>SelectedItem</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block>{
                            <decl_stmt><decl><type><name>string</name></type> <name>strMessage</name> =<init> <expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>GetLastError</name></name><argument_list>()</argument_list></call> ?? "Virtual Router Could Not Be Started!"</expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name><name>lblStatus</name>.<name>Content</name></name> = <name>strMessage</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>MessageBox</name>.<name>Show</name></name><argument_list>(<argument><expr><name>strMessage</name></expr></argument>, <argument><expr><name><name>this</name>.<name>Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else
                        <block>{
                            <expr_stmt><expr><name><name>lblStatus</name>.<name>Content</name></name> = "Virtual Router Started..."</expr>;</expr_stmt>
                        }</block></else></if>

                    }</block></then></if>
                }</block></else></if>
            }</block></then></if>

            <expr_stmt><expr><call><name>UpdateUIDisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>bool</name></type> <name>ValidateFields</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>errorMessage</name> =<init> <expr><name><name>string</name>.<name>Empty</name></name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name><name>txtSSID</name>.<name>Text</name>.<name>Length</name></name> &lt;= 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>errorMessage</name> += "Network Name (SSID) is required." + <name><name>Environment</name>.<name>NewLine</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>txtSSID</name>.<name>Text</name>.<name>Length</name></name> &gt; 32</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>errorMessage</name> += "Network Name (SSID) can not be longer than 32 characters." + <name><name>Environment</name>.<name>NewLine</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>txtPassword</name>.<name>Text</name>.<name>Length</name></name> &lt; 8</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>errorMessage</name> += "Password must be at least 8 characters." + <name><name>Environment</name>.<name>NewLine</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>txtPassword</name>.<name>Text</name>.<name>Length</name></name> &gt; 64</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>errorMessage</name> += "Password can not be longer than 64 characters." + <name><name>Environment</name>.<name>NewLine</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr>!<call><name><name>string</name>.<name>IsNullOrEmpty</name></name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>MessageBox</name>.<name>Show</name></name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>MessageBoxButton</name>.<name>OK</name></name></expr></argument>, <argument><expr><name><name>MessageBoxImage</name>.<name>Warning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>false</expr>;</return>
            }</block></then></if>

            <return>return <expr>true</expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier>private</specifier> <name>bool</name></type> <name>isVirtualRouterRunning</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>UpdateUIDisplay</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>enableToggleButton</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>var</name></type> <name>enableSettingsFields</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name><name>myApp</name>.<name>IsVirtualRouterServiceConnected</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>enableToggleButton</name> = true</expr>;</expr_stmt>
                <try>try
                <block>{
                    <expr_stmt><expr><name><name>btnToggleHostedNetwork</name>.<name>IsEnabled</name></name> = true</expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>IsStarted</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>enableSettingsFields</name> = false</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>btnToggleHostedNetwork</name>.<name>Content</name></name> = "Stop Virtual Router"</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name>.<name>Text</name></name> = "Virtual Router (Running)"</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name>.<name>Icon</name></name> = new <call><name><name>System</name>.<name>Drawing</name>.<name>Icon</name></name><argument_list>(
                            <argument><expr><call><name><name>Application</name>.<name>GetResourceStream</name></name><argument_list>(<argument><expr>new <call><name>Uri</name><argument_list>(<argument><expr>"icons/virtualrouterenabled.ico"</expr></argument>, <argument><expr><name><name>UriKind</name>.<name>Relative</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>Stream</name></expr></argument>
                            )</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>(<expr>!<name>isVirtualRouterRunning</name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>this</name>.<name>Icon</name></name> = <name><name>this</name>.<name>imgIcon</name>.<name>Source</name></name> = <call><name><name>BitmapFrame</name>.<name>Create</name></name><argument_list>(<argument><expr><call><name><name>Application</name>.<name>GetResourceStream</name></name><argument_list>(<argument><expr>new <call><name>Uri</name><argument_list>(<argument><expr>"Icons/VirtualRouterEnabled.ico"</expr></argument>, <argument><expr><name><name>UriKind</name>.<name>Relative</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>Stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name>isVirtualRouterRunning</name> = true</expr>;</expr_stmt>

                        <expr_stmt><expr><name><name>txtSSID</name>.<name>Text</name></name> = <call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>GetConnectionSettings</name></name><argument_list>()</argument_list></call>.<name>SSID</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>txtPassword</name>.<name>Text</name></name> = <call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>GetPassword</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <expr_stmt><expr><name>enableSettingsFields</name> = true</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>btnToggleHostedNetwork</name>.<name>Content</name></name> = "Start Virtual Router"</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name>.<name>Text</name></name> = "Virtual Router (Stopped)"</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name>.<name>trayIcon</name>.<name>Icon</name></name> = new <call><name><name>System</name>.<name>Drawing</name>.<name>Icon</name></name><argument_list>(
                            <argument><expr><call><name><name>Application</name>.<name>GetResourceStream</name></name><argument_list>(<argument><expr>new <call><name>Uri</name><argument_list>(<argument><expr>"icons/virtualrouterdisabled.ico"</expr></argument>, <argument><expr><name><name>UriKind</name>.<name>Relative</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>Stream</name></expr></argument>
                            )</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>(<expr><name>isVirtualRouterRunning</name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name><name>this</name>.<name>Icon</name></name> = <name><name>this</name>.<name>imgIcon</name>.<name>Source</name></name> = <call><name><name>BitmapFrame</name>.<name>Create</name></name><argument_list>(<argument><expr><call><name><name>Application</name>.<name>GetResourceStream</name></name><argument_list>(<argument><expr>new <call><name>Uri</name><argument_list>(<argument><expr>"Icons/VirtualRouterDisabled.ico"</expr></argument>, <argument><expr><name><name>UriKind</name>.<name>Relative</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>Stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name>isVirtualRouterRunning</name> = false</expr>;</expr_stmt>
                    }</block></else></if>
                }</block>
                <catch>catch
                <block>{
                    <expr_stmt><expr><name>enableToggleButton</name> = false</expr>;</expr_stmt>
                    <expr_stmt><expr><name>enableSettingsFields</name> = false</expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>

            <expr_stmt><expr><name><name>btnToggleHostedNetwork</name>.<name>IsEnabled</name></name> = <name>enableToggleButton</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>gbVirtualRouterSettings</name>.<name>IsEnabled</name></name> = <name>enableSettingsFields</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>RefreshSharableConnectionsDisplay</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name><name>myApp</name>.<name>IsVirtualRouterServiceConnected</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>cbSharedConnection</name>.<name>DisplayMemberPath</name></name> = "Name"</expr>;</expr_stmt>
                
                <decl_stmt><decl><type><name>var</name></type> <name>connections</name> =<init> <expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>GetSharableConnections</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Guid</name></type> <name>selectedId</name> =<init> <expr><name><name>Guid</name>.<name>Empty</name></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>IsStarted</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>var</name></type> <name>sharedConn</name> =<init> <expr><call><name><name>myApp</name>.<name>VirtualRouter</name>.<name>GetSharedConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>sharedConn</name> != <name>null</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>selectedId</name> = <name><name>sharedConn</name>.<name>Guid</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else>else
                <block>{
                    <decl_stmt><decl><type><name>var</name></type> <name>previousItem</name> =<init> <expr><name><name>cbSharedConnection</name>.<name>SelectedItem</name></name> as <name>SharableConnection</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>previousItem</name> != <name>null</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>selectedId</name> = <name><name>previousItem</name>.<name>Guid</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>

                <expr_stmt><expr><call><name><name>cbSharedConnection</name>.<name>Items</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <foreach>foreach (<init><decl><type><name>var</name></type> <name>c</name> <init>in <expr><name>connections</name></expr></init></decl></init>)
                <block>{
                    <expr_stmt><expr><call><name><name>cbSharedConnection</name>.<name>Items</name>.<name>Add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>c</name>.<name>Guid</name></name> == <name>selectedId</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name><name>cbSharedConnection</name>.<name>SelectedItem</name></name> = <name>c</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>btnRefreshSharableConnections_Click</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>RoutedEventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>RefreshSharableConnectionsDisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>Window_Loaded</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>RoutedEventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{

        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
