<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\test_sys_cs\Class1.cs"><using>using <name>System</name>;</using>

<class><specifier>public</specifier> class <name>Class1</name> <super>: <name><name>Class2</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>, <name>Interface1</name>, <name><name>Interface2</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super>
<block>{

    <function><type><specifier>public</specifier> <name>Type0</name></type> <name>method1</name><parameter_list>(<param><decl><type><name>Type1</name></type> <name>param1</name></decl></param>, <param><decl><type><name>Type2</name></type> <name>param2</name></decl></param>)</parameter_list><block>{
		
		<decl_stmt><decl><type><name>Type3</name></type> <name>t</name>=<init><expr>new <call><name>Type3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>Type4</name></expr> ;</expr_stmt>
		
		<constructor_decl><specifier>new</specifier> <name>Type5</name><parameter_list>()</parameter_list>;</constructor_decl>
		
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr>new <call><name>Type15</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr>0</expr>;</return>
	}</block></function>

    <function><type><specifier>public</specifier> <name><name>Type51</name>.<name><name>Type6</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>method2</name><parameter_list>(<param><decl><type><name><name>Type7</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>param1</name></decl></param>, <param><decl><type><name><name>Type8</name>.<name>Type50</name></name></type> <name>param2</name></decl></param>)</parameter_list><block>{
		
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>Type20</name>.<name>Type9</name></name></type> <name>t</name>=<init><expr>new <call><name>Type10</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>Type11</name></expr> ;</expr_stmt>
		
		<constructor_decl><specifier>new</specifier> <name><name>Type21</name>.<name>Type92</name>.<name><name>Type12</name><argument_list>&lt;<argument><name>Type100</name></argument>&gt;</argument_list></name></name><parameter_list>()</parameter_list>;</constructor_decl>
		
		<return>return <expr>0</expr>;</return>
	}</block></function>
}</block></class>

<class><specifier>public</specifier> class <name>class111</name> <super>: <name><name>pack</name>.<name>class222</name></name>, <name><name>pack2</name>.<name>class222</name></name></super>
<block>{

}</block></class></unit>
