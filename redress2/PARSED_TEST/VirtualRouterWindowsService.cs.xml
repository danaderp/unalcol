<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterService\VirtualRouterWindowsService.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Diagnostics</name></name>;</using>
<using>using <name><name>System</name>.<name>IO</name></name>;</using>
<using>using <name><name>System</name>.<name>Linq</name></name>;</using>
<using>using <name><name>System</name>.<name>Runtime</name>.<name>Serialization</name></name>;</using>
<using>using <name><name>System</name>.<name>ServiceModel</name></name>;</using>
<using>using <name><name>System</name>.<name>ServiceProcess</name></name>;</using>
<using>using <name>VirtualRouterHost</name>;</using>

<namespace>namespace <name>VirtualRouterService</name>
<block>{
    <class><specifier>public</specifier> <specifier>partial</specifier> class <name>VirtualRouterWindowsService</name> <super>: <name>ServiceBase</name></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>ServiceHost</name></type> <name>serviceHost</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>VirtualRouterHost</name>.<name>VirtualRouterHost</name></name></type> <name>virtualRouterHost</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>VirtualRouterWindowsService</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>InitializeComponent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>AutoLog</name></name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>CanShutdown</name></name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>CanPauseAndContinue</name></name> = true</expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <specifier>override</specifier> <name>void</name></type> <name>OnStart</name><parameter_list>(<param><decl><type><name><name>string</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list>
        <block>{
            <try>try
            <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>serviceHost</name></name> != <name>null</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>serviceHost</name>.<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name><name>this</name>.<name>virtualRouterHost</name></name> = new <call><name><name>VirtualRouterHost</name>.<name>VirtualRouterHost</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>serviceHost</name></name> = new <call><name>ServiceHost</name><argument_list>(<argument><expr><name><name>this</name>.<name>virtualRouterHost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>LoadSavedState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                
                <if>if <condition>(<expr><name><name>this</name>.<name>serviceHost</name>.<name>State</name></name> != <name><name>CommunicationState</name>.<name>Opened</name></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>serviceHost</name>.<name>Open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block>
            <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>)
            <block>{
                <expr_stmt><expr><call><name>WriteLog</name><argument_list>(<argument><expr>"Error Starting Service \n" + <call><name><name>ex</name>.<name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>protected</specifier> <specifier>override</specifier> <name>void</name></type> <name>OnStop</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>virtualRouterHost</name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>SaveState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>virtualRouterHost</name>.<name>Stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>this</name>.<name>serviceHost</name></name> != <name>null</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>serviceHost</name>.<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>serviceHost</name></name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>protected</specifier> <specifier>override</specifier> <name>void</name></type> <name>OnShutdown</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>OnStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>protected</specifier> <specifier>override</specifier> <name>void</name></type> <name>OnPause</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>OnShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>protected</specifier> <specifier>override</specifier> <name>void</name></type> <name>OnContinue</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>OnStart</name></name><argument_list>(<argument><expr>new <name><name>string</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><type><name>string</name></type> <name>strStateFileName</name> =<init> <expr><call><name><name>Path</name>.<name>Combine</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>AppDomain</name>.<name>CurrentDomain</name>.<name>BaseDirectory</name></name></expr></argument> , <argument><expr>"VirtualRouterService.savedstate"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><name>void</name></type> <name>LoadSavedState</name><parameter_list>()</parameter_list>
        <block>{
            <try>try
            <block>{
                <if>if <condition>(<expr><call><name><name>File</name>.<name>Exists</name></name><argument_list>(<argument><expr><name>strStateFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>VirtualRouterServiceState</name></type> <name>state</name></decl>;</decl_stmt>
                    <using>using (<decl><type><name>var</name></type> <name>file</name> =<init> <expr>new <call><name>StreamReader</name><argument_list>(<argument><expr><name>strStateFileName</name></expr></argument>)</argument_list></call></expr></init></decl>)
                    <block>{
                        <decl_stmt><decl><type><name>var</name></type> <name>serializer</name> =<init> <expr>new <call><name>DataContractSerializer</name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>VirtualRouterServiceState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>state</name> = (<name>VirtualRouterServiceState</name>)<call><name><name>serializer</name>.<name>ReadObject</name></name><argument_list>(<argument><expr><name><name>file</name>.<name>BaseStream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>file</name>.<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></using>

                    <if>if <condition>(<expr><name>state</name> != <name>null</name></expr>)</condition><then>
                    <block>{
                        <if>if <condition>(<expr><name><name>state</name>.<name>IsStarted</name></name></expr>)</condition><then>
                        <block>{
                            <comment type="line">// Set SSID and Password</comment>
                            <expr_stmt><expr><call><name><name>this</name>.<name>virtualRouterHost</name>.<name>SetConnectionSettings</name></name><argument_list>(<argument><expr><name><name>state</name>.<name>SSID</name></name></expr></argument>, <argument><expr><name><name>state</name>.<name>MaxPeerCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>this</name>.<name>virtualRouterHost</name>.<name>SetPassword</name></name><argument_list>(<argument><expr><name><name>state</name>.<name>Password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="line">// Get the Shared Connection</comment>
                            <decl_stmt><decl><type><name>var</name></type> <name>conns</name> =<init> <expr><call><name><name>this</name>.<name>virtualRouterHost</name>.<name>GetSharableConnections</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


                            <decl_stmt><decl><type><name>SharableConnection</name></type> <name>sharedConnection</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr>!<call><name><name>string</name>.<name>IsNullOrEmpty</name></name><argument_list>(<argument><expr><name><name>state</name>.<name>SharedConnectionGuid</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                            <block>{
                                <expr_stmt><expr><name>sharedConnection</name> = (<linq><from>from <expr><name>c</name></expr> <in>in <expr><name>conns</name></expr></in></from>
                                                    <where>where <expr><call><name><name>c</name>.<name>Guid</name>.<name>ToString</name></name><argument_list>()</argument_list></call> == new <call><name>Guid</name><argument_list>(<argument><expr><name><name>state</name>.<name>SharedConnectionGuid</name></name></expr></argument>)</argument_list></call>.<call><name>ToString</name><argument_list>()</argument_list></call></expr></where>
                                                    <select>select <expr><name>c</name></expr></select></linq>).<call><name>FirstOrDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>sharedConnection</name> == <name>null</name></expr>)</condition><then>
                                <block>{
                                    <expr_stmt><expr><name>sharedConnection</name> = <call><name><name>conns</name>.<name>First</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                            }</block></then></if>

                            <expr_stmt><expr><call><name><name>this</name>.<name>virtualRouterHost</name>.<name>Start</name></name><argument_list>(<argument><expr><name>sharedConnection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then></if>
            }</block>
            <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>)
            <block>{
                <expr_stmt><expr><call><name>WriteLog</name><argument_list>(<argument><expr>"Error Loading Service State - " + <call><name><name>ex</name>.<name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><name>void</name></type> <name>SaveState</name><parameter_list>()</parameter_list>
        <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
            <expr_stmt><expr><call><name>WriteLog</name><argument_list>(<argument><expr>"Start Saving State"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <decl_stmt><decl><type><name>StreamWriter</name></type> <name>sw</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <decl_stmt><decl><type><name>var</name></type> <name>state</name> =<init> <expr>new <call><name>VirtualRouterServiceState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>state</name>.<name>IsStarted</name></name> = <call><name><name>this</name>.<name>virtualRouterHost</name>.<name>IsStarted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>var</name></type> <name>conn</name> =<init> <expr><call><name><name>this</name>.<name>virtualRouterHost</name>.<name>GetSharedConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>conn</name> != <name>null</name></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name><name>conn</name>.<name>Guid</name></name> != <name>null</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name><name>state</name>.<name>SharedConnectionGuid</name></name> = <call><name><name>this</name>.<name>virtualRouterHost</name>.<name>GetSharedConnection</name></name><argument_list>()</argument_list></call>.<call><name><name>Guid</name>.<name>ToString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <decl_stmt><decl><type><name>var</name></type> <name>connSettings</name> =<init> <expr><call><name><name>this</name>.<name>virtualRouterHost</name>.<name>GetConnectionSettings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>state</name>.<name>SSID</name></name> = <name><name>connSettings</name>.<name>SSID</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>state</name>.<name>MaxPeerCount</name></name> = <name><name>connSettings</name>.<name>MaxPeerCount</name></name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>state</name>.<name>Password</name></name> = <call><name><name>this</name>.<name>virtualRouterHost</name>.<name>GetPassword</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>



                <expr_stmt><expr><name>sw</name> = new <call><name>StreamWriter</name><argument_list>(<argument><expr>new <call><name>FileStream</name><argument_list>(<argument><expr><name>strStateFileName</name></expr></argument>, <argument><expr><name><name>FileMode</name>.<name>Create</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>var</name></type> <name>stream</name> =<init> <expr><name><name>sw</name>.<name>BaseStream</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>var</name></type> <name>serializer</name> =<init> <expr>new <call><name>DataContractSerializer</name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>VirtualRouterServiceState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>serializer</name>.<name>WriteObject</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>)
            <block>{
                <expr_stmt><expr><call><name>WriteLog</name><argument_list>(<argument><expr>"Error Saving Service State - " + <call><name><name>ex</name>.<name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
            <finally>finally
            <block>{
                <if>if <condition>(<expr><name>sw</name> != <name>null</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>sw</name>.<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sw</name>.<name>Dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
            <expr_stmt><expr><call><name>WriteLog</name><argument_list>(<argument><expr>"State Saved"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>WriteLog</name><parameter_list>(<param><decl><type><name>string</name></type> <name>message</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>EventLog</name>.<name>WriteEntry</name></name><argument_list>(<argument><expr>"Virtual Router Service"</expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>EventLogEntryType</name>.<name>Information</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
