<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="D:\thesisCode\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouter.ICS\IcsConnection.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name>NETCONLib</name>;</using>

<namespace>namespace <name>IcsMgr</name>
<block>{
    <class><specifier>public</specifier> class <name>IcsConnection</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>INetSharingManager</name></type> <name>_NSManager</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>IcsConnection</name><parameter_list>(<param><decl><type><name>INetSharingManager</name></type> <name>pIcsMgr</name></decl></param>, <param><decl><type><name>INetConnection</name></type> <name>pNetConnection</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>INetConnection</name></name> = <name>pNetConnection</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>_NSManager</name></name> = <name>pIcsMgr</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier>public</specifier> <name>INetConnection</name></type> <name>INetConnection</name> <block>{ <function_decl><name>get</name>;</function_decl> private <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>INetSharingConfiguration</name></type> <name>_config</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>INetSharingConfiguration</name></type> <name>config</name>
        <block>{
            <function><name>get</name>
            <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>_config</name></name> == <name>null</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>_config</name></name> = <call><name><name>this</name>.<name>_NSManager</name>.<name>get_INetSharingConfigurationForINetConnection</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>INetConnection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name><name>this</name>.<name>_config</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>INetConnectionProps</name></type> <name>_props</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>INetConnectionProps</name></type> <name>props</name>
        <block>{
            <function><name>get</name>
            <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>_props</name></name> == <name>null</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>_props</name></name> = <call><name><name>this</name>.<name>_NSManager</name>.<name>get_NetConnectionProps</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>INetConnection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name><name>this</name>.<name>_props</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>bool</name></type> <name>IsSupported</name>
        <block>{
            <function><name>get</name>
            <block>{
                <decl_stmt><decl><type><name>var</name></type> <name>props</name> =<init> <expr><name><name>this</name>.<name>props</name></name></expr></init></decl>;</decl_stmt>

                <return>return <expr>((
                        <name><name>props</name>.<name>MediaType</name></name> == <name><name>tagNETCON_MEDIATYPE</name>.<name>NCM_LAN</name></name>
                        || <name><name>props</name>.<name>MediaType</name></name> == <name><name>tagNETCON_MEDIATYPE</name>.<name>NCM_DIRECT</name></name>
                        || <name><name>props</name>.<name>MediaType</name></name> == <name><name>tagNETCON_MEDIATYPE</name>.<name>NCM_ISDN</name></name>
                        || <name><name>props</name>.<name>MediaType</name></name> == <name><name>tagNETCON_MEDIATYPE</name>.<name>NCM_PHONE</name></name>
                        || <name><name>props</name>.<name>MediaType</name></name> == <name><name>tagNETCON_MEDIATYPE</name>.<name>NCM_PPPOE</name></name>
                        || <name><name>props</name>.<name>MediaType</name></name> == <name><name>tagNETCON_MEDIATYPE</name>.<name>NCM_TUNNEL</name></name>
                        || <name><name>props</name>.<name>MediaType</name></name> == <name><name>tagNETCON_MEDIATYPE</name>.<name>NCM_BRIDGE</name></name>
                    ) &amp;&amp; (
                        <name><name>props</name>.<name>Status</name></name> != <name><name>tagNETCON_STATUS</name>.<name>NCS_DISCONNECTED</name></name>
                    ))</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>bool</name></type> <name>SharingEnabled</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><name><name>this</name>.<name>config</name>.<name>SharingEnabled</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>bool</name></type> <name>IsPublic</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr>(<name><name>this</name>.<name>config</name>.<name>SharingConnectionType</name></name> == <name><name>tagSHARINGCONNECTIONTYPE</name>.<name>ICSSHARINGTYPE_PUBLIC</name></name>)</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>bool</name></type> <name>IsPrivate</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr>(<name><name>this</name>.<name>config</name>.<name>SharingConnectionType</name></name> == <name><name>tagSHARINGCONNECTIONTYPE</name>.<name>ICSSHARINGTYPE_PRIVATE</name></name>)</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>bool</name></type> <name>IsConnected</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr>(<name><name>this</name>.<name>props</name>.<name>Status</name></name> == <name><name>tagNETCON_STATUS</name>.<name>NCS_CONNECTED</name></name>)</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>DeviceName</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><name><name>this</name>.<name>props</name>.<name>DeviceName</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>Name</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><name><name>this</name>.<name>props</name>.<name>Name</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <name>Guid</name></type> <name>Guid</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr>new <call><name>Guid</name><argument_list>(<argument><expr><name><name>this</name>.<name>props</name>.<name>Guid</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>DisableSharing</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>config</name> =<init> <expr><name><name>this</name>.<name>config</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>config</name>.<name>SharingEnabled</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>config</name>.<name>DisableSharing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>EnableAsPublic</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>config</name> =<init> <expr><name><name>this</name>.<name>config</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>config</name>.<name>DisableSharing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name>config</name>.<name>EnableSharing</name></name><argument_list>(<argument><expr><name><name>tagSHARINGCONNECTIONTYPE</name>.<name>ICSSHARINGTYPE_PUBLIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>EnableAsPrivate</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>config</name> =<init> <expr><name><name>this</name>.<name>config</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>config</name>.<name>DisableSharing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>config</name>.<name>EnableSharing</name></name><argument_list>(<argument><expr><name><name>tagSHARINGCONNECTIONTYPE</name>.<name>ICSSHARINGTYPE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>bool</name></type> <name>IsMatch</name><parameter_list>(<param><decl><type><name>Guid</name></type> <name>guid</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>((new <call><name>Guid</name><argument_list>(<argument><expr><name><name>this</name>.<name>props</name>.<name>Guid</name></name></expr></argument>)</argument_list></call>).<call><name>ToString</name><argument_list>()</argument_list></call>.<call><name>ToLowerInvariant</name><argument_list>()</argument_list></call> == <call><name><name>guid</name>.<name>ToString</name></name><argument_list>()</argument_list></call>.<call><name>ToLowerInvariant</name><argument_list>()</argument_list></call>)</expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
