<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="D:\thesisCode\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouter.Wlan\WinAPI\WLAN_INTERFACE_INFO_LIST.cs"><using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Runtime</name>.<name>InteropServices</name></name>;</using>

<namespace>namespace <name><name>VirtualRouter</name>.<name>Wlan</name>.<name>WinAPI</name></name>
<block>{
    <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// Contains an array of NIC information</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <struct><attribute>[<expr><call><name>StructLayout</name><argument_list>(<argument><expr><name><name>LayoutKind</name>.<name>Sequential</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier>public</specifier> struct <name>WLAN_INTERFACE_INFO_LIST</name>
        <block>{
        <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// Length of &lt;see cref="InterfaceInfo"/&gt; array</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>Int32</name></type> <name>dwNumberOfItems</name></decl>;</decl_stmt>
        <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// This member is not used by the wireless service. Applications can use this member when processing individual interfaces.</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>Int32</name></type> <name>dwIndex</name></decl>;</decl_stmt>
        <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// Array of WLAN interfaces.</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>WLAN_INTERFACE_INFO</name><index>[]</index></type> <name>InterfaceInfo</name></decl>;</decl_stmt>

        <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// Constructor for WLAN_INTERFACE_INFO_LIST.</comment>
        <comment type="line">/// Constructor is needed because the InterfaceInfo member varies based on how many adapters are in the system.</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <comment type="line">/// &lt;param name="pList"&gt;the unmanaged pointer containing the list.&lt;/param&gt;</comment>
        <constructor><specifier>public</specifier> <name>WLAN_INTERFACE_INFO_LIST</name><parameter_list>(<param><decl><type><name>IntPtr</name></type> <name>pList</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// The first 4 bytes are the number of WLAN_INTERFACE_INFO structures.</comment>
            <expr_stmt><expr><name>dwNumberOfItems</name> = <call><name><name>Marshal</name>.<name>ReadInt32</name></name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// The next 4 bytes are the index of the current item in the unmanaged API.</comment>
            <expr_stmt><expr><name>dwIndex</name> = <call><name><name>Marshal</name>.<name>ReadInt32</name></name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Construct the array of WLAN_INTERFACE_INFO structures.</comment>
            <expr_stmt><expr><name>InterfaceInfo</name> = new <name><name>WLAN_INTERFACE_INFO</name><index>[<expr><name>dwNumberOfItems</name></expr>]</index></name></expr>;</expr_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>dwNumberOfItems</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
            <comment type="line">// The offset of the array of structures is 8 bytes past the beginning. Then, take the index and multiply it by the number of bytes in the structure.</comment>
            <comment type="line">// the length of the WLAN_INTERFACE_INFO structure is 532 bytes - this was determined by doing a sizeof(WLAN_INTERFACE_INFO) in an unmanaged C++ app.</comment>
            <decl_stmt><decl><type><name>IntPtr</name></type> <name>pItemList</name> =<init> <expr>new <call><name>IntPtr</name><argument_list>(<argument><expr><call><name><name>pList</name>.<name>ToInt32</name></name><argument_list>()</argument_list></call> + (<name>i</name> * 532) + 8</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Construct the WLAN_INTERFACE_INFO structure, marshal the unmanaged structure into it, then copy it to the array of structures.</comment>
            <decl_stmt><decl><type><name>WLAN_INTERFACE_INFO</name></type> <name>wii</name> =<init> <expr>new <call><name>WLAN_INTERFACE_INFO</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>wii</name> = (<name>WLAN_INTERFACE_INFO</name>)<call><name><name>Marshal</name>.<name>PtrToStructure</name></name><argument_list>(<argument><expr><name>pItemList</name></expr></argument>, <argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>WLAN_INTERFACE_INFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>InterfaceInfo</name><index>[<expr><name>i</name></expr>]</index></name> = <name>wii</name></expr>;</expr_stmt>
            }</block></for>
        }</block></constructor>
    }</block></struct>
}</block></namespace>
</unit>
