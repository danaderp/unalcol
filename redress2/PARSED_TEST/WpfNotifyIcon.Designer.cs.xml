<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterClient\WpfNotifyIcon.Designer.cs"><namespace>namespace <name>VirtualRouterClient</name>
<block>{
    <class><specifier>partial</specifier> class <name>WpfNotifyIcon</name>
    <block>{
        <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// Required designer variable.</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>System</name>.<name>ComponentModel</name>.<name>IContainer</name></name></type> <name>components</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="line">/// &lt;summary&gt; </comment>
        <comment type="line">/// Clean up any resources being used.</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <comment type="line">/// &lt;param name="disposing"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;</comment>
        <function><type><specifier>protected</specifier> <specifier>override</specifier> <name>void</name></type> <name>Dispose</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>disposing</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>disposing</name> &amp;&amp; (<name>components</name> != <name>null</name>)</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>components</name>.<name>Dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>base</name>.<name>Dispose</name></name><argument_list>(<argument><expr><name>disposing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <cpp:region>#<cpp:directive>region</cpp:directive> Component Designer generated code</cpp:region>

        <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// Required method for Designer support - do not modify</comment>
        <comment type="line">/// the contents of this method with the code editor.</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>InitializeComponent</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>components</name></name> = new <call><name><name>System</name>.<name>ComponentModel</name>.<name>Container</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>notifyIcon1</name></name> = new <call><name><name>System</name>.<name>Windows</name>.<name>Forms</name>.<name>NotifyIcon</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>contextMenuStrip1</name></name> = new <call><name><name>System</name>.<name>Windows</name>.<name>Forms</name>.<name>ContextMenuStrip</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//</comment> 
            <comment type="line">// notifyIcon1</comment>
            <comment type="line">//</comment> 
            <expr_stmt><expr><name><name>this</name>.<name>notifyIcon1</name>.<name>Text</name></name> = "notifyIcon1"</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>notifyIcon1</name>.<name>Visible</name></name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>notifyIcon1</name>.<name>MouseDoubleClick</name></name> += new <call><name><name>System</name>.<name>Windows</name>.<name>Forms</name>.<name>MouseEventHandler</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>notifyIcon1_MouseDoubleClick</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//</comment> 
            <comment type="line">// contextMenuStrip1</comment>
            <comment type="line">//</comment> 
            <expr_stmt><expr><name><name>this</name>.<name>contextMenuStrip1</name>.<name>Name</name></name> = "contextMenuStrip1"</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>contextMenuStrip1</name>.<name>Size</name></name> = new <call><name><name>System</name>.<name>Drawing</name>.<name>Size</name></name><argument_list>(<argument><expr>61</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>System</name>.<name>Windows</name>.<name>Forms</name>.<name>NotifyIcon</name></name></type> <name>notifyIcon1</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>System</name>.<name>Windows</name>.<name>Forms</name>.<name>ContextMenuStrip</name></name></type> <name>contextMenuStrip1</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
