<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="D:\thesisCode\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterService\AssemblyAttributes.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>

<using>using <name><name>System</name>.<name>Reflection</name></name>;</using>

<namespace>namespace <name>VirtualRouterService</name>
<block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>AssemblyAttributes</name>
    <block>{
        <cpp:region>#<cpp:directive>region</cpp:directive> Assembly Attribute Accessors</cpp:region>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>AssemblyTitle</name>
        <block>{
            <function><name>get</name>
            <block>{
                <decl_stmt><decl><type><name>object</name><index>[]</index></type> <name>attributes</name> =<init> <expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<call><name>GetCustomAttributes</name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>AssemblyTitleAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>attributes</name>.<name>Length</name></name> &gt; 0</expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>AssemblyTitleAttribute</name></type> <name>titleAttribute</name> =<init> <expr>(<name>AssemblyTitleAttribute</name>)<name><name>attributes</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>titleAttribute</name>.<name>Title</name></name> != ""</expr>)</condition><then>
                    <block>{
                        <return>return <expr><name><name>titleAttribute</name>.<name>Title</name></name></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
                <return>return <expr><call><name><name>System</name>.<name>IO</name>.<name>Path</name>.<name>GetFileNameWithoutExtension</name></name><argument_list>(<argument><expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<name>CodeBase</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>AssemblyVersion</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<call><name>GetName</name><argument_list>()</argument_list></call>.<call><name><name>Version</name>.<name>ToString</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>AssemblyDescription</name>
        <block>{
            <function><name>get</name>
            <block>{
                <decl_stmt><decl><type><name>object</name><index>[]</index></type> <name>attributes</name> =<init> <expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<call><name>GetCustomAttributes</name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>AssemblyDescriptionAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>attributes</name>.<name>Length</name></name> == 0</expr>)</condition><then>
                <block>{
                    <return>return <expr>""</expr>;</return>
                }</block></then></if>
                <return>return <expr>((<name>AssemblyDescriptionAttribute</name>)<name><name>attributes</name><index>[<expr>0</expr>]</index></name>).<name>Description</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>AssemblyProduct</name>
        <block>{
            <function><name>get</name>
            <block>{
                <decl_stmt><decl><type><name>object</name><index>[]</index></type> <name>attributes</name> =<init> <expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<call><name>GetCustomAttributes</name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>AssemblyProductAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>attributes</name>.<name>Length</name></name> == 0</expr>)</condition><then>
                <block>{
                    <return>return <expr>""</expr>;</return>
                }</block></then></if>
                <return>return <expr>((<name>AssemblyProductAttribute</name>)<name><name>attributes</name><index>[<expr>0</expr>]</index></name>).<name>Product</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>AssemblyCopyright</name>
        <block>{
            <function><name>get</name>
            <block>{
                <decl_stmt><decl><type><name>object</name><index>[]</index></type> <name>attributes</name> =<init> <expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<call><name>GetCustomAttributes</name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>AssemblyCopyrightAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>attributes</name>.<name>Length</name></name> == 0</expr>)</condition><then>
                <block>{
                    <return>return <expr>""</expr>;</return>
                }</block></then></if>
                <return>return <expr>((<name>AssemblyCopyrightAttribute</name>)<name><name>attributes</name><index>[<expr>0</expr>]</index></name>).<name>Copyright</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>string</name></type> <name>AssemblyCompany</name>
        <block>{
            <function><name>get</name>
            <block>{
                <decl_stmt><decl><type><name>object</name><index>[]</index></type> <name>attributes</name> =<init> <expr><call><name><name>Assembly</name>.<name>GetExecutingAssembly</name></name><argument_list>()</argument_list></call>.<call><name>GetCustomAttributes</name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>AssemblyCompanyAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>attributes</name>.<name>Length</name></name> == 0</expr>)</condition><then>
                <block>{
                    <return>return <expr>""</expr>;</return>
                }</block></then></if>
                <return>return <expr>((<name>AssemblyCompanyAttribute</name>)<name><name>attributes</name><index>[<expr>0</expr>]</index></name>).<name>Company</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>
        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
