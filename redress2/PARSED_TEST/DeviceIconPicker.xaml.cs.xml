<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterClient\DeviceIcon\DeviceIconPicker.xaml.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Collections</name>.<name>Generic</name></name>;</using>
<using>using <name><name>System</name>.<name>Linq</name></name>;</using>
<using>using <name><name>System</name>.<name>Text</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Controls</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Data</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Documents</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Input</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Media</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Media</name>.<name>Imaging</name></name>;</using>
<using>using <name><name>System</name>.<name>Windows</name>.<name>Shapes</name></name>;</using>
<using>using <name><name>VirtualRouterClient</name>.<name>AeroGlass</name></name>;</using>

<namespace>namespace <name>VirtualRouterClient</name>
<block>{
    <comment type="line">/// &lt;summary&gt;</comment>
    <comment type="line">/// Interaction logic for DeviceIconPicker.xaml</comment>
    <comment type="line">/// &lt;/summary&gt;</comment>
    <class><specifier>public</specifier> <specifier>partial</specifier> class <name>DeviceIconPicker</name> <super>: <name>Window</name></super>
    <block>{
        <constructor><specifier>public</specifier> <name>DeviceIconPicker</name><parameter_list>(<param><decl><type><name>string</name></type> <name>deviceName</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>InitializeComponent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>lblInstructions</name>.<name>Content</name></name> = "Choose the icon to display for " + <name>deviceName</name> + "."</expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>Loaded</name></name> += new <call><name>RoutedEventHandler</name><argument_list>(<argument><expr><name>DeviceIconPicker_Loaded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <decl_stmt><decl><type><name>var</name></type> <name>icons</name> =<init> <expr>new <call><name><name>List</name><argument_list>&lt;<argument><name>PickerIcon</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>var</name></type> <name>iconNames</name> =<init> <expr><call><name><name>Enum</name>.<name>GetNames</name></name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>DeviceIconEnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach>foreach (<init><decl><type><name>var</name></type> <name>n</name> <init>in <expr><name>iconNames</name></expr></init></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>var</name></type> <name>e</name> =<init> <expr>(<name>DeviceIconEnum</name>)<call><name><name>Enum</name>.<name>Parse</name></name><argument_list>(<argument><expr><call><name>typeof</name><argument_list>(<argument><expr><name>DeviceIconEnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>icons</name>.<name>Add</name></name><argument_list>(<argument><expr>new <call><name>PickerIcon</name><argument_list>()</argument_list></call> <block>{ <expr><name>Value</name> = <name>e</name></expr>, <expr><name>IconName</name> = <call><name><name>e</name>.<name>ToDescriptionString</name></name><argument_list>()</argument_list></call></expr>, <expr><name>IconPath</name> = <call><name><name>e</name>.<name>ToResourceName</name></name><argument_list>()</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <expr_stmt><expr><name><name>listIcons</name>.<name>ItemsSource</name></name> = <name>icons</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier>public</specifier> <name>DeviceIconEnum</name></type> <name>SelectedIcon</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr>((<name>PickerIcon</name>)<name><name>listIcons</name>.<name>SelectedItem</name></name>).<name>Value</name></expr>;</return>
            }</block></function>
            <function><name>set</name>
            <block>{
                <foreach>foreach (<init><decl><type><name>var</name></type> <name>item</name> <init>in <expr><name><name>listIcons</name>.<name>Items</name></name></expr></init></decl></init>)
                <block>{
                    <decl_stmt><decl><type><name>var</name></type> <name>icon</name> =<init> <expr><name>item</name> as <name>PickerIcon</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>icon</name>.<name>Value</name></name> == <name>value</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name><name>listIcons</name>.<name>SelectedItem</name></name> = <name>item</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
            }</block></function>
        }</block></decl></decl_stmt>


        <function><type><name>void</name></type> <name>DeviceIconPicker_Loaded</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>RoutedEventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>AeroGlassHelper</name>.<name>ExtendGlass</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>windowContent</name>.<name>Margin</name>.<name>Left</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>windowContent</name>.<name>Margin</name>.<name>Right</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>windowContent</name>.<name>Margin</name>.<name>Top</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>windowContent</name>.<name>Margin</name>.<name>Bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>btnOK_Click</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>RoutedEventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>DialogResult</name></name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <class><specifier>public</specifier> class <name>PickerIcon</name>
        <block>{
            <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>IconPath</name> <block>{ <function_decl><name>get</name>;</function_decl> <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>IconName</name> <block>{ <function_decl><name>get</name>;</function_decl> <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier>public</specifier> <name>DeviceIconEnum</name></type> <name>Value</name> <block>{ <function_decl><name>get</name>;</function_decl> <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>
        }</block></class>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>listIcons_MouseDoubleClick</name><parameter_list>(<param><decl><type><name>object</name></type> <name>sender</name></decl></param>, <param><decl><type><name>MouseButtonEventArgs</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>btnOK_Click</name><argument_list>(<argument><expr><name>sender</name></expr></argument>, <argument><expr>new <call><name>RoutedEventArgs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
