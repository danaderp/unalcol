<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\virtualrouter-71075\Current\VirtualRouter\VirtualRouterClient\IPInfo.cs"><comment type="block">/*
* Virtual Router v1.0 - http://virtualrouter.codeplex.com
* Wifi Hot Spot for Windows 8, 7 and 2008 R2
* Copyright (c) 2013 Chris Pietschmann (http://pietschsoft.com)
* Licensed under the Microsoft Public License (Ms-PL)
* http://virtualrouter.codeplex.com/license
*/</comment>
<comment type="line">// This code was originally posted here:</comment>
<comment type="line">// http://pietschsoft.com/post.aspx?id=80df9f20-cb92-4257-8be0-da5678581715</comment>

<using>using <name>System</name>;</using>
<using>using <name><name>System</name>.<name>Collections</name>.<name>Generic</name></name>;</using>
<using>using <name><name>System</name>.<name>Linq</name></name>;</using>
<using>using <name><name>System</name>.<name>Text</name></name>;</using>
<using>using <name><name>System</name>.<name>Net</name></name>;</using>
<using>using <name><name>System</name>.<name>Diagnostics</name></name>;</using>

<namespace>namespace <name>VirtualRouterClient</name>
<block>{
    <comment type="line">/// &lt;summary&gt;</comment>
    <comment type="line">/// This class allows you to retrieve the IP Address and Host Name for a specific machine on the local network when you only know it's MAC Address.</comment>
    <comment type="line">/// &lt;/summary&gt;</comment>
    <class><specifier>public</specifier> class <name>IPInfo</name>
    <block>{
        <constructor><specifier>public</specifier> <name>IPInfo</name><parameter_list>(<param><decl><type><name>string</name></type> <name>macAddress</name></decl></param>, <param><decl><type><name>string</name></type> <name>ipAddress</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>MacAddress</name></name> = <name>macAddress</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>IPAddress</name></name> = <name>ipAddress</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>MacAddress</name> <block>{ <function_decl><name>get</name>;</function_decl> private <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>IPAddress</name> <block>{ <function_decl><name>get</name>;</function_decl> private <function_decl><name>set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>string</name></type> <name>hostName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>HostName</name>
        <block>{
            <function><name>get</name>
            <block>{
                <if>if <condition>(<expr><name>hostName</name> == <name>null</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>hostName</name> = <call><name><name>Dns</name>.<name>GetHostEntry</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>IPAddress</name></name></expr></argument>)</argument_list></call>.<name>HostName</name></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>hostName</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <cpp:region>#<cpp:directive>region</cpp:directive> "Static Methods"</cpp:region>

        <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// Retrieves the IPInfo for the machine on the local network with the specified MAC Address.</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <comment type="line">/// &lt;param name="macAddress"&gt;The MAC Address of the IPInfo to retrieve.&lt;/param&gt;</comment>
        <comment type="line">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IPInfo</name></type> <name>GetIPInfo</name><parameter_list>(<param><decl><type><name>string</name></type> <name>macAddress</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>var</name></type> <name>ipinfo</name> =<init> <expr>(<linq><from>from <expr><name>ip</name></expr> <in>in <expr><call><name><name>IPInfo</name>.<name>GetIPInfo</name></name><argument_list>()</argument_list></call></expr></in></from>
                          <where>where <expr><call><name><name>ip</name>.<name>MacAddress</name>.<name>ToLowerInvariant</name></name><argument_list>()</argument_list></call> == <call><name><name>macAddress</name>.<name>ToLowerInvariant</name></name><argument_list>()</argument_list></call></expr></where>
                          <select>select <expr><name>ip</name></expr></select></linq>).<call><name>FirstOrDefault</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><name>ipinfo</name></expr>;</return>
        }</block></function>

        <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// Retrieves the IPInfo for All machines on the local network.</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <comment type="line">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>IPInfo</name></argument>&gt;</argument_list></name></type> <name>GetIPInfo</name><parameter_list>()</parameter_list>
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name>var</name></type> <name>list</name> =<init> <expr>new <call><name><name>List</name><argument_list>&lt;<argument><name>IPInfo</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <foreach>foreach (<init><decl><type><name>var</name></type> <name>arp</name> <init>in <expr><call><name>GetARPResult</name><argument_list>()</argument_list></call>.<call><name>Split</name><argument_list>(<argument><expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'\n'</expr>, <expr>'\r'</expr> }</block></expr></argument>)</argument_list></call></expr></init></decl></init>)
                <block>{
                    <comment type="line">// Parse out all the MAC / IP Address combinations</comment>
                    <if>if <condition>(<expr>!<call><name><name>string</name>.<name>IsNullOrEmpty</name></name><argument_list>(<argument><expr><name>arp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <decl_stmt><decl><type><name>var</name></type> <name>pieces</name> =<init> <expr>(<name>from</name> <name>piece</name> in <call><name><name>arp</name>.<name>Split</name></name><argument_list>(<argument><expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>' '</expr>, <expr>'\t'</expr> }</block></expr></argument>)</argument_list></call>
                                      <linq><where>where <expr>!<call><name><name>string</name>.<name>IsNullOrEmpty</name></name><argument_list>(<argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr></where>
                                      <select>select <expr><name>piece</name></expr></select></linq>).<call><name>ToArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>pieces</name>.<name>Length</name></name> == 3</expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><call><name><name>list</name>.<name>Add</name></name><argument_list>(<argument><expr>new <call><name>IPInfo</name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>pieces</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></foreach>

                <comment type="line">// Return list of IPInfo objects containing MAC / IP Address combinations</comment>
                <return>return <expr><name>list</name></expr>;</return>
            }</block>
            <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>)
            <block>{
                <throw>throw <expr>new <call><name>Exception</name><argument_list>(<argument><expr>"IPInfo: Error Parsing 'arp -a' results"</expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <comment type="line">/// &lt;summary&gt;</comment>
        <comment type="line">/// This runs the "arp" utility in Windows to retrieve all the MAC / IP Address entries.</comment>
        <comment type="line">/// &lt;/summary&gt;</comment>
        <comment type="line">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>string</name></type> <name>GetARPResult</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Process</name></type> <name>p</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>string</name></type> <name>output</name> =<init> <expr><name><name>string</name>.<name>Empty</name></name></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{
                <expr_stmt><expr><name>p</name> = <call><name><name>Process</name>.<name>Start</name></name><argument_list>(<argument><expr>new <call><name>ProcessStartInfo</name><argument_list>(<argument><expr>"arp"</expr></argument>, <argument><expr>"-a"</expr></argument>)</argument_list></call>
                <block>{
                    <expr><name>CreateNoWindow</name> = true</expr>,
                    <expr><name>UseShellExecute</name> = false</expr>,
                    <expr><name>RedirectStandardOutput</name> = true</expr>
                }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>output</name> = <call><name><name>p</name>.<name>StandardOutput</name>.<name>ReadToEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>p</name>.<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>)
            <block>{
                <throw>throw <expr>new <call><name>Exception</name><argument_list>(<argument><expr>"IPInfo: Error Retrieving 'arp -a' Results"</expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch>
            <finally>finally
            <block>{
                <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>p</name>.<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>

            <return>return <expr><name>output</name></expr>;</return>
        }</block></function>

        <cpp:endregion>#<cpp:directive>endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
